(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i3 = 0; i3 < 10; i3++) {
            test2["_" + String.fromCharCode(i3)] = i3;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n3) {
            return test2[n3];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s3 = 1; s3 < arguments.length; s3++) {
          from = Object(arguments[s3]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i3 = 0; i3 < symbols.length; i3++) {
              if (propIsEnumerable.call(from, symbols[i3])) {
                to[symbols[i3]] = from[symbols[i3]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type3) {
            return type3.displayName || "Context";
          }
          function getComponentName(type3) {
            if (type3 == null) {
              return null;
            }
            {
              if (typeof type3.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type3 === "function") {
              return type3.displayName || type3.name || null;
            }
            if (typeof type3 === "string") {
              return type3;
            }
            switch (type3) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type3 === "object") {
              switch (type3.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type3;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type3;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type3, type3.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type3.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type3._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type3;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type3, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type: type3,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement7(type3, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type3 && type3.defaultProps) {
              var defaultProps = type3.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type3 === "function" ? type3.displayName || type3.name || "Unknown" : type3;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type3, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type3 = typeof children;
            if (type3 === "undefined" || type3 === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type3) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                  return c3;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i3 = 0; i3 < children.length; i3++) {
                child = children[i3];
                nextName = nextNamePrefix + getElementKey(child, i3);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type3 === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n3 = 0;
            mapChildren(children, function() {
              n3++;
            });
            return n3;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef7(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType2(type3) {
            if (typeof type3 === "string" || typeof type3 === "function") {
              return true;
            }
            if (type3 === exports.Fragment || type3 === exports.Profiler || type3 === REACT_DEBUG_TRACING_MODE_TYPE || type3 === exports.StrictMode || type3 === exports.Suspense || type3 === REACT_SUSPENSE_LIST_TYPE || type3 === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type3 === "object" && type3 !== null) {
              if (type3.$$typeof === REACT_LAZY_TYPE || type3.$$typeof === REACT_MEMO_TYPE || type3.$$typeof === REACT_PROVIDER_TYPE || type3.$$typeof === REACT_CONTEXT_TYPE || type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_FUNDAMENTAL_TYPE || type3.$$typeof === REACT_BLOCK_TYPE || type3[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type3, compare) {
            {
              if (!isValidElementType2(type3)) {
                error("memo: The first argument must be a component. Instead received: %s", type3 === null ? "null" : typeof type3);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type: type3,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type3.displayName == null) {
                    type3.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext5(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState2(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer3(reducer2, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer2, initialArg, init);
          }
          function useRef4(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo4(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type3, source, ownerFn) {
            if (type3 == null) {
              return "";
            }
            if (typeof type3 === "function") {
              {
                return describeNativeComponentFrame(type3, shouldConstruct(type3));
              }
            }
            if (typeof type3 === "string") {
              return describeBuiltInComponentFrame(type3);
            }
            switch (type3) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type3 === "object") {
              switch (type3.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type3.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type3.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type3._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type3;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i3 = 0; i3 < node.length; i3++) {
                var child = node[i3];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type3 = element.type;
              if (type3 === null || type3 === void 0 || typeof type3 === "string") {
                return;
              }
              var propTypes;
              if (typeof type3 === "function") {
                propTypes = type3.propTypes;
              } else if (typeof type3 === "object" && (type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type3.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type3);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type3.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type3);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type3.getDefaultProps === "function" && !type3.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys4 = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys4.length; i3++) {
                var key = keys4[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type3, props, children) {
            var validType = isValidElementType2(type3);
            if (!validType) {
              var info = "";
              if (type3 === void 0 || typeof type3 === "object" && type3 !== null && Object.keys(type3).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type3 === null) {
                typeString = "null";
              } else if (Array.isArray(type3)) {
                typeString = "array";
              } else if (type3 !== void 0 && type3.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type3.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type3;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement7.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i3 = 2; i3 < arguments.length; i3++) {
                validateChildKeys(arguments[i3], type3);
              }
            }
            if (type3 === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type3) {
            var validatedFactory = createElementWithValidation.bind(null, type3);
            validatedFactory.type = type3;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type3
                  });
                  return type3;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e3) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef7;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback;
          exports.useContext = useContext5;
          exports.useDebugValue = useDebugValue2;
          exports.useEffect = useEffect4;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect2;
          exports.useMemo = useMemo4;
          exports.useReducer = useReducer3;
          exports.useRef = useRef4;
          exports.useState = useState2;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e3) {
                  setTimeout(_flushCallback, 0);
                  throw e3;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame2 = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index2 = heap.length;
            heap.push(node);
            siftUp(heap, node, index2);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last2 = heap.pop();
              if (last2 !== first) {
                heap[0] = last2;
                siftDown(heap, last2, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i3) {
            var index2 = i3;
            while (true) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i3) {
            var index2 = i3;
            var length3 = heap.length;
            while (index2 < length3) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node;
                  index2 = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a3, b3) {
            var diff = a3.sortIndex - b3.sortIndex;
            return diff !== 0 ? diff : a3.id - b3.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task2, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task2) {
            task2.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React16 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React16.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React16) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef7 = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i3 = 0; i3 < dependencies.length; i3++) {
              allNativeEvents.add(dependencies[i3]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type3, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type3 === BOOLEANISH_STRING || type3 === BOOLEAN || type3 === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type3;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type3 = propertyInfo.type;
                node[propertyName] = type3 === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type3, source, ownerFn) {
            if (type3 == null) {
              return "";
            }
            if (typeof type3 === "function") {
              {
                return describeNativeComponentFrame(type3, shouldConstruct(type3));
              }
            }
            if (typeof type3 === "string") {
              return describeBuiltInComponentFrame(type3);
            }
            switch (type3) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type3 === "object") {
              switch (type3.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type3.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type3.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type3._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type3;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef7:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type3) {
            return type3.displayName || "Context";
          }
          function getComponentName(type3) {
            if (type3 == null) {
              return null;
            }
            {
              if (typeof type3.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type3 === "function") {
              return type3.displayName || type3.name || null;
            }
            if (typeof type3 === "string") {
              return type3;
            }
            switch (type3) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type3 === "object") {
              switch (type3.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type3;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type3;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type3, type3.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type3.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type3._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type3;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString4(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type3 = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type3 === "checkbox" || type3 === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e3) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type3 = props.type;
            if (value != null) {
              if (type3 === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString4(value);
                }
              } else if (node.value !== toString4(value)) {
                node.value = toString4(value);
              }
            } else if (type3 === "submit" || type3 === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type3 = props.type;
              var isButton = type3 === "submit" || type3 === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString4(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i3 = 0; i3 < group.length; i3++) {
                var otherNode = group[i3];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type3, value) {
            if (type3 !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString4(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString4(value)) {
                node.defaultValue = toString4(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React16.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React16.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString4(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i3 = 0; i3 < selectedValues.length; i3++) {
                selectedValue["$" + selectedValues[i3]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString4(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString4(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString4(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString4(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type3) {
            switch (type3) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type3) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type3);
            }
            if (parentNamespace === SVG_NAMESPACE && type3 === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html2) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop3) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop3)] = isUnitlessNumber[prop3];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_3, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i3 = 0; i3 < longhands.length; i3++) {
                expanded[longhands[i3]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type3, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type3, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop3) {
                return "`" + prop3 + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type3);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type3);
              }
            }
          }
          function validateProperties(type3, props) {
            if (isCustomComponent(type3, props)) {
              return;
            }
            warnInvalidARIAProps(type3, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type3, props) {
            {
              if (type3 !== "input" && type3 !== "textarea" && type3 !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type3 === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type3);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type3);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type3, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type3, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop3) {
                return "`" + prop3 + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type3);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type3);
              }
            }
          };
          function validateProperties$2(type3, props, eventRegistry) {
            if (isCustomComponent(type3, props)) {
              return;
            }
            warnUnknownProperties(type3, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i3 = 0; i3 < queuedTargets.length; i3++) {
                restoreStateOfTarget(queuedTargets[i3]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn2, a3, b3, c3, d3) {
            return fn2(a3, b3, c3, d3);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, bookkeeping) {
            if (isInsideEventHandler) {
              return fn2(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn2, a3, b3) {
            if (isBatchingEventUpdates) {
              return fn2(a3, b3);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn2, a3, b3);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn2, a3, b3, c3, d3) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn2, a3, b3, c3, d3);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type3, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type3));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener2 = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener2 || typeof listener2 === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener2 + "` type.");
              }
            }
            return listener2;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e3) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a3, b3, c3, d3, e3, f3) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a3, b3, c3, d3, e3, f3) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a3, b3, c3, d3, e3, f3) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a3, b3, c3, d3, e3, f3) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a3 = fiber;
            var b3 = alternate;
            while (true) {
              var parentA = a3.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a3 = b3 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a3) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b3) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a3.return !== b3.return) {
                a3 = parentA;
                b3 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentA;
                    b3 = parentB;
                    break;
                  }
                  if (_child === b3) {
                    didFindChild = true;
                    b3 = parentA;
                    a3 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a3) {
                      didFindChild = true;
                      a3 = parentB;
                      b3 = parentA;
                      break;
                    }
                    if (_child === b3) {
                      didFindChild = true;
                      b3 = parentB;
                      a3 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a3.alternate === b3)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a3.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a3.stateNode.current === a3) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn2) {
            attemptUserBlockingHydration = fn2;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map3) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map3.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
                var queuedEvent = queuedDiscreteEvents[i3];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i3 = 0; i3 < eventTypes.length; i3 += 2) {
              var topEvent = eventTypes[i3];
              var event = eventTypes[i3 + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i3 = 0; i3 < eventTypes.length; i3++) {
              eventPriorities.set(eventTypes[i3], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index3 = 31 - clz32(lanes);
            return index3 < 0 ? NoLanes : 1 << index3;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a3, b3) {
            return (a3 & b3) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a3, b3) {
            return a3 | b3;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a3, b3) {
            return a3 !== NoLane && a3 < b3 ? a3 : b3;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i3 = 0; i3 < TotalLanes; i3++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, false);
            return listener2;
          }
          function addEventCaptureListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, true);
            return listener2;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              capture: true,
              passive
            });
            return listener2;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              passive
            });
            return listener2;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x2, y3) {
            return x2 === y3 && (x2 !== 0 || 1 / x2 === 1 / y3) || x2 !== x2 && y3 !== y3;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual2(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i3 = 0; i3 < keysA.length; i3++) {
              if (!hasOwnProperty$2.call(objB, keysA[i3]) || !objectIs(objA[keysA[i3]], objB[keysA[i3]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e3) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length3 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length3 + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length3 + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length3 += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length3;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length3;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length3 = node.textContent.length;
            var start = Math.min(offsets.start, length3);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length3);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i3 = 0; i3 < ancestors.length; i3++) {
                var info = ancestors[i3];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener2, currentTarget) {
            var type3 = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type3, listener2, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
                var _dispatchListeners$i = dispatchListeners[i3], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener2 = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener2, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
              var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener2 = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener2);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener2);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener2, currentTarget) {
            return {
              instance,
              listener: listener2,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener2 = getListener(instance, reactEventName);
                  if (listener2 != null) {
                    listeners.push(createDispatchListener(instance, listener2, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type3, props) {
              validateProperties(type3, props);
              validateProperties$1(type3, props);
              validateProperties$2(type3, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener2) {
              if (listener2 === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener2);
              }
            };
            normalizeHTML = function(parent, html2) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
              var propKey = updatePayload[i3];
              var propValue = updatePayload[i3 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement7(type3, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type3);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type3, props);
                if (!isCustomComponentTag && type3 !== type3.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type3);
                }
              }
              if (type3 === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type3, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type3);
                if (type3 === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type3);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type3)) {
                  warnedUnknownTags[type3] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type3);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type3, props) {
            switch (type3) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type3;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type3 = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type3 = container.tagName;
                namespace = getChildNamespace(ownNamespace, type3);
                break;
              }
            }
            {
              var validatedTag = type3.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type3, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type3);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type3);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type3, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type3, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type3);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement7(type3, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type3, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type3, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type3, props);
          }
          function prepareUpdate(domElement, type3, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type3);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type3, oldProps, newProps);
          }
          function shouldSetTextContent(type3, props) {
            return type3 === "textarea" || type3 === "option" || type3 === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type3, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type3, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type3, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type3, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type3, props) {
            if (instance.nodeType !== ELEMENT_NODE || type3.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type3, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type3, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type3, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type3);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type3, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type3);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type3 = workInProgress2.type;
              var contextTypes = type3.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type3) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type3) {
            {
              var childContextTypes = type3.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type3, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type3.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type3) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type3) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type3) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type3, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type3, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook2 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook2.isDisabled) {
              return true;
            }
            if (!hook2.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook2.inject(internals);
              injectedHook = hook2;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn2);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i3 = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i3 < _queue.length; i3++) {
                      var callback = _queue[i3];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i3 + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone2 = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone2;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i3 = 0; i3 < effects.length; i3++) {
                var effect = effects[i3];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React16.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type3, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type3) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last2 = returnFiber.lastEffect;
              if (last2 !== null) {
                last2.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i3 = 0; i3 < newChildren.length; i3++) {
                  var child = newChildren[i3];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef7:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c3) {
            if (!(c3 !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c3;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type3 = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type3);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type3 = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type3);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type3 = fiber.type;
            if (fiber.tag !== HostComponent || type3 !== "head" && type3 !== "body" && !shouldSetTextContent(type3, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
              var mutableSource = workInProgressSources[i3];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                    var oldHookName = hookTypesDev[i3];
                    var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i3 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
              if (objectIs(nextDeps[i3], prevDeps[i3])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook2 = currentlyRenderingFiber$1.memoizedState;
              while (hook2 !== null) {
                var queue = hook2.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook2 = hook2.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook2 = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook2;
            } else {
              workInProgressHook = workInProgressHook.next = hook2;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer2, initialArg, init) {
            var hook2 = mountWorkInProgressHook();
            var initialState2;
            if (init !== void 0) {
              initialState2 = init(initialArg);
            } else {
              initialState2 = initialArg;
            }
            hook2.memoizedState = hook2.baseState = initialState2;
            var queue = hook2.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer2,
              lastRenderedState: initialState2
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook2.memoizedState, dispatch];
          }
          function updateReducer(reducer2, initialArg, init) {
            var hook2 = updateWorkInProgressHook();
            var queue = hook2.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer2;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone2 = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone2;
                  }
                  if (update.eagerReducer === reducer2) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer2(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook2.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook2.memoizedState = newState;
              hook2.baseState = newBaseState;
              hook2.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook2.memoizedState, dispatch];
          }
          function rerenderReducer(reducer2, initialArg, init) {
            var hook2 = updateWorkInProgressHook();
            var queue = hook2.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer2;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook2.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer2(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook2.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook2.memoizedState = newState;
              if (hook2.baseQueue === null) {
                hook2.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook2, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook2.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook2.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook2 = mountWorkInProgressHook();
            hook2.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook2, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook2 = updateWorkInProgressHook();
            return useMutableSource(hook2, source, getSnapshot, subscribe);
          }
          function mountState(initialState2) {
            var hook2 = mountWorkInProgressHook();
            if (typeof initialState2 === "function") {
              initialState2 = initialState2();
            }
            hook2.memoizedState = hook2.baseState = initialState2;
            var queue = hook2.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState2
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook2.memoizedState, dispatch];
          }
          function updateState(initialState2) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState2) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy3, deps) {
            var effect = {
              tag,
              create,
              destroy: destroy3,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook2 = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook2.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook2 = updateWorkInProgressHook();
            return hook2.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook2 = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook2.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook2 = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy3 = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy3 = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy3, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook2.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy3, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook2 = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook2.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook2 = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook2.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook2.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook2 = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook2.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook2 = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook2.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook2.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type3 = Component.type;
              if (isSimpleFunctionComponent(type3) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type3;
                {
                  resolvedType = resolveFunctionForHotReloading(type3);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type3);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type3.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type3));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual2;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i3 = 0; i3 < mutableSourceEagerHydrationData.length; i3 += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i3];
                    var version = mutableSourceEagerHydrationData[i3 + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type3 = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type3, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type3, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef7: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type3 = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type3, index3, type3);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i3 = 0; i3 < children.length; i3++) {
                    if (!validateSuspenseListNestedChild(children[i3], i3)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail2, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail: tail2,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail2;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail2;
                  if (lastContentRow === null) {
                    tail2 = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail2 = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail2, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last2 = returnFiber.lastEffect;
              if (last2 !== null) {
                last2.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef7: {
                var type3 = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type3 ? _unresolvedProps2 : resolveDefaultProps(type3, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type3, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type3, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type3, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef7:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type3 = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type3, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type3, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type3, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e3) {
              setTimeout(function() {
                throw e3;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = /* @__PURE__ */ new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy3) {
            {
              invokeGuardedCallback(null, destroy3, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef7:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy3 = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy3 !== void 0) {
                    destroy3();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy3 = effect.destroy;
                    if (destroy3 !== void 0 && typeof destroy3 !== "function") {
                      var addendum = void 0;
                      if (destroy3 === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy3.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy3;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef7:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type3 = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type3, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef7:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy3 = _effect2.destroy, tag = _effect2.tag;
                      if (destroy3 !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy3);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef7:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type3 = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type3, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn2, a3, b3, c3, d3) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn2.bind(null, a3, b3, c3, d3));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn2, a3) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn2(a3);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn2, a3) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn2(a3);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn2) {
                  return runWithPriority$1(ImmediatePriority$1, fn2.bind(null, a3));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i3 = 0; i3 < expirationTimes.length; i3++) {
                    scheduleInteractions(root2, expirationTimes[i3], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i3 = 0; i3 < unmountEffects.length; i3 += 2) {
              var _effect = unmountEffects[i3];
              var fiber = unmountEffects[i3 + 1];
              var destroy3 = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy3 === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy3, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef7 && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef7 && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef7:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = /* @__PURE__ */ new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type3) {
            {
              if (resolveFamily === null) {
                return type3;
              }
              var family = resolveFamily(type3);
              if (family === void 0) {
                return type3;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type3) {
            return resolveFunctionForHotReloading(type3);
          }
          function resolveForwardRefForHotReloading(type3) {
            {
              if (resolveFamily === null) {
                return type3;
              }
              var family = resolveFamily(type3);
              if (family === void 0) {
                if (type3 !== null && type3 !== void 0 && typeof type3.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type3.render);
                  if (type3.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type3.displayName !== void 0) {
                      syntheticType.displayName = type3.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type3;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef7: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type3 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type3;
                  break;
                case ForwardRef7:
                  candidateType = type3.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type3 = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type3;
                  break;
                case ForwardRef7:
                  candidateType = type3.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e3) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type3) {
            return typeof type3 === "function" && !shouldConstruct$1(type3) && type3.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef7;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef7:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type3, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type3;
            if (typeof type3 === "function") {
              if (shouldConstruct$1(type3)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type3 === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type3) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type3 === "object" && type3 !== null) {
                      switch (type3.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef7;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type3 === void 0 || typeof type3 === "object" && type3 !== null && Object.keys(type3).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type3 == null ? type3 : typeof type3) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type3;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type3 = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type3, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn2) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn2();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path3, index3) {
              var key = path3[index3];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index3 + 1 === path3.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path3, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path3) {
              return copyWithDeleteImpl(obj, path3, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index3 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                  if (oldPath[i3] !== newPath[i3]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path3, index3, value) {
              if (index3 >= path3.length) {
                return value;
              }
              var key = path3[index3];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path3, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path3, value) {
              return copyWithSetImpl(obj, path3, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path3, value) {
              var hook2 = findHook(fiber, id);
              if (hook2 !== null) {
                var newState = copyWithSet(hook2.memoizedState, path3, value);
                hook2.memoizedState = newState;
                hook2.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path3) {
              var hook2 = findHook(fiber, id);
              if (hook2 !== null) {
                var newState = copyWithDelete(hook2.memoizedState, path3);
                hook2.memoizedState = newState;
                hook2.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook2 = findHook(fiber, id);
              if (hook2 !== null) {
                var newState = copyWithRename(hook2.memoizedState, oldPath, newPath);
                hook2.memoizedState = newState;
                hook2.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path3, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path3, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path3) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path3);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i3 = 0; i3 < mutableSources.length; i3++) {
                var mutableSource = mutableSources[i3];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type3) {
            return typeof type3 === "string" || typeof type3 === "function" || type3 === REACT_FRAGMENT_TYPE || type3 === REACT_CONCURRENT_MODE_TYPE || type3 === REACT_PROFILER_TYPE || type3 === REACT_STRICT_MODE_TYPE || type3 === REACT_SUSPENSE_TYPE || type3 === REACT_SUSPENSE_LIST_TYPE || typeof type3 === "object" && type3 !== null && (type3.$$typeof === REACT_LAZY_TYPE || type3.$$typeof === REACT_MEMO_TYPE || type3.$$typeof === REACT_PROVIDER_TYPE || type3.$$typeof === REACT_CONTEXT_TYPE || type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_FUNDAMENTAL_TYPE || type3.$$typeof === REACT_RESPONDER_TYPE || type3.$$typeof === REACT_SCOPE_TYPE || type3.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type3 = object.type;
                  switch (type3) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type3;
                    default:
                      var $$typeofType = type3 && type3.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef7 = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer2(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef7;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x2, y3) {
          if (x2 === y3) {
            return x2 !== 0 || 1 / x2 === 1 / y3;
          } else {
            return x2 !== x2 && y3 !== y3;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i3 = 0; i3 < propValue.length; i3++) {
              var error = typeChecker(propValue, i3, componentName, location, propFullName + "[" + i3 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i3 = 0; i3 < expectedValues.length; i3++) {
              if (is(propValue, expectedValues[i3])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type3 = getPreciseType(value);
              if (type3 === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker = arrayOfTypeCheckers[i3];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i3 + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i4 = 0; i4 < arrayOfTypeCheckers.length; i4++) {
              var checker2 = arrayOfTypeCheckers[i4];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type3) {
          return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type3 + "`.");
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type3 = getPreciseType(value);
          switch (type3) {
            case "array":
            case "object":
              return "an " + type3;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type3;
            default:
              return type3;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys4 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys4 = keys4.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i3 = 0; i3 < keys4.length; ++i3) {
            var key = keys4[i3];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e3) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/xterm/lib/xterm.js
  var require_xterm = __commonJS({
    "node_modules/xterm/lib/xterm.js"(exports, module) {
      !function(e3, t3) {
        if (typeof exports == "object" && typeof module == "object")
          module.exports = t3();
        else if (typeof define == "function" && define.amd)
          define([], t3);
        else {
          var r3 = t3();
          for (var i3 in r3)
            (typeof exports == "object" ? exports : e3)[i3] = r3[i3];
        }
      }(self, function() {
        return (() => {
          "use strict";
          var e3 = { 4567: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.AccessibilityManager = void 0;
            var o3 = r3(9042), s3 = r3(6114), a3 = r3(9924), c3 = r3(3656), l3 = r3(844), h3 = r3(5596), u3 = r3(9631), f3 = function(e5) {
              function t5(t6, r4) {
                var i4 = e5.call(this) || this;
                i4._terminal = t6, i4._renderService = r4, i4._liveRegionLineCount = 0, i4._charsToConsume = [], i4._charsToAnnounce = "", i4._accessibilityTreeRoot = document.createElement("div"), i4._accessibilityTreeRoot.classList.add("xterm-accessibility"), i4._accessibilityTreeRoot.tabIndex = 0, i4._rowContainer = document.createElement("div"), i4._rowContainer.setAttribute("role", "list"), i4._rowContainer.classList.add("xterm-accessibility-tree"), i4._rowElements = [];
                for (var n4 = 0; n4 < i4._terminal.rows; n4++)
                  i4._rowElements[n4] = i4._createAccessibilityTreeNode(), i4._rowContainer.appendChild(i4._rowElements[n4]);
                if (i4._topBoundaryFocusListener = function(e6) {
                  return i4._onBoundaryFocus(e6, 0);
                }, i4._bottomBoundaryFocusListener = function(e6) {
                  return i4._onBoundaryFocus(e6, 1);
                }, i4._rowElements[0].addEventListener("focus", i4._topBoundaryFocusListener), i4._rowElements[i4._rowElements.length - 1].addEventListener("focus", i4._bottomBoundaryFocusListener), i4._refreshRowsDimensions(), i4._accessibilityTreeRoot.appendChild(i4._rowContainer), i4._renderRowsDebouncer = new a3.TimeBasedDebouncer(i4._renderRows.bind(i4)), i4._refreshRows(), i4._liveRegion = document.createElement("div"), i4._liveRegion.classList.add("live-region"), i4._liveRegion.setAttribute("aria-live", "assertive"), i4._accessibilityTreeRoot.appendChild(i4._liveRegion), !i4._terminal.element)
                  throw new Error("Cannot enable accessibility before Terminal.open");
                return i4._terminal.element.insertAdjacentElement("afterbegin", i4._accessibilityTreeRoot), i4.register(i4._renderRowsDebouncer), i4.register(i4._terminal.onResize(function(e6) {
                  return i4._onResize(e6.rows);
                })), i4.register(i4._terminal.onRender(function(e6) {
                  return i4._refreshRows(e6.start, e6.end);
                })), i4.register(i4._terminal.onScroll(function() {
                  return i4._refreshRows();
                })), i4.register(i4._terminal.onA11yChar(function(e6) {
                  return i4._onChar(e6);
                })), i4.register(i4._terminal.onLineFeed(function() {
                  return i4._onChar("\n");
                })), i4.register(i4._terminal.onA11yTab(function(e6) {
                  return i4._onTab(e6);
                })), i4.register(i4._terminal.onKey(function(e6) {
                  return i4._onKey(e6.key);
                })), i4.register(i4._terminal.onBlur(function() {
                  return i4._clearLiveRegion();
                })), i4.register(i4._renderService.onDimensionsChange(function() {
                  return i4._refreshRowsDimensions();
                })), i4._screenDprMonitor = new h3.ScreenDprMonitor(), i4.register(i4._screenDprMonitor), i4._screenDprMonitor.setListener(function() {
                  return i4._refreshRowsDimensions();
                }), i4.register((0, c3.addDisposableDomListener)(window, "resize", function() {
                  return i4._refreshRowsDimensions();
                })), i4;
              }
              return n3(t5, e5), t5.prototype.dispose = function() {
                e5.prototype.dispose.call(this), (0, u3.removeElementFromParent)(this._accessibilityTreeRoot), this._rowElements.length = 0;
              }, t5.prototype._onBoundaryFocus = function(e6, t6) {
                var r4 = e6.target, i4 = this._rowElements[t6 === 0 ? 1 : this._rowElements.length - 2];
                if (r4.getAttribute("aria-posinset") !== (t6 === 0 ? "1" : "" + this._terminal.buffer.lines.length) && e6.relatedTarget === i4) {
                  var n4, o4;
                  if (t6 === 0 ? (n4 = r4, o4 = this._rowElements.pop(), this._rowContainer.removeChild(o4)) : (n4 = this._rowElements.shift(), o4 = r4, this._rowContainer.removeChild(n4)), n4.removeEventListener("focus", this._topBoundaryFocusListener), o4.removeEventListener("focus", this._bottomBoundaryFocusListener), t6 === 0) {
                    var s4 = this._createAccessibilityTreeNode();
                    this._rowElements.unshift(s4), this._rowContainer.insertAdjacentElement("afterbegin", s4);
                  } else
                    s4 = this._createAccessibilityTreeNode(), this._rowElements.push(s4), this._rowContainer.appendChild(s4);
                  this._rowElements[0].addEventListener("focus", this._topBoundaryFocusListener), this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._terminal.scrollLines(t6 === 0 ? -1 : 1), this._rowElements[t6 === 0 ? 1 : this._rowElements.length - 2].focus(), e6.preventDefault(), e6.stopImmediatePropagation();
                }
              }, t5.prototype._onResize = function(e6) {
                this._rowElements[this._rowElements.length - 1].removeEventListener("focus", this._bottomBoundaryFocusListener);
                for (var t6 = this._rowContainer.children.length; t6 < this._terminal.rows; t6++)
                  this._rowElements[t6] = this._createAccessibilityTreeNode(), this._rowContainer.appendChild(this._rowElements[t6]);
                for (; this._rowElements.length > e6; )
                  this._rowContainer.removeChild(this._rowElements.pop());
                this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._refreshRowsDimensions();
              }, t5.prototype._createAccessibilityTreeNode = function() {
                var e6 = document.createElement("div");
                return e6.setAttribute("role", "listitem"), e6.tabIndex = -1, this._refreshRowDimensions(e6), e6;
              }, t5.prototype._onTab = function(e6) {
                for (var t6 = 0; t6 < e6; t6++)
                  this._onChar(" ");
              }, t5.prototype._onChar = function(e6) {
                var t6 = this;
                this._liveRegionLineCount < 21 && (this._charsToConsume.length > 0 ? this._charsToConsume.shift() !== e6 && (this._charsToAnnounce += e6) : this._charsToAnnounce += e6, e6 === "\n" && (this._liveRegionLineCount++, this._liveRegionLineCount === 21 && (this._liveRegion.textContent += o3.tooMuchOutput)), s3.isMac && this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode && setTimeout(function() {
                  t6._accessibilityTreeRoot.appendChild(t6._liveRegion);
                }, 0));
              }, t5.prototype._clearLiveRegion = function() {
                this._liveRegion.textContent = "", this._liveRegionLineCount = 0, s3.isMac && (0, u3.removeElementFromParent)(this._liveRegion);
              }, t5.prototype._onKey = function(e6) {
                this._clearLiveRegion(), this._charsToConsume.push(e6);
              }, t5.prototype._refreshRows = function(e6, t6) {
                this._renderRowsDebouncer.refresh(e6, t6, this._terminal.rows);
              }, t5.prototype._renderRows = function(e6, t6) {
                for (var r4 = this._terminal.buffer, i4 = r4.lines.length.toString(), n4 = e6; n4 <= t6; n4++) {
                  var o4 = r4.translateBufferLineToString(r4.ydisp + n4, true), s4 = (r4.ydisp + n4 + 1).toString(), a4 = this._rowElements[n4];
                  a4 && (o4.length === 0 ? a4.innerText = "\xA0" : a4.textContent = o4, a4.setAttribute("aria-posinset", s4), a4.setAttribute("aria-setsize", i4));
                }
                this._announceCharacters();
              }, t5.prototype._refreshRowsDimensions = function() {
                if (this._renderService.dimensions.actualCellHeight) {
                  this._rowElements.length !== this._terminal.rows && this._onResize(this._terminal.rows);
                  for (var e6 = 0; e6 < this._terminal.rows; e6++)
                    this._refreshRowDimensions(this._rowElements[e6]);
                }
              }, t5.prototype._refreshRowDimensions = function(e6) {
                e6.style.height = this._renderService.dimensions.actualCellHeight + "px";
              }, t5.prototype._announceCharacters = function() {
                this._charsToAnnounce.length !== 0 && (this._liveRegion.textContent += this._charsToAnnounce, this._charsToAnnounce = "");
              }, t5;
            }(l3.Disposable);
            t4.AccessibilityManager = f3;
          }, 3614: (e4, t4) => {
            function r3(e5) {
              return e5.replace(/\r?\n/g, "\r");
            }
            function i3(e5, t5) {
              return t5 ? "\x1B[200~" + e5 + "\x1B[201~" : e5;
            }
            function n3(e5, t5, n4) {
              e5 = i3(e5 = r3(e5), n4.decPrivateModes.bracketedPasteMode), n4.triggerDataEvent(e5, true), t5.value = "";
            }
            function o3(e5, t5, r4) {
              var i4 = r4.getBoundingClientRect(), n4 = e5.clientX - i4.left - 10, o4 = e5.clientY - i4.top - 10;
              t5.style.width = "20px", t5.style.height = "20px", t5.style.left = n4 + "px", t5.style.top = o4 + "px", t5.style.zIndex = "1000", t5.focus();
            }
            Object.defineProperty(t4, "__esModule", { value: true }), t4.rightClickHandler = t4.moveTextAreaUnderMouseCursor = t4.paste = t4.handlePasteEvent = t4.copyHandler = t4.bracketTextForPaste = t4.prepareTextForTerminal = void 0, t4.prepareTextForTerminal = r3, t4.bracketTextForPaste = i3, t4.copyHandler = function(e5, t5) {
              e5.clipboardData && e5.clipboardData.setData("text/plain", t5.selectionText), e5.preventDefault();
            }, t4.handlePasteEvent = function(e5, t5, r4) {
              e5.stopPropagation(), e5.clipboardData && n3(e5.clipboardData.getData("text/plain"), t5, r4);
            }, t4.paste = n3, t4.moveTextAreaUnderMouseCursor = o3, t4.rightClickHandler = function(e5, t5, r4, i4, n4) {
              o3(e5, t5, r4), n4 && i4.rightClickSelect(e5), t5.value = i4.selectionText, t5.select();
            };
          }, 4774: (e4, t4) => {
            var r3, i3, n3, o3;
            function s3(e5) {
              var t5 = e5.toString(16);
              return t5.length < 2 ? "0" + t5 : t5;
            }
            function a3(e5, t5) {
              return e5 < t5 ? (t5 + 0.05) / (e5 + 0.05) : (e5 + 0.05) / (t5 + 0.05);
            }
            Object.defineProperty(t4, "__esModule", { value: true }), t4.contrastRatio = t4.toPaddedHex = t4.rgba = t4.rgb = t4.css = t4.color = t4.channels = void 0, function(e5) {
              e5.toCss = function(e6, t5, r4, i4) {
                return i4 !== void 0 ? "#" + s3(e6) + s3(t5) + s3(r4) + s3(i4) : "#" + s3(e6) + s3(t5) + s3(r4);
              }, e5.toRgba = function(e6, t5, r4, i4) {
                return i4 === void 0 && (i4 = 255), (e6 << 24 | t5 << 16 | r4 << 8 | i4) >>> 0;
              };
            }(r3 = t4.channels || (t4.channels = {})), (i3 = t4.color || (t4.color = {})).blend = function(e5, t5) {
              var i4 = (255 & t5.rgba) / 255;
              if (i4 === 1)
                return { css: t5.css, rgba: t5.rgba };
              var n4 = t5.rgba >> 24 & 255, o4 = t5.rgba >> 16 & 255, s4 = t5.rgba >> 8 & 255, a4 = e5.rgba >> 24 & 255, c3 = e5.rgba >> 16 & 255, l3 = e5.rgba >> 8 & 255, h3 = a4 + Math.round((n4 - a4) * i4), u3 = c3 + Math.round((o4 - c3) * i4), f3 = l3 + Math.round((s4 - l3) * i4);
              return { css: r3.toCss(h3, u3, f3), rgba: r3.toRgba(h3, u3, f3) };
            }, i3.isOpaque = function(e5) {
              return (255 & e5.rgba) == 255;
            }, i3.ensureContrastRatio = function(e5, t5, r4) {
              var i4 = o3.ensureContrastRatio(e5.rgba, t5.rgba, r4);
              if (i4)
                return o3.toColor(i4 >> 24 & 255, i4 >> 16 & 255, i4 >> 8 & 255);
            }, i3.opaque = function(e5) {
              var t5 = (255 | e5.rgba) >>> 0, i4 = o3.toChannels(t5), n4 = i4[0], s4 = i4[1], a4 = i4[2];
              return { css: r3.toCss(n4, s4, a4), rgba: t5 };
            }, i3.opacity = function(e5, t5) {
              var i4 = Math.round(255 * t5), n4 = o3.toChannels(e5.rgba), s4 = n4[0], a4 = n4[1], c3 = n4[2];
              return { css: r3.toCss(s4, a4, c3, i4), rgba: r3.toRgba(s4, a4, c3, i4) };
            }, i3.toColorRGB = function(e5) {
              return [e5.rgba >> 24 & 255, e5.rgba >> 16 & 255, e5.rgba >> 8 & 255];
            }, (t4.css || (t4.css = {})).toColor = function(e5) {
              switch (e5.length) {
                case 7:
                  return { css: e5, rgba: (parseInt(e5.slice(1), 16) << 8 | 255) >>> 0 };
                case 9:
                  return { css: e5, rgba: parseInt(e5.slice(1), 16) >>> 0 };
              }
              throw new Error("css.toColor: Unsupported css format");
            }, function(e5) {
              function t5(e6, t6, r4) {
                var i4 = e6 / 255, n4 = t6 / 255, o4 = r4 / 255;
                return 0.2126 * (i4 <= 0.03928 ? i4 / 12.92 : Math.pow((i4 + 0.055) / 1.055, 2.4)) + 0.7152 * (n4 <= 0.03928 ? n4 / 12.92 : Math.pow((n4 + 0.055) / 1.055, 2.4)) + 0.0722 * (o4 <= 0.03928 ? o4 / 12.92 : Math.pow((o4 + 0.055) / 1.055, 2.4));
              }
              e5.relativeLuminance = function(e6) {
                return t5(e6 >> 16 & 255, e6 >> 8 & 255, 255 & e6);
              }, e5.relativeLuminance2 = t5;
            }(n3 = t4.rgb || (t4.rgb = {})), function(e5) {
              function t5(e6, t6, r4) {
                for (var i5 = e6 >> 24 & 255, o4 = e6 >> 16 & 255, s4 = e6 >> 8 & 255, c3 = t6 >> 24 & 255, l3 = t6 >> 16 & 255, h3 = t6 >> 8 & 255, u3 = a3(n3.relativeLuminance2(c3, h3, l3), n3.relativeLuminance2(i5, o4, s4)); u3 < r4 && (c3 > 0 || l3 > 0 || h3 > 0); )
                  c3 -= Math.max(0, Math.ceil(0.1 * c3)), l3 -= Math.max(0, Math.ceil(0.1 * l3)), h3 -= Math.max(0, Math.ceil(0.1 * h3)), u3 = a3(n3.relativeLuminance2(c3, h3, l3), n3.relativeLuminance2(i5, o4, s4));
                return (c3 << 24 | l3 << 16 | h3 << 8 | 255) >>> 0;
              }
              function i4(e6, t6, r4) {
                for (var i5 = e6 >> 24 & 255, o4 = e6 >> 16 & 255, s4 = e6 >> 8 & 255, c3 = t6 >> 24 & 255, l3 = t6 >> 16 & 255, h3 = t6 >> 8 & 255, u3 = a3(n3.relativeLuminance2(c3, h3, l3), n3.relativeLuminance2(i5, o4, s4)); u3 < r4 && (c3 < 255 || l3 < 255 || h3 < 255); )
                  c3 = Math.min(255, c3 + Math.ceil(0.1 * (255 - c3))), l3 = Math.min(255, l3 + Math.ceil(0.1 * (255 - l3))), h3 = Math.min(255, h3 + Math.ceil(0.1 * (255 - h3))), u3 = a3(n3.relativeLuminance2(c3, h3, l3), n3.relativeLuminance2(i5, o4, s4));
                return (c3 << 24 | l3 << 16 | h3 << 8 | 255) >>> 0;
              }
              e5.ensureContrastRatio = function(e6, r4, o4) {
                var s4 = n3.relativeLuminance(e6 >> 8), c3 = n3.relativeLuminance(r4 >> 8);
                if (a3(s4, c3) < o4)
                  return c3 < s4 ? t5(e6, r4, o4) : i4(e6, r4, o4);
              }, e5.reduceLuminance = t5, e5.increaseLuminance = i4, e5.toChannels = function(e6) {
                return [e6 >> 24 & 255, e6 >> 16 & 255, e6 >> 8 & 255, 255 & e6];
              }, e5.toColor = function(e6, t6, i5) {
                return { css: r3.toCss(e6, t6, i5), rgba: r3.toRgba(e6, t6, i5) };
              };
            }(o3 = t4.rgba || (t4.rgba = {})), t4.toPaddedHex = s3, t4.contrastRatio = a3;
          }, 7239: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.ColorContrastCache = void 0;
            var r3 = function() {
              function e5() {
                this._color = {}, this._rgba = {};
              }
              return e5.prototype.clear = function() {
                this._color = {}, this._rgba = {};
              }, e5.prototype.setCss = function(e6, t5, r4) {
                this._rgba[e6] || (this._rgba[e6] = {}), this._rgba[e6][t5] = r4;
              }, e5.prototype.getCss = function(e6, t5) {
                return this._rgba[e6] ? this._rgba[e6][t5] : void 0;
              }, e5.prototype.setColor = function(e6, t5, r4) {
                this._color[e6] || (this._color[e6] = {}), this._color[e6][t5] = r4;
              }, e5.prototype.getColor = function(e6, t5) {
                return this._color[e6] ? this._color[e6][t5] : void 0;
              }, e5;
            }();
            t4.ColorContrastCache = r3;
          }, 5680: function(e4, t4, r3) {
            var i3 = this && this.__spreadArray || function(e5, t5, r4) {
              if (r4 || arguments.length === 2)
                for (var i4, n4 = 0, o4 = t5.length; n4 < o4; n4++)
                  !i4 && n4 in t5 || (i4 || (i4 = Array.prototype.slice.call(t5, 0, n4)), i4[n4] = t5[n4]);
              return e5.concat(i4 || Array.prototype.slice.call(t5));
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.ColorManager = t4.DEFAULT_ANSI_COLORS = void 0;
            var n3 = r3(4774), o3 = r3(7239), s3 = n3.css.toColor("#ffffff"), a3 = n3.css.toColor("#000000"), c3 = n3.css.toColor("#ffffff"), l3 = n3.css.toColor("#000000"), h3 = { css: "rgba(255, 255, 255, 0.3)", rgba: 4294967117 };
            t4.DEFAULT_ANSI_COLORS = Object.freeze(function() {
              for (var e5 = [n3.css.toColor("#2e3436"), n3.css.toColor("#cc0000"), n3.css.toColor("#4e9a06"), n3.css.toColor("#c4a000"), n3.css.toColor("#3465a4"), n3.css.toColor("#75507b"), n3.css.toColor("#06989a"), n3.css.toColor("#d3d7cf"), n3.css.toColor("#555753"), n3.css.toColor("#ef2929"), n3.css.toColor("#8ae234"), n3.css.toColor("#fce94f"), n3.css.toColor("#729fcf"), n3.css.toColor("#ad7fa8"), n3.css.toColor("#34e2e2"), n3.css.toColor("#eeeeec")], t5 = [0, 95, 135, 175, 215, 255], r4 = 0; r4 < 216; r4++) {
                var i4 = t5[r4 / 36 % 6 | 0], o4 = t5[r4 / 6 % 6 | 0], s4 = t5[r4 % 6];
                e5.push({ css: n3.channels.toCss(i4, o4, s4), rgba: n3.channels.toRgba(i4, o4, s4) });
              }
              for (r4 = 0; r4 < 24; r4++) {
                var a4 = 8 + 10 * r4;
                e5.push({ css: n3.channels.toCss(a4, a4, a4), rgba: n3.channels.toRgba(a4, a4, a4) });
              }
              return e5;
            }());
            var u3 = function() {
              function e5(e6, r4) {
                this.allowTransparency = r4;
                var i4 = e6.createElement("canvas");
                i4.width = 1, i4.height = 1;
                var u4 = i4.getContext("2d");
                if (!u4)
                  throw new Error("Could not get rendering context");
                this._ctx = u4, this._ctx.globalCompositeOperation = "copy", this._litmusColor = this._ctx.createLinearGradient(0, 0, 1, 1), this._contrastCache = new o3.ColorContrastCache(), this.colors = { foreground: s3, background: a3, cursor: c3, cursorAccent: l3, selectionTransparent: h3, selectionOpaque: n3.color.blend(a3, h3), ansi: t4.DEFAULT_ANSI_COLORS.slice(), contrastCache: this._contrastCache }, this._updateRestoreColors();
              }
              return e5.prototype.onOptionsChange = function(e6) {
                e6 === "minimumContrastRatio" && this._contrastCache.clear();
              }, e5.prototype.setTheme = function(e6) {
                e6 === void 0 && (e6 = {}), this.colors.foreground = this._parseColor(e6.foreground, s3), this.colors.background = this._parseColor(e6.background, a3), this.colors.cursor = this._parseColor(e6.cursor, c3, true), this.colors.cursorAccent = this._parseColor(e6.cursorAccent, l3, true), this.colors.selectionTransparent = this._parseColor(e6.selection, h3, true), this.colors.selectionOpaque = n3.color.blend(this.colors.background, this.colors.selectionTransparent), n3.color.isOpaque(this.colors.selectionTransparent) && (this.colors.selectionTransparent = n3.color.opacity(this.colors.selectionTransparent, 0.3)), this.colors.ansi[0] = this._parseColor(e6.black, t4.DEFAULT_ANSI_COLORS[0]), this.colors.ansi[1] = this._parseColor(e6.red, t4.DEFAULT_ANSI_COLORS[1]), this.colors.ansi[2] = this._parseColor(e6.green, t4.DEFAULT_ANSI_COLORS[2]), this.colors.ansi[3] = this._parseColor(e6.yellow, t4.DEFAULT_ANSI_COLORS[3]), this.colors.ansi[4] = this._parseColor(e6.blue, t4.DEFAULT_ANSI_COLORS[4]), this.colors.ansi[5] = this._parseColor(e6.magenta, t4.DEFAULT_ANSI_COLORS[5]), this.colors.ansi[6] = this._parseColor(e6.cyan, t4.DEFAULT_ANSI_COLORS[6]), this.colors.ansi[7] = this._parseColor(e6.white, t4.DEFAULT_ANSI_COLORS[7]), this.colors.ansi[8] = this._parseColor(e6.brightBlack, t4.DEFAULT_ANSI_COLORS[8]), this.colors.ansi[9] = this._parseColor(e6.brightRed, t4.DEFAULT_ANSI_COLORS[9]), this.colors.ansi[10] = this._parseColor(e6.brightGreen, t4.DEFAULT_ANSI_COLORS[10]), this.colors.ansi[11] = this._parseColor(e6.brightYellow, t4.DEFAULT_ANSI_COLORS[11]), this.colors.ansi[12] = this._parseColor(e6.brightBlue, t4.DEFAULT_ANSI_COLORS[12]), this.colors.ansi[13] = this._parseColor(e6.brightMagenta, t4.DEFAULT_ANSI_COLORS[13]), this.colors.ansi[14] = this._parseColor(e6.brightCyan, t4.DEFAULT_ANSI_COLORS[14]), this.colors.ansi[15] = this._parseColor(e6.brightWhite, t4.DEFAULT_ANSI_COLORS[15]), this._contrastCache.clear(), this._updateRestoreColors();
              }, e5.prototype.restoreColor = function(e6) {
                if (e6 !== void 0)
                  switch (e6) {
                    case 256:
                      this.colors.foreground = this._restoreColors.foreground;
                      break;
                    case 257:
                      this.colors.background = this._restoreColors.background;
                      break;
                    case 258:
                      this.colors.cursor = this._restoreColors.cursor;
                      break;
                    default:
                      this.colors.ansi[e6] = this._restoreColors.ansi[e6];
                  }
                else
                  for (var t5 = 0; t5 < this._restoreColors.ansi.length; ++t5)
                    this.colors.ansi[t5] = this._restoreColors.ansi[t5];
              }, e5.prototype._updateRestoreColors = function() {
                this._restoreColors = { foreground: this.colors.foreground, background: this.colors.background, cursor: this.colors.cursor, ansi: i3([], this.colors.ansi, true) };
              }, e5.prototype._parseColor = function(e6, t5, r4) {
                if (r4 === void 0 && (r4 = this.allowTransparency), e6 === void 0)
                  return t5;
                if (this._ctx.fillStyle = this._litmusColor, this._ctx.fillStyle = e6, typeof this._ctx.fillStyle != "string")
                  return console.warn("Color: " + e6 + " is invalid using fallback " + t5.css), t5;
                this._ctx.fillRect(0, 0, 1, 1);
                var i4 = this._ctx.getImageData(0, 0, 1, 1).data;
                if (i4[3] !== 255) {
                  if (!r4)
                    return console.warn("Color: " + e6 + " is using transparency, but allowTransparency is false. Using fallback " + t5.css + "."), t5;
                  var o4 = this._ctx.fillStyle.substring(5, this._ctx.fillStyle.length - 1).split(",").map(function(e7) {
                    return Number(e7);
                  }), s4 = o4[0], a4 = o4[1], c4 = o4[2], l4 = o4[3], h4 = Math.round(255 * l4);
                  return { rgba: n3.channels.toRgba(s4, a4, c4, h4), css: e6 };
                }
                return { css: this._ctx.fillStyle, rgba: n3.channels.toRgba(i4[0], i4[1], i4[2], i4[3]) };
              }, e5;
            }();
            t4.ColorManager = u3;
          }, 9631: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.removeElementFromParent = void 0, t4.removeElementFromParent = function() {
              for (var e5, t5 = [], r3 = 0; r3 < arguments.length; r3++)
                t5[r3] = arguments[r3];
              for (var i3 = 0, n3 = t5; i3 < n3.length; i3++) {
                var o3 = n3[i3];
                (e5 = o3 == null ? void 0 : o3.parentElement) === null || e5 === void 0 || e5.removeChild(o3);
              }
            };
          }, 3656: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.addDisposableDomListener = void 0, t4.addDisposableDomListener = function(e5, t5, r3, i3) {
              e5.addEventListener(t5, r3, i3);
              var n3 = false;
              return { dispose: function() {
                n3 || (n3 = true, e5.removeEventListener(t5, r3, i3));
              } };
            };
          }, 3551: function(e4, t4, r3) {
            var i3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, n3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.MouseZone = t4.Linkifier = void 0;
            var o3 = r3(8460), s3 = r3(2585), a3 = function() {
              function e5(e6, t5, r4) {
                this._bufferService = e6, this._logService = t5, this._unicodeService = r4, this._linkMatchers = [], this._nextLinkMatcherId = 0, this._onShowLinkUnderline = new o3.EventEmitter(), this._onHideLinkUnderline = new o3.EventEmitter(), this._onLinkTooltip = new o3.EventEmitter(), this._rowsToLinkify = { start: void 0, end: void 0 };
              }
              return Object.defineProperty(e5.prototype, "onShowLinkUnderline", { get: function() {
                return this._onShowLinkUnderline.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onHideLinkUnderline", { get: function() {
                return this._onHideLinkUnderline.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onLinkTooltip", { get: function() {
                return this._onLinkTooltip.event;
              }, enumerable: false, configurable: true }), e5.prototype.attachToDom = function(e6, t5) {
                this._element = e6, this._mouseZoneManager = t5;
              }, e5.prototype.linkifyRows = function(t5, r4) {
                var i4 = this;
                this._mouseZoneManager && (this._rowsToLinkify.start === void 0 || this._rowsToLinkify.end === void 0 ? (this._rowsToLinkify.start = t5, this._rowsToLinkify.end = r4) : (this._rowsToLinkify.start = Math.min(this._rowsToLinkify.start, t5), this._rowsToLinkify.end = Math.max(this._rowsToLinkify.end, r4)), this._mouseZoneManager.clearAll(t5, r4), this._rowsTimeoutId && clearTimeout(this._rowsTimeoutId), this._rowsTimeoutId = setTimeout(function() {
                  return i4._linkifyRows();
                }, e5._timeBeforeLatency));
              }, e5.prototype._linkifyRows = function() {
                this._rowsTimeoutId = void 0;
                var e6 = this._bufferService.buffer;
                if (this._rowsToLinkify.start !== void 0 && this._rowsToLinkify.end !== void 0) {
                  var t5 = e6.ydisp + this._rowsToLinkify.start;
                  if (!(t5 >= e6.lines.length)) {
                    for (var r4 = e6.ydisp + Math.min(this._rowsToLinkify.end, this._bufferService.rows) + 1, i4 = Math.ceil(2e3 / this._bufferService.cols), n4 = this._bufferService.buffer.iterator(false, t5, r4, i4, i4); n4.hasNext(); )
                      for (var o4 = n4.next(), s4 = 0; s4 < this._linkMatchers.length; s4++)
                        this._doLinkifyRow(o4.range.first, o4.content, this._linkMatchers[s4]);
                    this._rowsToLinkify.start = void 0, this._rowsToLinkify.end = void 0;
                  }
                } else
                  this._logService.debug("_rowToLinkify was unset before _linkifyRows was called");
              }, e5.prototype.registerLinkMatcher = function(e6, t5, r4) {
                if (r4 === void 0 && (r4 = {}), !t5)
                  throw new Error("handler must be defined");
                var i4 = { id: this._nextLinkMatcherId++, regex: e6, handler: t5, matchIndex: r4.matchIndex, validationCallback: r4.validationCallback, hoverTooltipCallback: r4.tooltipCallback, hoverLeaveCallback: r4.leaveCallback, willLinkActivate: r4.willLinkActivate, priority: r4.priority || 0 };
                return this._addLinkMatcherToList(i4), i4.id;
              }, e5.prototype._addLinkMatcherToList = function(e6) {
                if (this._linkMatchers.length !== 0) {
                  for (var t5 = this._linkMatchers.length - 1; t5 >= 0; t5--)
                    if (e6.priority <= this._linkMatchers[t5].priority)
                      return void this._linkMatchers.splice(t5 + 1, 0, e6);
                  this._linkMatchers.splice(0, 0, e6);
                } else
                  this._linkMatchers.push(e6);
              }, e5.prototype.deregisterLinkMatcher = function(e6) {
                for (var t5 = 0; t5 < this._linkMatchers.length; t5++)
                  if (this._linkMatchers[t5].id === e6)
                    return this._linkMatchers.splice(t5, 1), true;
                return false;
              }, e5.prototype._doLinkifyRow = function(e6, t5, r4) {
                for (var i4, n4 = this, o4 = new RegExp(r4.regex.source, (r4.regex.flags || "") + "g"), s4 = -1, a4 = function() {
                  var a5 = i4[typeof r4.matchIndex != "number" ? 0 : r4.matchIndex];
                  if (!a5)
                    return c4._logService.debug("match found without corresponding matchIndex", i4, r4), "break";
                  if (s4 = t5.indexOf(a5, s4 + 1), o4.lastIndex = s4 + a5.length, s4 < 0)
                    return "break";
                  var l3 = c4._bufferService.buffer.stringIndexToBufferIndex(e6, s4);
                  if (l3[0] < 0)
                    return "break";
                  var h3 = c4._bufferService.buffer.lines.get(l3[0]);
                  if (!h3)
                    return "break";
                  var u3 = h3.getFg(l3[1]), f3 = u3 ? u3 >> 9 & 511 : void 0;
                  r4.validationCallback ? r4.validationCallback(a5, function(e7) {
                    n4._rowsTimeoutId || e7 && n4._addLink(l3[1], l3[0] - n4._bufferService.buffer.ydisp, a5, r4, f3);
                  }) : c4._addLink(l3[1], l3[0] - c4._bufferService.buffer.ydisp, a5, r4, f3);
                }, c4 = this; (i4 = o4.exec(t5)) !== null && a4() !== "break"; )
                  ;
              }, e5.prototype._addLink = function(e6, t5, r4, i4, n4) {
                var o4 = this;
                if (this._mouseZoneManager && this._element) {
                  var s4 = this._unicodeService.getStringCellWidth(r4), a4 = e6 % this._bufferService.cols, l3 = t5 + Math.floor(e6 / this._bufferService.cols), h3 = (a4 + s4) % this._bufferService.cols, u3 = l3 + Math.floor((a4 + s4) / this._bufferService.cols);
                  h3 === 0 && (h3 = this._bufferService.cols, u3--), this._mouseZoneManager.add(new c3(a4 + 1, l3 + 1, h3 + 1, u3 + 1, function(e7) {
                    if (i4.handler)
                      return i4.handler(e7, r4);
                    var t6 = window.open();
                    t6 ? (t6.opener = null, t6.location.href = r4) : console.warn("Opening link blocked as opener could not be cleared");
                  }, function() {
                    o4._onShowLinkUnderline.fire(o4._createLinkHoverEvent(a4, l3, h3, u3, n4)), o4._element.classList.add("xterm-cursor-pointer");
                  }, function(e7) {
                    o4._onLinkTooltip.fire(o4._createLinkHoverEvent(a4, l3, h3, u3, n4)), i4.hoverTooltipCallback && i4.hoverTooltipCallback(e7, r4, { start: { x: a4, y: l3 }, end: { x: h3, y: u3 } });
                  }, function() {
                    o4._onHideLinkUnderline.fire(o4._createLinkHoverEvent(a4, l3, h3, u3, n4)), o4._element.classList.remove("xterm-cursor-pointer"), i4.hoverLeaveCallback && i4.hoverLeaveCallback();
                  }, function(e7) {
                    return !i4.willLinkActivate || i4.willLinkActivate(e7, r4);
                  }));
                }
              }, e5.prototype._createLinkHoverEvent = function(e6, t5, r4, i4, n4) {
                return { x1: e6, y1: t5, x2: r4, y2: i4, cols: this._bufferService.cols, fg: n4 };
              }, e5._timeBeforeLatency = 200, e5 = i3([n3(0, s3.IBufferService), n3(1, s3.ILogService), n3(2, s3.IUnicodeService)], e5);
            }();
            t4.Linkifier = a3;
            var c3 = function(e5, t5, r4, i4, n4, o4, s4, a4, c4) {
              this.x1 = e5, this.y1 = t5, this.x2 = r4, this.y2 = i4, this.clickCallback = n4, this.hoverCallback = o4, this.tooltipCallback = s4, this.leaveCallback = a4, this.willLinkActivate = c4;
            };
            t4.MouseZone = c3;
          }, 6465: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.Linkifier2 = void 0;
            var a3 = r3(2585), c3 = r3(8460), l3 = r3(844), h3 = r3(3656), u3 = function(e5) {
              function t5(t6) {
                var r4 = e5.call(this) || this;
                return r4._bufferService = t6, r4._linkProviders = [], r4._linkCacheDisposables = [], r4._isMouseOut = true, r4._activeLine = -1, r4._onShowLinkUnderline = r4.register(new c3.EventEmitter()), r4._onHideLinkUnderline = r4.register(new c3.EventEmitter()), r4.register((0, l3.getDisposeArrayDisposable)(r4._linkCacheDisposables)), r4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "currentLink", { get: function() {
                return this._currentLink;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onShowLinkUnderline", { get: function() {
                return this._onShowLinkUnderline.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onHideLinkUnderline", { get: function() {
                return this._onHideLinkUnderline.event;
              }, enumerable: false, configurable: true }), t5.prototype.registerLinkProvider = function(e6) {
                var t6 = this;
                return this._linkProviders.push(e6), { dispose: function() {
                  var r4 = t6._linkProviders.indexOf(e6);
                  r4 !== -1 && t6._linkProviders.splice(r4, 1);
                } };
              }, t5.prototype.attachToDom = function(e6, t6, r4) {
                var i4 = this;
                this._element = e6, this._mouseService = t6, this._renderService = r4, this.register((0, h3.addDisposableDomListener)(this._element, "mouseleave", function() {
                  i4._isMouseOut = true, i4._clearCurrentLink();
                })), this.register((0, h3.addDisposableDomListener)(this._element, "mousemove", this._onMouseMove.bind(this))), this.register((0, h3.addDisposableDomListener)(this._element, "click", this._onClick.bind(this)));
              }, t5.prototype._onMouseMove = function(e6) {
                if (this._lastMouseEvent = e6, this._element && this._mouseService) {
                  var t6 = this._positionFromMouseEvent(e6, this._element, this._mouseService);
                  if (t6) {
                    this._isMouseOut = false;
                    for (var r4 = e6.composedPath(), i4 = 0; i4 < r4.length; i4++) {
                      var n4 = r4[i4];
                      if (n4.classList.contains("xterm"))
                        break;
                      if (n4.classList.contains("xterm-hover"))
                        return;
                    }
                    this._lastBufferCell && t6.x === this._lastBufferCell.x && t6.y === this._lastBufferCell.y || (this._onHover(t6), this._lastBufferCell = t6);
                  }
                }
              }, t5.prototype._onHover = function(e6) {
                if (this._activeLine !== e6.y)
                  return this._clearCurrentLink(), void this._askForLink(e6, false);
                this._currentLink && this._linkAtPosition(this._currentLink.link, e6) || (this._clearCurrentLink(), this._askForLink(e6, true));
              }, t5.prototype._askForLink = function(e6, t6) {
                var r4, i4 = this;
                this._activeProviderReplies && t6 || ((r4 = this._activeProviderReplies) === null || r4 === void 0 || r4.forEach(function(e7) {
                  e7 == null || e7.forEach(function(e8) {
                    e8.link.dispose && e8.link.dispose();
                  });
                }), this._activeProviderReplies = /* @__PURE__ */ new Map(), this._activeLine = e6.y);
                var n4 = false;
                this._linkProviders.forEach(function(r5, o4) {
                  var s4;
                  t6 ? ((s4 = i4._activeProviderReplies) === null || s4 === void 0 ? void 0 : s4.get(o4)) && (n4 = i4._checkLinkProviderResult(o4, e6, n4)) : r5.provideLinks(e6.y, function(t7) {
                    var r6, s5;
                    if (!i4._isMouseOut) {
                      var a4 = t7 == null ? void 0 : t7.map(function(e7) {
                        return { link: e7 };
                      });
                      (r6 = i4._activeProviderReplies) === null || r6 === void 0 || r6.set(o4, a4), n4 = i4._checkLinkProviderResult(o4, e6, n4), ((s5 = i4._activeProviderReplies) === null || s5 === void 0 ? void 0 : s5.size) === i4._linkProviders.length && i4._removeIntersectingLinks(e6.y, i4._activeProviderReplies);
                    }
                  });
                });
              }, t5.prototype._removeIntersectingLinks = function(e6, t6) {
                for (var r4 = /* @__PURE__ */ new Set(), i4 = 0; i4 < t6.size; i4++) {
                  var n4 = t6.get(i4);
                  if (n4)
                    for (var o4 = 0; o4 < n4.length; o4++)
                      for (var s4 = n4[o4], a4 = s4.link.range.start.y < e6 ? 0 : s4.link.range.start.x, c4 = s4.link.range.end.y > e6 ? this._bufferService.cols : s4.link.range.end.x, l4 = a4; l4 <= c4; l4++) {
                        if (r4.has(l4)) {
                          n4.splice(o4--, 1);
                          break;
                        }
                        r4.add(l4);
                      }
                }
              }, t5.prototype._checkLinkProviderResult = function(e6, t6, r4) {
                var i4, n4 = this;
                if (!this._activeProviderReplies)
                  return r4;
                for (var o4 = this._activeProviderReplies.get(e6), s4 = false, a4 = 0; a4 < e6; a4++)
                  this._activeProviderReplies.has(a4) && !this._activeProviderReplies.get(a4) || (s4 = true);
                if (!s4 && o4) {
                  var c4 = o4.find(function(e7) {
                    return n4._linkAtPosition(e7.link, t6);
                  });
                  c4 && (r4 = true, this._handleNewLink(c4));
                }
                if (this._activeProviderReplies.size === this._linkProviders.length && !r4)
                  for (a4 = 0; a4 < this._activeProviderReplies.size; a4++) {
                    var l4 = (i4 = this._activeProviderReplies.get(a4)) === null || i4 === void 0 ? void 0 : i4.find(function(e7) {
                      return n4._linkAtPosition(e7.link, t6);
                    });
                    if (l4) {
                      r4 = true, this._handleNewLink(l4);
                      break;
                    }
                  }
                return r4;
              }, t5.prototype._onClick = function(e6) {
                if (this._element && this._mouseService && this._currentLink) {
                  var t6 = this._positionFromMouseEvent(e6, this._element, this._mouseService);
                  t6 && this._linkAtPosition(this._currentLink.link, t6) && this._currentLink.link.activate(e6, this._currentLink.link.text);
                }
              }, t5.prototype._clearCurrentLink = function(e6, t6) {
                this._element && this._currentLink && this._lastMouseEvent && (!e6 || !t6 || this._currentLink.link.range.start.y >= e6 && this._currentLink.link.range.end.y <= t6) && (this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent), this._currentLink = void 0, (0, l3.disposeArray)(this._linkCacheDisposables));
              }, t5.prototype._handleNewLink = function(e6) {
                var t6 = this;
                if (this._element && this._lastMouseEvent && this._mouseService) {
                  var r4 = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);
                  r4 && this._linkAtPosition(e6.link, r4) && (this._currentLink = e6, this._currentLink.state = { decorations: { underline: e6.link.decorations === void 0 || e6.link.decorations.underline, pointerCursor: e6.link.decorations === void 0 || e6.link.decorations.pointerCursor }, isHovered: true }, this._linkHover(this._element, e6.link, this._lastMouseEvent), e6.link.decorations = {}, Object.defineProperties(e6.link.decorations, { pointerCursor: { get: function() {
                    var e7, r5;
                    return (r5 = (e7 = t6._currentLink) === null || e7 === void 0 ? void 0 : e7.state) === null || r5 === void 0 ? void 0 : r5.decorations.pointerCursor;
                  }, set: function(e7) {
                    var r5, i4;
                    ((r5 = t6._currentLink) === null || r5 === void 0 ? void 0 : r5.state) && t6._currentLink.state.decorations.pointerCursor !== e7 && (t6._currentLink.state.decorations.pointerCursor = e7, t6._currentLink.state.isHovered && ((i4 = t6._element) === null || i4 === void 0 || i4.classList.toggle("xterm-cursor-pointer", e7)));
                  } }, underline: { get: function() {
                    var e7, r5;
                    return (r5 = (e7 = t6._currentLink) === null || e7 === void 0 ? void 0 : e7.state) === null || r5 === void 0 ? void 0 : r5.decorations.underline;
                  }, set: function(r5) {
                    var i4, n4, o4;
                    ((i4 = t6._currentLink) === null || i4 === void 0 ? void 0 : i4.state) && ((o4 = (n4 = t6._currentLink) === null || n4 === void 0 ? void 0 : n4.state) === null || o4 === void 0 ? void 0 : o4.decorations.underline) !== r5 && (t6._currentLink.state.decorations.underline = r5, t6._currentLink.state.isHovered && t6._fireUnderlineEvent(e6.link, r5));
                  } } }), this._renderService && this._linkCacheDisposables.push(this._renderService.onRenderedBufferChange(function(e7) {
                    var r5 = e7.start === 0 ? 0 : e7.start + 1 + t6._bufferService.buffer.ydisp;
                    t6._clearCurrentLink(r5, e7.end + 1 + t6._bufferService.buffer.ydisp);
                  })));
                }
              }, t5.prototype._linkHover = function(e6, t6, r4) {
                var i4;
                ((i4 = this._currentLink) === null || i4 === void 0 ? void 0 : i4.state) && (this._currentLink.state.isHovered = true, this._currentLink.state.decorations.underline && this._fireUnderlineEvent(t6, true), this._currentLink.state.decorations.pointerCursor && e6.classList.add("xterm-cursor-pointer")), t6.hover && t6.hover(r4, t6.text);
              }, t5.prototype._fireUnderlineEvent = function(e6, t6) {
                var r4 = e6.range, i4 = this._bufferService.buffer.ydisp, n4 = this._createLinkUnderlineEvent(r4.start.x - 1, r4.start.y - i4 - 1, r4.end.x, r4.end.y - i4 - 1, void 0);
                (t6 ? this._onShowLinkUnderline : this._onHideLinkUnderline).fire(n4);
              }, t5.prototype._linkLeave = function(e6, t6, r4) {
                var i4;
                ((i4 = this._currentLink) === null || i4 === void 0 ? void 0 : i4.state) && (this._currentLink.state.isHovered = false, this._currentLink.state.decorations.underline && this._fireUnderlineEvent(t6, false), this._currentLink.state.decorations.pointerCursor && e6.classList.remove("xterm-cursor-pointer")), t6.leave && t6.leave(r4, t6.text);
              }, t5.prototype._linkAtPosition = function(e6, t6) {
                var r4 = e6.range.start.y === e6.range.end.y, i4 = e6.range.start.y < t6.y, n4 = e6.range.end.y > t6.y;
                return (r4 && e6.range.start.x <= t6.x && e6.range.end.x >= t6.x || i4 && e6.range.end.x >= t6.x || n4 && e6.range.start.x <= t6.x || i4 && n4) && e6.range.start.y <= t6.y && e6.range.end.y >= t6.y;
              }, t5.prototype._positionFromMouseEvent = function(e6, t6, r4) {
                var i4 = r4.getCoords(e6, t6, this._bufferService.cols, this._bufferService.rows);
                if (i4)
                  return { x: i4[0], y: i4[1] + this._bufferService.buffer.ydisp };
              }, t5.prototype._createLinkUnderlineEvent = function(e6, t6, r4, i4, n4) {
                return { x1: e6, y1: t6, x2: r4, y2: i4, cols: this._bufferService.cols, fg: n4 };
              }, o3([s3(0, a3.IBufferService)], t5);
            }(l3.Disposable);
            t4.Linkifier2 = u3;
          }, 9042: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.tooMuchOutput = t4.promptLabel = void 0, t4.promptLabel = "Terminal input", t4.tooMuchOutput = "Too much output to announce, navigate to rows manually to read";
          }, 6954: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.MouseZoneManager = void 0;
            var a3 = r3(844), c3 = r3(3656), l3 = r3(4725), h3 = r3(2585), u3 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4) {
                var a4 = e5.call(this) || this;
                return a4._element = t6, a4._screenElement = r4, a4._bufferService = i4, a4._mouseService = n4, a4._selectionService = o4, a4._optionsService = s4, a4._zones = [], a4._areZonesActive = false, a4._lastHoverCoords = [void 0, void 0], a4._initialSelectionLength = 0, a4.register((0, c3.addDisposableDomListener)(a4._element, "mousedown", function(e6) {
                  return a4._onMouseDown(e6);
                })), a4._mouseMoveListener = function(e6) {
                  return a4._onMouseMove(e6);
                }, a4._mouseLeaveListener = function(e6) {
                  return a4._onMouseLeave(e6);
                }, a4._clickListener = function(e6) {
                  return a4._onClick(e6);
                }, a4;
              }
              return n3(t5, e5), t5.prototype.dispose = function() {
                e5.prototype.dispose.call(this), this._deactivate();
              }, t5.prototype.add = function(e6) {
                this._zones.push(e6), this._zones.length === 1 && this._activate();
              }, t5.prototype.clearAll = function(e6, t6) {
                if (this._zones.length !== 0) {
                  e6 && t6 || (e6 = 0, t6 = this._bufferService.rows - 1);
                  for (var r4 = 0; r4 < this._zones.length; r4++) {
                    var i4 = this._zones[r4];
                    (i4.y1 > e6 && i4.y1 <= t6 + 1 || i4.y2 > e6 && i4.y2 <= t6 + 1 || i4.y1 < e6 && i4.y2 > t6 + 1) && (this._currentZone && this._currentZone === i4 && (this._currentZone.leaveCallback(), this._currentZone = void 0), this._zones.splice(r4--, 1));
                  }
                  this._zones.length === 0 && this._deactivate();
                }
              }, t5.prototype._activate = function() {
                this._areZonesActive || (this._areZonesActive = true, this._element.addEventListener("mousemove", this._mouseMoveListener), this._element.addEventListener("mouseleave", this._mouseLeaveListener), this._element.addEventListener("click", this._clickListener));
              }, t5.prototype._deactivate = function() {
                this._areZonesActive && (this._areZonesActive = false, this._element.removeEventListener("mousemove", this._mouseMoveListener), this._element.removeEventListener("mouseleave", this._mouseLeaveListener), this._element.removeEventListener("click", this._clickListener));
              }, t5.prototype._onMouseMove = function(e6) {
                this._lastHoverCoords[0] === e6.pageX && this._lastHoverCoords[1] === e6.pageY || (this._onHover(e6), this._lastHoverCoords = [e6.pageX, e6.pageY]);
              }, t5.prototype._onHover = function(e6) {
                var t6 = this, r4 = this._findZoneEventAt(e6);
                r4 !== this._currentZone && (this._currentZone && (this._currentZone.leaveCallback(), this._currentZone = void 0, this._tooltipTimeout && clearTimeout(this._tooltipTimeout)), r4 && (this._currentZone = r4, r4.hoverCallback && r4.hoverCallback(e6), this._tooltipTimeout = window.setTimeout(function() {
                  return t6._onTooltip(e6);
                }, this._optionsService.rawOptions.linkTooltipHoverDuration)));
              }, t5.prototype._onTooltip = function(e6) {
                this._tooltipTimeout = void 0;
                var t6 = this._findZoneEventAt(e6);
                t6 == null || t6.tooltipCallback(e6);
              }, t5.prototype._onMouseDown = function(e6) {
                if (this._initialSelectionLength = this._getSelectionLength(), this._areZonesActive) {
                  var t6 = this._findZoneEventAt(e6);
                  (t6 == null ? void 0 : t6.willLinkActivate(e6)) && (e6.preventDefault(), e6.stopImmediatePropagation());
                }
              }, t5.prototype._onMouseLeave = function(e6) {
                this._currentZone && (this._currentZone.leaveCallback(), this._currentZone = void 0, this._tooltipTimeout && clearTimeout(this._tooltipTimeout));
              }, t5.prototype._onClick = function(e6) {
                var t6 = this._findZoneEventAt(e6), r4 = this._getSelectionLength();
                t6 && r4 === this._initialSelectionLength && (t6.clickCallback(e6), e6.preventDefault(), e6.stopImmediatePropagation());
              }, t5.prototype._getSelectionLength = function() {
                var e6 = this._selectionService.selectionText;
                return e6 ? e6.length : 0;
              }, t5.prototype._findZoneEventAt = function(e6) {
                var t6 = this._mouseService.getCoords(e6, this._screenElement, this._bufferService.cols, this._bufferService.rows);
                if (t6)
                  for (var r4 = t6[0], i4 = t6[1], n4 = 0; n4 < this._zones.length; n4++) {
                    var o4 = this._zones[n4];
                    if (o4.y1 === o4.y2) {
                      if (i4 === o4.y1 && r4 >= o4.x1 && r4 < o4.x2)
                        return o4;
                    } else if (i4 === o4.y1 && r4 >= o4.x1 || i4 === o4.y2 && r4 < o4.x2 || i4 > o4.y1 && i4 < o4.y2)
                      return o4;
                  }
              }, o3([s3(2, h3.IBufferService), s3(3, l3.IMouseService), s3(4, l3.ISelectionService), s3(5, h3.IOptionsService)], t5);
            }(a3.Disposable);
            t4.MouseZoneManager = u3;
          }, 6193: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.RenderDebouncer = void 0;
            var r3 = function() {
              function e5(e6) {
                this._renderCallback = e6;
              }
              return e5.prototype.dispose = function() {
                this._animationFrame && (window.cancelAnimationFrame(this._animationFrame), this._animationFrame = void 0);
              }, e5.prototype.refresh = function(e6, t5, r4) {
                var i3 = this;
                this._rowCount = r4, e6 = e6 !== void 0 ? e6 : 0, t5 = t5 !== void 0 ? t5 : this._rowCount - 1, this._rowStart = this._rowStart !== void 0 ? Math.min(this._rowStart, e6) : e6, this._rowEnd = this._rowEnd !== void 0 ? Math.max(this._rowEnd, t5) : t5, this._animationFrame || (this._animationFrame = window.requestAnimationFrame(function() {
                  return i3._innerRefresh();
                }));
              }, e5.prototype._innerRefresh = function() {
                if (this._rowStart !== void 0 && this._rowEnd !== void 0 && this._rowCount !== void 0) {
                  var e6 = Math.max(this._rowStart, 0), t5 = Math.min(this._rowEnd, this._rowCount - 1);
                  this._rowStart = void 0, this._rowEnd = void 0, this._animationFrame = void 0, this._renderCallback(e6, t5);
                }
              }, e5;
            }();
            t4.RenderDebouncer = r3;
          }, 5596: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.ScreenDprMonitor = void 0;
            var o3 = function(e5) {
              function t5() {
                var t6 = e5 !== null && e5.apply(this, arguments) || this;
                return t6._currentDevicePixelRatio = window.devicePixelRatio, t6;
              }
              return n3(t5, e5), t5.prototype.setListener = function(e6) {
                var t6 = this;
                this._listener && this.clearListener(), this._listener = e6, this._outerListener = function() {
                  t6._listener && (t6._listener(window.devicePixelRatio, t6._currentDevicePixelRatio), t6._updateDpr());
                }, this._updateDpr();
              }, t5.prototype.dispose = function() {
                e5.prototype.dispose.call(this), this.clearListener();
              }, t5.prototype._updateDpr = function() {
                var e6;
                this._outerListener && ((e6 = this._resolutionMediaMatchList) === null || e6 === void 0 || e6.removeListener(this._outerListener), this._currentDevicePixelRatio = window.devicePixelRatio, this._resolutionMediaMatchList = window.matchMedia("screen and (resolution: " + window.devicePixelRatio + "dppx)"), this._resolutionMediaMatchList.addListener(this._outerListener));
              }, t5.prototype.clearListener = function() {
                this._resolutionMediaMatchList && this._listener && this._outerListener && (this._resolutionMediaMatchList.removeListener(this._outerListener), this._resolutionMediaMatchList = void 0, this._listener = void 0, this._outerListener = void 0);
              }, t5;
            }(r3(844).Disposable);
            t4.ScreenDprMonitor = o3;
          }, 3236: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.Terminal = void 0;
            var o3 = r3(2950), s3 = r3(1680), a3 = r3(3614), c3 = r3(2584), l3 = r3(5435), h3 = r3(3525), u3 = r3(3551), f3 = r3(9312), _3 = r3(6114), d3 = r3(3656), p3 = r3(9042), v2 = r3(357), g3 = r3(6954), y3 = r3(4567), m2 = r3(1296), S2 = r3(7399), C2 = r3(8460), b3 = r3(8437), w3 = r3(5680), L2 = r3(3230), E2 = r3(4725), x2 = r3(428), k2 = r3(8934), M2 = r3(6465), A2 = r3(5114), R2 = r3(8969), O2 = r3(4774), T = r3(4269), D2 = r3(5941), B2 = r3(7641), P2 = typeof window != "undefined" ? window.document : null, I2 = function(e5) {
              function t5(t6) {
                t6 === void 0 && (t6 = {});
                var r4 = e5.call(this, t6) || this;
                return r4.browser = _3, r4._keyDownHandled = false, r4._keyPressHandled = false, r4._unprocessedDeadKey = false, r4._onCursorMove = new C2.EventEmitter(), r4._onKey = new C2.EventEmitter(), r4._onRender = new C2.EventEmitter(), r4._onSelectionChange = new C2.EventEmitter(), r4._onTitleChange = new C2.EventEmitter(), r4._onBell = new C2.EventEmitter(), r4._onFocus = new C2.EventEmitter(), r4._onBlur = new C2.EventEmitter(), r4._onA11yCharEmitter = new C2.EventEmitter(), r4._onA11yTabEmitter = new C2.EventEmitter(), r4._setup(), r4.linkifier = r4._instantiationService.createInstance(u3.Linkifier), r4.linkifier2 = r4.register(r4._instantiationService.createInstance(M2.Linkifier2)), r4.decorationService = r4.register(r4._instantiationService.createInstance(B2.DecorationService)), r4.register(r4._inputHandler.onRequestBell(function() {
                  return r4.bell();
                })), r4.register(r4._inputHandler.onRequestRefreshRows(function(e6, t7) {
                  return r4.refresh(e6, t7);
                })), r4.register(r4._inputHandler.onRequestSendFocus(function() {
                  return r4._reportFocus();
                })), r4.register(r4._inputHandler.onRequestReset(function() {
                  return r4.reset();
                })), r4.register(r4._inputHandler.onRequestWindowsOptionsReport(function(e6) {
                  return r4._reportWindowsOptions(e6);
                })), r4.register(r4._inputHandler.onColor(function(e6) {
                  return r4._handleColorEvent(e6);
                })), r4.register((0, C2.forwardEvent)(r4._inputHandler.onCursorMove, r4._onCursorMove)), r4.register((0, C2.forwardEvent)(r4._inputHandler.onTitleChange, r4._onTitleChange)), r4.register((0, C2.forwardEvent)(r4._inputHandler.onA11yChar, r4._onA11yCharEmitter)), r4.register((0, C2.forwardEvent)(r4._inputHandler.onA11yTab, r4._onA11yTabEmitter)), r4.register(r4._bufferService.onResize(function(e6) {
                  return r4._afterResize(e6.cols, e6.rows);
                })), r4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "onCursorMove", { get: function() {
                return this._onCursorMove.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onKey", { get: function() {
                return this._onKey.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRender", { get: function() {
                return this._onRender.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onSelectionChange", { get: function() {
                return this._onSelectionChange.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onTitleChange", { get: function() {
                return this._onTitleChange.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onBell", { get: function() {
                return this._onBell.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onFocus", { get: function() {
                return this._onFocus.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onBlur", { get: function() {
                return this._onBlur.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onA11yChar", { get: function() {
                return this._onA11yCharEmitter.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onA11yTab", { get: function() {
                return this._onA11yTabEmitter.event;
              }, enumerable: false, configurable: true }), t5.prototype._handleColorEvent = function(e6) {
                var t6, r4;
                if (this._colorManager) {
                  for (var i4 = 0, n4 = e6; i4 < n4.length; i4++) {
                    var o4 = n4[i4], s4 = void 0, a4 = "";
                    switch (o4.index) {
                      case 256:
                        s4 = "foreground", a4 = "10";
                        break;
                      case 257:
                        s4 = "background", a4 = "11";
                        break;
                      case 258:
                        s4 = "cursor", a4 = "12";
                        break;
                      default:
                        s4 = "ansi", a4 = "4;" + o4.index;
                    }
                    if (s4)
                      switch (o4.type) {
                        case 0:
                          var l4 = O2.color.toColorRGB(s4 === "ansi" ? this._colorManager.colors.ansi[o4.index] : this._colorManager.colors[s4]);
                          this.coreService.triggerDataEvent(c3.C0.ESC + "]" + a4 + ";" + (0, D2.toRgbString)(l4) + c3.C0.BEL);
                          break;
                        case 1:
                          s4 === "ansi" ? this._colorManager.colors.ansi[o4.index] = O2.rgba.toColor.apply(O2.rgba, o4.color) : this._colorManager.colors[s4] = O2.rgba.toColor.apply(O2.rgba, o4.color);
                          break;
                        case 2:
                          this._colorManager.restoreColor(o4.index);
                      }
                  }
                  (t6 = this._renderService) === null || t6 === void 0 || t6.setColors(this._colorManager.colors), (r4 = this.viewport) === null || r4 === void 0 || r4.onThemeChange(this._colorManager.colors);
                }
              }, t5.prototype.dispose = function() {
                var t6, r4, i4;
                this._isDisposed || (e5.prototype.dispose.call(this), (t6 = this._renderService) === null || t6 === void 0 || t6.dispose(), this._customKeyEventHandler = void 0, this.write = function() {
                }, (i4 = (r4 = this.element) === null || r4 === void 0 ? void 0 : r4.parentNode) === null || i4 === void 0 || i4.removeChild(this.element));
              }, t5.prototype._setup = function() {
                e5.prototype._setup.call(this), this._customKeyEventHandler = void 0;
              }, Object.defineProperty(t5.prototype, "buffer", { get: function() {
                return this.buffers.active;
              }, enumerable: false, configurable: true }), t5.prototype.focus = function() {
                this.textarea && this.textarea.focus({ preventScroll: true });
              }, t5.prototype._updateOptions = function(t6) {
                var r4, i4, n4, o4;
                switch (e5.prototype._updateOptions.call(this, t6), t6) {
                  case "fontFamily":
                  case "fontSize":
                    (r4 = this._renderService) === null || r4 === void 0 || r4.clear(), (i4 = this._charSizeService) === null || i4 === void 0 || i4.measure();
                    break;
                  case "cursorBlink":
                  case "cursorStyle":
                    this.refresh(this.buffer.y, this.buffer.y);
                    break;
                  case "customGlyphs":
                  case "drawBoldTextInBrightColors":
                  case "letterSpacing":
                  case "lineHeight":
                  case "fontWeight":
                  case "fontWeightBold":
                  case "minimumContrastRatio":
                    this._renderService && (this._renderService.clear(), this._renderService.onResize(this.cols, this.rows), this.refresh(0, this.rows - 1));
                    break;
                  case "rendererType":
                    this._renderService && (this._renderService.setRenderer(this._createRenderer()), this._renderService.onResize(this.cols, this.rows));
                    break;
                  case "scrollback":
                    (n4 = this.viewport) === null || n4 === void 0 || n4.syncScrollArea();
                    break;
                  case "screenReaderMode":
                    this.optionsService.rawOptions.screenReaderMode ? !this._accessibilityManager && this._renderService && (this._accessibilityManager = new y3.AccessibilityManager(this, this._renderService)) : ((o4 = this._accessibilityManager) === null || o4 === void 0 || o4.dispose(), this._accessibilityManager = void 0);
                    break;
                  case "tabStopWidth":
                    this.buffers.setupTabStops();
                    break;
                  case "theme":
                    this._setTheme(this.optionsService.rawOptions.theme);
                }
              }, t5.prototype._onTextAreaFocus = function(e6) {
                this.coreService.decPrivateModes.sendFocus && this.coreService.triggerDataEvent(c3.C0.ESC + "[I"), this.updateCursorStyle(e6), this.element.classList.add("focus"), this._showCursor(), this._onFocus.fire();
              }, t5.prototype.blur = function() {
                var e6;
                return (e6 = this.textarea) === null || e6 === void 0 ? void 0 : e6.blur();
              }, t5.prototype._onTextAreaBlur = function() {
                this.textarea.value = "", this.refresh(this.buffer.y, this.buffer.y), this.coreService.decPrivateModes.sendFocus && this.coreService.triggerDataEvent(c3.C0.ESC + "[O"), this.element.classList.remove("focus"), this._onBlur.fire();
              }, t5.prototype._syncTextArea = function() {
                if (this.textarea && this.buffer.isCursorInViewport && !this._compositionHelper.isComposing && this._renderService) {
                  var e6 = this.buffer.ybase + this.buffer.y, t6 = this.buffer.lines.get(e6);
                  if (t6) {
                    var r4 = Math.min(this.buffer.x, this.cols - 1), i4 = this._renderService.dimensions.actualCellHeight, n4 = t6.getWidth(r4), o4 = this._renderService.dimensions.actualCellWidth * n4, s4 = this.buffer.y * this._renderService.dimensions.actualCellHeight, a4 = r4 * this._renderService.dimensions.actualCellWidth;
                    this.textarea.style.left = a4 + "px", this.textarea.style.top = s4 + "px", this.textarea.style.width = o4 + "px", this.textarea.style.height = i4 + "px", this.textarea.style.lineHeight = i4 + "px", this.textarea.style.zIndex = "-5";
                  }
                }
              }, t5.prototype._initGlobal = function() {
                var e6 = this;
                this._bindKeys(), this.register((0, d3.addDisposableDomListener)(this.element, "copy", function(t7) {
                  e6.hasSelection() && (0, a3.copyHandler)(t7, e6._selectionService);
                }));
                var t6 = function(t7) {
                  return (0, a3.handlePasteEvent)(t7, e6.textarea, e6.coreService);
                };
                this.register((0, d3.addDisposableDomListener)(this.textarea, "paste", t6)), this.register((0, d3.addDisposableDomListener)(this.element, "paste", t6)), _3.isFirefox ? this.register((0, d3.addDisposableDomListener)(this.element, "mousedown", function(t7) {
                  t7.button === 2 && (0, a3.rightClickHandler)(t7, e6.textarea, e6.screenElement, e6._selectionService, e6.options.rightClickSelectsWord);
                })) : this.register((0, d3.addDisposableDomListener)(this.element, "contextmenu", function(t7) {
                  (0, a3.rightClickHandler)(t7, e6.textarea, e6.screenElement, e6._selectionService, e6.options.rightClickSelectsWord);
                })), _3.isLinux && this.register((0, d3.addDisposableDomListener)(this.element, "auxclick", function(t7) {
                  t7.button === 1 && (0, a3.moveTextAreaUnderMouseCursor)(t7, e6.textarea, e6.screenElement);
                }));
              }, t5.prototype._bindKeys = function() {
                var e6 = this;
                this.register((0, d3.addDisposableDomListener)(this.textarea, "keyup", function(t6) {
                  return e6._keyUp(t6);
                }, true)), this.register((0, d3.addDisposableDomListener)(this.textarea, "keydown", function(t6) {
                  return e6._keyDown(t6);
                }, true)), this.register((0, d3.addDisposableDomListener)(this.textarea, "keypress", function(t6) {
                  return e6._keyPress(t6);
                }, true)), this.register((0, d3.addDisposableDomListener)(this.textarea, "compositionstart", function() {
                  return e6._compositionHelper.compositionstart();
                })), this.register((0, d3.addDisposableDomListener)(this.textarea, "compositionupdate", function(t6) {
                  return e6._compositionHelper.compositionupdate(t6);
                })), this.register((0, d3.addDisposableDomListener)(this.textarea, "compositionend", function() {
                  return e6._compositionHelper.compositionend();
                })), this.register((0, d3.addDisposableDomListener)(this.textarea, "input", function(t6) {
                  return e6._inputEvent(t6);
                }, true)), this.register(this.onRender(function() {
                  return e6._compositionHelper.updateCompositionElements();
                })), this.register(this.onRender(function(t6) {
                  return e6._queueLinkification(t6.start, t6.end);
                }));
              }, t5.prototype.open = function(e6) {
                var t6 = this;
                if (!e6)
                  throw new Error("Terminal requires a parent element.");
                e6.isConnected || this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"), this._document = e6.ownerDocument, this.element = this._document.createElement("div"), this.element.dir = "ltr", this.element.classList.add("terminal"), this.element.classList.add("xterm"), this.element.setAttribute("tabindex", "0"), e6.appendChild(this.element);
                var r4 = P2.createDocumentFragment();
                this._viewportElement = P2.createElement("div"), this._viewportElement.classList.add("xterm-viewport"), r4.appendChild(this._viewportElement), this._viewportScrollArea = P2.createElement("div"), this._viewportScrollArea.classList.add("xterm-scroll-area"), this._viewportElement.appendChild(this._viewportScrollArea), this.screenElement = P2.createElement("div"), this.screenElement.classList.add("xterm-screen"), this._helperContainer = P2.createElement("div"), this._helperContainer.classList.add("xterm-helpers"), this.screenElement.appendChild(this._helperContainer), r4.appendChild(this.screenElement), this.textarea = P2.createElement("textarea"), this.textarea.classList.add("xterm-helper-textarea"), this.textarea.setAttribute("aria-label", p3.promptLabel), this.textarea.setAttribute("aria-multiline", "false"), this.textarea.setAttribute("autocorrect", "off"), this.textarea.setAttribute("autocapitalize", "off"), this.textarea.setAttribute("spellcheck", "false"), this.textarea.tabIndex = 0, this.register((0, d3.addDisposableDomListener)(this.textarea, "focus", function(e7) {
                  return t6._onTextAreaFocus(e7);
                })), this.register((0, d3.addDisposableDomListener)(this.textarea, "blur", function() {
                  return t6._onTextAreaBlur();
                })), this._helperContainer.appendChild(this.textarea);
                var i4 = this._instantiationService.createInstance(A2.CoreBrowserService, this.textarea);
                this._instantiationService.setService(E2.ICoreBrowserService, i4), this._charSizeService = this._instantiationService.createInstance(x2.CharSizeService, this._document, this._helperContainer), this._instantiationService.setService(E2.ICharSizeService, this._charSizeService), this._theme = this.options.theme || this._theme, this._colorManager = new w3.ColorManager(P2, this.options.allowTransparency), this.register(this.optionsService.onOptionChange(function(e7) {
                  return t6._colorManager.onOptionsChange(e7);
                })), this._colorManager.setTheme(this._theme), this._characterJoinerService = this._instantiationService.createInstance(T.CharacterJoinerService), this._instantiationService.setService(E2.ICharacterJoinerService, this._characterJoinerService);
                var n4 = this._createRenderer();
                this._renderService = this.register(this._instantiationService.createInstance(L2.RenderService, n4, this.rows, this.screenElement)), this._instantiationService.setService(E2.IRenderService, this._renderService), this.register(this._renderService.onRenderedBufferChange(function(e7) {
                  return t6._onRender.fire(e7);
                })), this.onResize(function(e7) {
                  return t6._renderService.resize(e7.cols, e7.rows);
                }), this._compositionView = P2.createElement("div"), this._compositionView.classList.add("composition-view"), this._compositionHelper = this._instantiationService.createInstance(o3.CompositionHelper, this.textarea, this._compositionView), this._helperContainer.appendChild(this._compositionView), this.element.appendChild(r4), this._soundService = this._instantiationService.createInstance(v2.SoundService), this._instantiationService.setService(E2.ISoundService, this._soundService), this._mouseService = this._instantiationService.createInstance(k2.MouseService), this._instantiationService.setService(E2.IMouseService, this._mouseService), this.viewport = this._instantiationService.createInstance(s3.Viewport, function(e7) {
                  return t6.scrollLines(e7, true, 1);
                }, this._viewportElement, this._viewportScrollArea, this.element), this.viewport.onThemeChange(this._colorManager.colors), this.register(this._inputHandler.onRequestSyncScrollBar(function() {
                  return t6.viewport.syncScrollArea();
                })), this.register(this.viewport), this.register(this.onCursorMove(function() {
                  t6._renderService.onCursorMove(), t6._syncTextArea();
                })), this.register(this.onResize(function() {
                  return t6._renderService.onResize(t6.cols, t6.rows);
                })), this.register(this.onBlur(function() {
                  return t6._renderService.onBlur();
                })), this.register(this.onFocus(function() {
                  return t6._renderService.onFocus();
                })), this.register(this._renderService.onDimensionsChange(function() {
                  return t6.viewport.syncScrollArea();
                })), this._selectionService = this.register(this._instantiationService.createInstance(f3.SelectionService, this.element, this.screenElement, this.linkifier2)), this._instantiationService.setService(E2.ISelectionService, this._selectionService), this.register(this._selectionService.onRequestScrollLines(function(e7) {
                  return t6.scrollLines(e7.amount, e7.suppressScrollEvent);
                })), this.register(this._selectionService.onSelectionChange(function() {
                  return t6._onSelectionChange.fire();
                })), this.register(this._selectionService.onRequestRedraw(function(e7) {
                  return t6._renderService.onSelectionChanged(e7.start, e7.end, e7.columnSelectMode);
                })), this.register(this._selectionService.onLinuxMouseSelection(function(e7) {
                  t6.textarea.value = e7, t6.textarea.focus(), t6.textarea.select();
                })), this.register(this._onScroll.event(function(e7) {
                  t6.viewport.syncScrollArea(), t6._selectionService.refresh();
                })), this.register((0, d3.addDisposableDomListener)(this._viewportElement, "scroll", function() {
                  return t6._selectionService.refresh();
                })), this._mouseZoneManager = this._instantiationService.createInstance(g3.MouseZoneManager, this.element, this.screenElement), this.register(this._mouseZoneManager), this.register(this.onScroll(function() {
                  return t6._mouseZoneManager.clearAll();
                })), this.linkifier.attachToDom(this.element, this._mouseZoneManager), this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService), this.decorationService.attachToDom(this.screenElement, this._renderService, this._bufferService), this.register((0, d3.addDisposableDomListener)(this.element, "mousedown", function(e7) {
                  return t6._selectionService.onMouseDown(e7);
                })), this.coreMouseService.areMouseEventsActive ? (this._selectionService.disable(), this.element.classList.add("enable-mouse-events")) : this._selectionService.enable(), this.options.screenReaderMode && (this._accessibilityManager = new y3.AccessibilityManager(this, this._renderService)), this._charSizeService.measure(), this.refresh(0, this.rows - 1), this._initGlobal(), this.bindMouse();
              }, t5.prototype._createRenderer = function() {
                switch (this.options.rendererType) {
                  case "canvas":
                    return this._instantiationService.createInstance(h3.Renderer, this._colorManager.colors, this.screenElement, this.linkifier, this.linkifier2);
                  case "dom":
                    return this._instantiationService.createInstance(m2.DomRenderer, this._colorManager.colors, this.element, this.screenElement, this._viewportElement, this.linkifier, this.linkifier2);
                  default:
                    throw new Error('Unrecognized rendererType "' + this.options.rendererType + '"');
                }
              }, t5.prototype._setTheme = function(e6) {
                var t6, r4, i4;
                this._theme = e6, (t6 = this._colorManager) === null || t6 === void 0 || t6.setTheme(e6), (r4 = this._renderService) === null || r4 === void 0 || r4.setColors(this._colorManager.colors), (i4 = this.viewport) === null || i4 === void 0 || i4.onThemeChange(this._colorManager.colors);
              }, t5.prototype.bindMouse = function() {
                var e6 = this, t6 = this, r4 = this.element;
                function i4(e7) {
                  var r5, i5, n5 = t6._mouseService.getRawByteCoords(e7, t6.screenElement, t6.cols, t6.rows);
                  if (!n5)
                    return false;
                  switch (e7.overrideType || e7.type) {
                    case "mousemove":
                      i5 = 32, e7.buttons === void 0 ? (r5 = 3, e7.button !== void 0 && (r5 = e7.button < 3 ? e7.button : 3)) : r5 = 1 & e7.buttons ? 0 : 4 & e7.buttons ? 1 : 2 & e7.buttons ? 2 : 3;
                      break;
                    case "mouseup":
                      i5 = 0, r5 = e7.button < 3 ? e7.button : 3;
                      break;
                    case "mousedown":
                      i5 = 1, r5 = e7.button < 3 ? e7.button : 3;
                      break;
                    case "wheel":
                      e7.deltaY !== 0 && (i5 = e7.deltaY < 0 ? 0 : 1), r5 = 4;
                      break;
                    default:
                      return false;
                  }
                  return !(i5 === void 0 || r5 === void 0 || r5 > 4) && t6.coreMouseService.triggerMouseEvent({ col: n5.x - 33, row: n5.y - 33, button: r5, action: i5, ctrl: e7.ctrlKey, alt: e7.altKey, shift: e7.shiftKey });
                }
                var n4 = { mouseup: null, wheel: null, mousedrag: null, mousemove: null }, o4 = function(t7) {
                  return i4(t7), t7.buttons || (e6._document.removeEventListener("mouseup", n4.mouseup), n4.mousedrag && e6._document.removeEventListener("mousemove", n4.mousedrag)), e6.cancel(t7);
                }, s4 = function(t7) {
                  return i4(t7), e6.cancel(t7, true);
                }, a4 = function(e7) {
                  e7.buttons && i4(e7);
                }, l4 = function(e7) {
                  e7.buttons || i4(e7);
                };
                this.register(this.coreMouseService.onProtocolChange(function(t7) {
                  t7 ? (e6.optionsService.rawOptions.logLevel === "debug" && e6._logService.debug("Binding to mouse events:", e6.coreMouseService.explainEvents(t7)), e6.element.classList.add("enable-mouse-events"), e6._selectionService.disable()) : (e6._logService.debug("Unbinding from mouse events."), e6.element.classList.remove("enable-mouse-events"), e6._selectionService.enable()), 8 & t7 ? n4.mousemove || (r4.addEventListener("mousemove", l4), n4.mousemove = l4) : (r4.removeEventListener("mousemove", n4.mousemove), n4.mousemove = null), 16 & t7 ? n4.wheel || (r4.addEventListener("wheel", s4, { passive: false }), n4.wheel = s4) : (r4.removeEventListener("wheel", n4.wheel), n4.wheel = null), 2 & t7 ? n4.mouseup || (n4.mouseup = o4) : (e6._document.removeEventListener("mouseup", n4.mouseup), n4.mouseup = null), 4 & t7 ? n4.mousedrag || (n4.mousedrag = a4) : (e6._document.removeEventListener("mousemove", n4.mousedrag), n4.mousedrag = null);
                })), this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol, this.register((0, d3.addDisposableDomListener)(r4, "mousedown", function(t7) {
                  if (t7.preventDefault(), e6.focus(), e6.coreMouseService.areMouseEventsActive && !e6._selectionService.shouldForceSelection(t7))
                    return i4(t7), n4.mouseup && e6._document.addEventListener("mouseup", n4.mouseup), n4.mousedrag && e6._document.addEventListener("mousemove", n4.mousedrag), e6.cancel(t7);
                })), this.register((0, d3.addDisposableDomListener)(r4, "wheel", function(t7) {
                  if (!n4.wheel) {
                    if (!e6.buffer.hasScrollback) {
                      var r5 = e6.viewport.getLinesScrolled(t7);
                      if (r5 === 0)
                        return;
                      for (var i5 = c3.C0.ESC + (e6.coreService.decPrivateModes.applicationCursorKeys ? "O" : "[") + (t7.deltaY < 0 ? "A" : "B"), o5 = "", s5 = 0; s5 < Math.abs(r5); s5++)
                        o5 += i5;
                      return e6.coreService.triggerDataEvent(o5, true), e6.cancel(t7, true);
                    }
                    return e6.viewport.onWheel(t7) ? e6.cancel(t7) : void 0;
                  }
                }, { passive: false })), this.register((0, d3.addDisposableDomListener)(r4, "touchstart", function(t7) {
                  if (!e6.coreMouseService.areMouseEventsActive)
                    return e6.viewport.onTouchStart(t7), e6.cancel(t7);
                }, { passive: true })), this.register((0, d3.addDisposableDomListener)(r4, "touchmove", function(t7) {
                  if (!e6.coreMouseService.areMouseEventsActive)
                    return e6.viewport.onTouchMove(t7) ? void 0 : e6.cancel(t7);
                }, { passive: false }));
              }, t5.prototype.refresh = function(e6, t6) {
                var r4;
                (r4 = this._renderService) === null || r4 === void 0 || r4.refreshRows(e6, t6);
              }, t5.prototype._queueLinkification = function(e6, t6) {
                var r4;
                (r4 = this.linkifier) === null || r4 === void 0 || r4.linkifyRows(e6, t6);
              }, t5.prototype.updateCursorStyle = function(e6) {
                var t6;
                ((t6 = this._selectionService) === null || t6 === void 0 ? void 0 : t6.shouldColumnSelect(e6)) ? this.element.classList.add("column-select") : this.element.classList.remove("column-select");
              }, t5.prototype._showCursor = function() {
                this.coreService.isCursorInitialized || (this.coreService.isCursorInitialized = true, this.refresh(this.buffer.y, this.buffer.y));
              }, t5.prototype.scrollLines = function(t6, r4, i4) {
                i4 === void 0 && (i4 = 0), e5.prototype.scrollLines.call(this, t6, r4, i4), this.refresh(0, this.rows - 1);
              }, t5.prototype.paste = function(e6) {
                (0, a3.paste)(e6, this.textarea, this.coreService);
              }, t5.prototype.attachCustomKeyEventHandler = function(e6) {
                this._customKeyEventHandler = e6;
              }, t5.prototype.registerLinkMatcher = function(e6, t6, r4) {
                var i4 = this.linkifier.registerLinkMatcher(e6, t6, r4);
                return this.refresh(0, this.rows - 1), i4;
              }, t5.prototype.deregisterLinkMatcher = function(e6) {
                this.linkifier.deregisterLinkMatcher(e6) && this.refresh(0, this.rows - 1);
              }, t5.prototype.registerLinkProvider = function(e6) {
                return this.linkifier2.registerLinkProvider(e6);
              }, t5.prototype.registerCharacterJoiner = function(e6) {
                if (!this._characterJoinerService)
                  throw new Error("Terminal must be opened first");
                var t6 = this._characterJoinerService.register(e6);
                return this.refresh(0, this.rows - 1), t6;
              }, t5.prototype.deregisterCharacterJoiner = function(e6) {
                if (!this._characterJoinerService)
                  throw new Error("Terminal must be opened first");
                this._characterJoinerService.deregister(e6) && this.refresh(0, this.rows - 1);
              }, Object.defineProperty(t5.prototype, "markers", { get: function() {
                return this.buffer.markers;
              }, enumerable: false, configurable: true }), t5.prototype.addMarker = function(e6) {
                if (this.buffer === this.buffers.normal)
                  return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + e6);
              }, t5.prototype.registerDecoration = function(e6) {
                return this.decorationService.registerDecoration(e6);
              }, t5.prototype.hasSelection = function() {
                return !!this._selectionService && this._selectionService.hasSelection;
              }, t5.prototype.select = function(e6, t6, r4) {
                this._selectionService.setSelection(e6, t6, r4);
              }, t5.prototype.getSelection = function() {
                return this._selectionService ? this._selectionService.selectionText : "";
              }, t5.prototype.getSelectionPosition = function() {
                if (this._selectionService && this._selectionService.hasSelection)
                  return { startColumn: this._selectionService.selectionStart[0], startRow: this._selectionService.selectionStart[1], endColumn: this._selectionService.selectionEnd[0], endRow: this._selectionService.selectionEnd[1] };
              }, t5.prototype.clearSelection = function() {
                var e6;
                (e6 = this._selectionService) === null || e6 === void 0 || e6.clearSelection();
              }, t5.prototype.selectAll = function() {
                var e6;
                (e6 = this._selectionService) === null || e6 === void 0 || e6.selectAll();
              }, t5.prototype.selectLines = function(e6, t6) {
                var r4;
                (r4 = this._selectionService) === null || r4 === void 0 || r4.selectLines(e6, t6);
              }, t5.prototype._keyDown = function(e6) {
                if (this._keyDownHandled = false, this._customKeyEventHandler && this._customKeyEventHandler(e6) === false)
                  return false;
                if (!this._compositionHelper.keydown(e6))
                  return this.buffer.ybase !== this.buffer.ydisp && this._bufferService.scrollToBottom(), false;
                e6.key !== "Dead" && e6.key !== "AltGraph" || (this._unprocessedDeadKey = true);
                var t6 = (0, S2.evaluateKeyboardEvent)(e6, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);
                if (this.updateCursorStyle(e6), t6.type === 3 || t6.type === 2) {
                  var r4 = this.rows - 1;
                  return this.scrollLines(t6.type === 2 ? -r4 : r4), this.cancel(e6, true);
                }
                return t6.type === 1 && this.selectAll(), !!this._isThirdLevelShift(this.browser, e6) || (t6.cancel && this.cancel(e6, true), !t6.key || (this._unprocessedDeadKey ? (this._unprocessedDeadKey = false, true) : (t6.key !== c3.C0.ETX && t6.key !== c3.C0.CR || (this.textarea.value = ""), this._onKey.fire({ key: t6.key, domEvent: e6 }), this._showCursor(), this.coreService.triggerDataEvent(t6.key, true), this.optionsService.rawOptions.screenReaderMode ? void (this._keyDownHandled = true) : this.cancel(e6, true))));
              }, t5.prototype._isThirdLevelShift = function(e6, t6) {
                var r4 = e6.isMac && !this.options.macOptionIsMeta && t6.altKey && !t6.ctrlKey && !t6.metaKey || e6.isWindows && t6.altKey && t6.ctrlKey && !t6.metaKey || e6.isWindows && t6.getModifierState("AltGraph");
                return t6.type === "keypress" ? r4 : r4 && (!t6.keyCode || t6.keyCode > 47);
              }, t5.prototype._keyUp = function(e6) {
                this._customKeyEventHandler && this._customKeyEventHandler(e6) === false || (function(e7) {
                  return e7.keyCode === 16 || e7.keyCode === 17 || e7.keyCode === 18;
                }(e6) || this.focus(), this.updateCursorStyle(e6), this._keyPressHandled = false);
              }, t5.prototype._keyPress = function(e6) {
                var t6;
                if (this._keyPressHandled = false, this._keyDownHandled)
                  return false;
                if (this._customKeyEventHandler && this._customKeyEventHandler(e6) === false)
                  return false;
                if (this.cancel(e6), e6.charCode)
                  t6 = e6.charCode;
                else if (e6.which === null || e6.which === void 0)
                  t6 = e6.keyCode;
                else {
                  if (e6.which === 0 || e6.charCode === 0)
                    return false;
                  t6 = e6.which;
                }
                return !(!t6 || (e6.altKey || e6.ctrlKey || e6.metaKey) && !this._isThirdLevelShift(this.browser, e6) || (t6 = String.fromCharCode(t6), this._onKey.fire({ key: t6, domEvent: e6 }), this._showCursor(), this.coreService.triggerDataEvent(t6, true), this._keyPressHandled = true, this._unprocessedDeadKey = false, 0));
              }, t5.prototype._inputEvent = function(e6) {
                if (e6.data && e6.inputType === "insertText" && !e6.composed && !this.optionsService.rawOptions.screenReaderMode) {
                  if (this._keyPressHandled)
                    return false;
                  this._unprocessedDeadKey = false;
                  var t6 = e6.data;
                  return this.coreService.triggerDataEvent(t6, true), this.cancel(e6), true;
                }
                return false;
              }, t5.prototype.bell = function() {
                var e6;
                this._soundBell() && ((e6 = this._soundService) === null || e6 === void 0 || e6.playBellSound()), this._onBell.fire();
              }, t5.prototype.resize = function(t6, r4) {
                t6 !== this.cols || r4 !== this.rows ? e5.prototype.resize.call(this, t6, r4) : this._charSizeService && !this._charSizeService.hasValidSize && this._charSizeService.measure();
              }, t5.prototype._afterResize = function(e6, t6) {
                var r4, i4;
                (r4 = this._charSizeService) === null || r4 === void 0 || r4.measure(), (i4 = this.viewport) === null || i4 === void 0 || i4.syncScrollArea(true);
              }, t5.prototype.clear = function() {
                if (this.buffer.ybase !== 0 || this.buffer.y !== 0) {
                  this.buffer.clearMarkers(), this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)), this.buffer.lines.length = 1, this.buffer.ydisp = 0, this.buffer.ybase = 0, this.buffer.y = 0;
                  for (var e6 = 1; e6 < this.rows; e6++)
                    this.buffer.lines.push(this.buffer.getBlankLine(b3.DEFAULT_ATTR_DATA));
                  this.refresh(0, this.rows - 1), this._onScroll.fire({ position: this.buffer.ydisp, source: 0 });
                }
              }, t5.prototype.reset = function() {
                var t6, r4;
                this.options.rows = this.rows, this.options.cols = this.cols;
                var i4 = this._customKeyEventHandler;
                this._setup(), e5.prototype.reset.call(this), (t6 = this._selectionService) === null || t6 === void 0 || t6.reset(), this._customKeyEventHandler = i4, this.refresh(0, this.rows - 1), (r4 = this.viewport) === null || r4 === void 0 || r4.syncScrollArea();
              }, t5.prototype.clearTextureAtlas = function() {
                var e6;
                (e6 = this._renderService) === null || e6 === void 0 || e6.clearTextureAtlas();
              }, t5.prototype._reportFocus = function() {
                var e6;
                ((e6 = this.element) === null || e6 === void 0 ? void 0 : e6.classList.contains("focus")) ? this.coreService.triggerDataEvent(c3.C0.ESC + "[I") : this.coreService.triggerDataEvent(c3.C0.ESC + "[O");
              }, t5.prototype._reportWindowsOptions = function(e6) {
                if (this._renderService)
                  switch (e6) {
                    case l3.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:
                      var t6 = this._renderService.dimensions.scaledCanvasWidth.toFixed(0), r4 = this._renderService.dimensions.scaledCanvasHeight.toFixed(0);
                      this.coreService.triggerDataEvent(c3.C0.ESC + "[4;" + r4 + ";" + t6 + "t");
                      break;
                    case l3.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:
                      var i4 = this._renderService.dimensions.scaledCellWidth.toFixed(0), n4 = this._renderService.dimensions.scaledCellHeight.toFixed(0);
                      this.coreService.triggerDataEvent(c3.C0.ESC + "[6;" + n4 + ";" + i4 + "t");
                  }
              }, t5.prototype.cancel = function(e6, t6) {
                if (this.options.cancelEvents || t6)
                  return e6.preventDefault(), e6.stopPropagation(), false;
              }, t5.prototype._visualBell = function() {
                return false;
              }, t5.prototype._soundBell = function() {
                return this.options.bellStyle === "sound";
              }, t5;
            }(R2.CoreTerminal);
            t4.Terminal = I2;
          }, 9924: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.TimeBasedDebouncer = void 0;
            var r3 = function() {
              function e5(e6, t5) {
                t5 === void 0 && (t5 = 1e3), this._renderCallback = e6, this._debounceThresholdMS = t5, this._lastRefreshMs = 0, this._additionalRefreshRequested = false;
              }
              return e5.prototype.dispose = function() {
                this._refreshTimeoutID && clearTimeout(this._refreshTimeoutID);
              }, e5.prototype.refresh = function(e6, t5, r4) {
                var i3 = this;
                this._rowCount = r4, e6 = e6 !== void 0 ? e6 : 0, t5 = t5 !== void 0 ? t5 : this._rowCount - 1, this._rowStart = this._rowStart !== void 0 ? Math.min(this._rowStart, e6) : e6, this._rowEnd = this._rowEnd !== void 0 ? Math.max(this._rowEnd, t5) : t5;
                var n3 = Date.now();
                if (n3 - this._lastRefreshMs >= this._debounceThresholdMS)
                  this._lastRefreshMs = n3, this._innerRefresh();
                else if (!this._additionalRefreshRequested) {
                  var o3 = n3 - this._lastRefreshMs, s3 = this._debounceThresholdMS - o3;
                  this._additionalRefreshRequested = true, this._refreshTimeoutID = window.setTimeout(function() {
                    i3._lastRefreshMs = Date.now(), i3._innerRefresh(), i3._additionalRefreshRequested = false, i3._refreshTimeoutID = void 0;
                  }, s3);
                }
              }, e5.prototype._innerRefresh = function() {
                if (this._rowStart !== void 0 && this._rowEnd !== void 0 && this._rowCount !== void 0) {
                  var e6 = Math.max(this._rowStart, 0), t5 = Math.min(this._rowEnd, this._rowCount - 1);
                  this._rowStart = void 0, this._rowEnd = void 0, this._renderCallback(e6, t5);
                }
              }, e5;
            }();
            t4.TimeBasedDebouncer = r3;
          }, 1680: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.Viewport = void 0;
            var a3 = r3(844), c3 = r3(3656), l3 = r3(4725), h3 = r3(2585), u3 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4, a4, l4) {
                var h4 = e5.call(this) || this;
                return h4._scrollLines = t6, h4._viewportElement = r4, h4._scrollArea = i4, h4._element = n4, h4._bufferService = o4, h4._optionsService = s4, h4._charSizeService = a4, h4._renderService = l4, h4.scrollBarWidth = 0, h4._currentRowHeight = 0, h4._currentScaledCellHeight = 0, h4._lastRecordedBufferLength = 0, h4._lastRecordedViewportHeight = 0, h4._lastRecordedBufferHeight = 0, h4._lastTouchY = 0, h4._lastScrollTop = 0, h4._lastHadScrollBar = false, h4._wheelPartialScroll = 0, h4._refreshAnimationFrame = null, h4._ignoreNextScrollEvent = false, h4.scrollBarWidth = h4._viewportElement.offsetWidth - h4._scrollArea.offsetWidth || 15, h4._lastHadScrollBar = true, h4.register((0, c3.addDisposableDomListener)(h4._viewportElement, "scroll", h4._onScroll.bind(h4))), h4._activeBuffer = h4._bufferService.buffer, h4.register(h4._bufferService.buffers.onBufferActivate(function(e6) {
                  return h4._activeBuffer = e6.activeBuffer;
                })), h4._renderDimensions = h4._renderService.dimensions, h4.register(h4._renderService.onDimensionsChange(function(e6) {
                  return h4._renderDimensions = e6;
                })), setTimeout(function() {
                  return h4.syncScrollArea();
                }, 0), h4;
              }
              return n3(t5, e5), t5.prototype.onThemeChange = function(e6) {
                this._viewportElement.style.backgroundColor = e6.background.css;
              }, t5.prototype._refresh = function(e6) {
                var t6 = this;
                if (e6)
                  return this._innerRefresh(), void (this._refreshAnimationFrame !== null && cancelAnimationFrame(this._refreshAnimationFrame));
                this._refreshAnimationFrame === null && (this._refreshAnimationFrame = requestAnimationFrame(function() {
                  return t6._innerRefresh();
                }));
              }, t5.prototype._innerRefresh = function() {
                if (this._charSizeService.height > 0) {
                  this._currentRowHeight = this._renderService.dimensions.scaledCellHeight / window.devicePixelRatio, this._currentScaledCellHeight = this._renderService.dimensions.scaledCellHeight, this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;
                  var e6 = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.canvasHeight);
                  this._lastRecordedBufferHeight !== e6 && (this._lastRecordedBufferHeight = e6, this._scrollArea.style.height = this._lastRecordedBufferHeight + "px");
                }
                var t6 = this._bufferService.buffer.ydisp * this._currentRowHeight;
                this._viewportElement.scrollTop !== t6 && (this._ignoreNextScrollEvent = true, this._viewportElement.scrollTop = t6), this._optionsService.rawOptions.scrollback === 0 ? this.scrollBarWidth = 0 : this.scrollBarWidth = this._viewportElement.offsetWidth - this._scrollArea.offsetWidth || 15, this._lastHadScrollBar = this.scrollBarWidth > 0;
                var r4 = window.getComputedStyle(this._element), i4 = parseInt(r4.paddingLeft) + parseInt(r4.paddingRight);
                this._viewportElement.style.width = (this._renderService.dimensions.actualCellWidth * this._bufferService.cols + this.scrollBarWidth + (this._lastHadScrollBar ? i4 : 0)).toString() + "px", this._refreshAnimationFrame = null;
              }, t5.prototype.syncScrollArea = function(e6) {
                if (e6 === void 0 && (e6 = false), this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length)
                  return this._lastRecordedBufferLength = this._bufferService.buffer.lines.length, void this._refresh(e6);
                this._lastRecordedViewportHeight === this._renderService.dimensions.canvasHeight && this._lastScrollTop === this._activeBuffer.ydisp * this._currentRowHeight && this._renderDimensions.scaledCellHeight === this._currentScaledCellHeight ? this._lastHadScrollBar !== this._optionsService.rawOptions.scrollback > 0 && this._refresh(e6) : this._refresh(e6);
              }, t5.prototype._onScroll = function(e6) {
                if (this._lastScrollTop = this._viewportElement.scrollTop, this._viewportElement.offsetParent) {
                  if (this._ignoreNextScrollEvent)
                    return this._ignoreNextScrollEvent = false, void this._scrollLines(0);
                  var t6 = Math.round(this._lastScrollTop / this._currentRowHeight) - this._bufferService.buffer.ydisp;
                  this._scrollLines(t6);
                }
              }, t5.prototype._bubbleScroll = function(e6, t6) {
                var r4 = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;
                return !(t6 < 0 && this._viewportElement.scrollTop !== 0 || t6 > 0 && r4 < this._lastRecordedBufferHeight) || (e6.cancelable && e6.preventDefault(), false);
              }, t5.prototype.onWheel = function(e6) {
                var t6 = this._getPixelsScrolled(e6);
                return t6 !== 0 && (this._viewportElement.scrollTop += t6, this._bubbleScroll(e6, t6));
              }, t5.prototype._getPixelsScrolled = function(e6) {
                if (e6.deltaY === 0 || e6.shiftKey)
                  return 0;
                var t6 = this._applyScrollModifier(e6.deltaY, e6);
                return e6.deltaMode === WheelEvent.DOM_DELTA_LINE ? t6 *= this._currentRowHeight : e6.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t6 *= this._currentRowHeight * this._bufferService.rows), t6;
              }, t5.prototype.getLinesScrolled = function(e6) {
                if (e6.deltaY === 0 || e6.shiftKey)
                  return 0;
                var t6 = this._applyScrollModifier(e6.deltaY, e6);
                return e6.deltaMode === WheelEvent.DOM_DELTA_PIXEL ? (t6 /= this._currentRowHeight + 0, this._wheelPartialScroll += t6, t6 = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1), this._wheelPartialScroll %= 1) : e6.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t6 *= this._bufferService.rows), t6;
              }, t5.prototype._applyScrollModifier = function(e6, t6) {
                var r4 = this._optionsService.rawOptions.fastScrollModifier;
                return r4 === "alt" && t6.altKey || r4 === "ctrl" && t6.ctrlKey || r4 === "shift" && t6.shiftKey ? e6 * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity : e6 * this._optionsService.rawOptions.scrollSensitivity;
              }, t5.prototype.onTouchStart = function(e6) {
                this._lastTouchY = e6.touches[0].pageY;
              }, t5.prototype.onTouchMove = function(e6) {
                var t6 = this._lastTouchY - e6.touches[0].pageY;
                return this._lastTouchY = e6.touches[0].pageY, t6 !== 0 && (this._viewportElement.scrollTop += t6, this._bubbleScroll(e6, t6));
              }, o3([s3(4, h3.IBufferService), s3(5, h3.IOptionsService), s3(6, l3.ICharSizeService), s3(7, l3.IRenderService)], t5);
            }(a3.Disposable);
            t4.Viewport = u3;
          }, 2950: function(e4, t4, r3) {
            var i3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, n3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CompositionHelper = void 0;
            var o3 = r3(4725), s3 = r3(2585), a3 = function() {
              function e5(e6, t5, r4, i4, n4, o4) {
                this._textarea = e6, this._compositionView = t5, this._bufferService = r4, this._optionsService = i4, this._coreService = n4, this._renderService = o4, this._isComposing = false, this._isSendingComposition = false, this._compositionPosition = { start: 0, end: 0 }, this._dataAlreadySent = "";
              }
              return Object.defineProperty(e5.prototype, "isComposing", { get: function() {
                return this._isComposing;
              }, enumerable: false, configurable: true }), e5.prototype.compositionstart = function() {
                this._isComposing = true, this._compositionPosition.start = this._textarea.value.length, this._compositionView.textContent = "", this._dataAlreadySent = "", this._compositionView.classList.add("active");
              }, e5.prototype.compositionupdate = function(e6) {
                var t5 = this;
                this._compositionView.textContent = e6.data, this.updateCompositionElements(), setTimeout(function() {
                  t5._compositionPosition.end = t5._textarea.value.length;
                }, 0);
              }, e5.prototype.compositionend = function() {
                this._finalizeComposition(true);
              }, e5.prototype.keydown = function(e6) {
                if (this._isComposing || this._isSendingComposition) {
                  if (e6.keyCode === 229)
                    return false;
                  if (e6.keyCode === 16 || e6.keyCode === 17 || e6.keyCode === 18)
                    return false;
                  this._finalizeComposition(false);
                }
                return e6.keyCode !== 229 || (this._handleAnyTextareaChanges(), false);
              }, e5.prototype._finalizeComposition = function(e6) {
                var t5 = this;
                if (this._compositionView.classList.remove("active"), this._isComposing = false, e6) {
                  var r4 = { start: this._compositionPosition.start, end: this._compositionPosition.end };
                  this._isSendingComposition = true, setTimeout(function() {
                    if (t5._isSendingComposition) {
                      t5._isSendingComposition = false;
                      var e7;
                      r4.start += t5._dataAlreadySent.length, (e7 = t5._isComposing ? t5._textarea.value.substring(r4.start, r4.end) : t5._textarea.value.substring(r4.start)).length > 0 && t5._coreService.triggerDataEvent(e7, true);
                    }
                  }, 0);
                } else {
                  this._isSendingComposition = false;
                  var i4 = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);
                  this._coreService.triggerDataEvent(i4, true);
                }
              }, e5.prototype._handleAnyTextareaChanges = function() {
                var e6 = this, t5 = this._textarea.value;
                setTimeout(function() {
                  if (!e6._isComposing) {
                    var r4 = e6._textarea.value.replace(t5, "");
                    r4.length > 0 && (e6._dataAlreadySent = r4, e6._coreService.triggerDataEvent(r4, true));
                  }
                }, 0);
              }, e5.prototype.updateCompositionElements = function(e6) {
                var t5 = this;
                if (this._isComposing) {
                  if (this._bufferService.buffer.isCursorInViewport) {
                    var r4 = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1), i4 = this._renderService.dimensions.actualCellHeight, n4 = this._bufferService.buffer.y * this._renderService.dimensions.actualCellHeight, o4 = r4 * this._renderService.dimensions.actualCellWidth;
                    this._compositionView.style.left = o4 + "px", this._compositionView.style.top = n4 + "px", this._compositionView.style.height = i4 + "px", this._compositionView.style.lineHeight = i4 + "px", this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily, this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + "px";
                    var s4 = this._compositionView.getBoundingClientRect();
                    this._textarea.style.left = o4 + "px", this._textarea.style.top = n4 + "px", this._textarea.style.width = Math.max(s4.width, 1) + "px", this._textarea.style.height = Math.max(s4.height, 1) + "px", this._textarea.style.lineHeight = s4.height + "px";
                  }
                  e6 || setTimeout(function() {
                    return t5.updateCompositionElements(true);
                  }, 0);
                }
              }, i3([n3(2, s3.IBufferService), n3(3, s3.IOptionsService), n3(4, s3.ICoreService), n3(5, o3.IRenderService)], e5);
            }();
            t4.CompositionHelper = a3;
          }, 9806: (e4, t4) => {
            function r3(e5, t5) {
              var r4 = t5.getBoundingClientRect();
              return [e5.clientX - r4.left, e5.clientY - r4.top];
            }
            Object.defineProperty(t4, "__esModule", { value: true }), t4.getRawByteCoords = t4.getCoords = t4.getCoordsRelativeToElement = void 0, t4.getCoordsRelativeToElement = r3, t4.getCoords = function(e5, t5, i3, n3, o3, s3, a3, c3) {
              if (o3) {
                var l3 = r3(e5, t5);
                if (l3)
                  return l3[0] = Math.ceil((l3[0] + (c3 ? s3 / 2 : 0)) / s3), l3[1] = Math.ceil(l3[1] / a3), l3[0] = Math.min(Math.max(l3[0], 1), i3 + (c3 ? 1 : 0)), l3[1] = Math.min(Math.max(l3[1], 1), n3), l3;
              }
            }, t4.getRawByteCoords = function(e5) {
              if (e5)
                return { x: e5[0] + 32, y: e5[1] + 32 };
            };
          }, 9504: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.moveToCellSequence = void 0;
            var i3 = r3(2584);
            function n3(e5, t5, r4, i4) {
              var n4 = e5 - o3(r4, e5), a4 = t5 - o3(r4, t5), h3 = Math.abs(n4 - a4) - function(e6, t6, r5) {
                for (var i5 = 0, n5 = e6 - o3(r5, e6), a5 = t6 - o3(r5, t6), c4 = 0; c4 < Math.abs(n5 - a5); c4++) {
                  var l4 = s3(e6, t6) === "A" ? -1 : 1, h4 = r5.buffer.lines.get(n5 + l4 * c4);
                  (h4 == null ? void 0 : h4.isWrapped) && i5++;
                }
                return i5;
              }(e5, t5, r4);
              return l3(h3, c3(s3(e5, t5), i4));
            }
            function o3(e5, t5) {
              for (var r4 = 0, i4 = e5.buffer.lines.get(t5), n4 = i4 == null ? void 0 : i4.isWrapped; n4 && t5 >= 0 && t5 < e5.rows; )
                r4++, n4 = (i4 = e5.buffer.lines.get(--t5)) == null ? void 0 : i4.isWrapped;
              return r4;
            }
            function s3(e5, t5) {
              return e5 > t5 ? "A" : "B";
            }
            function a3(e5, t5, r4, i4, n4, o4) {
              for (var s4 = e5, a4 = t5, c4 = ""; s4 !== r4 || a4 !== i4; )
                s4 += n4 ? 1 : -1, n4 && s4 > o4.cols - 1 ? (c4 += o4.buffer.translateBufferLineToString(a4, false, e5, s4), s4 = 0, e5 = 0, a4++) : !n4 && s4 < 0 && (c4 += o4.buffer.translateBufferLineToString(a4, false, 0, e5 + 1), e5 = s4 = o4.cols - 1, a4--);
              return c4 + o4.buffer.translateBufferLineToString(a4, false, e5, s4);
            }
            function c3(e5, t5) {
              var r4 = t5 ? "O" : "[";
              return i3.C0.ESC + r4 + e5;
            }
            function l3(e5, t5) {
              e5 = Math.floor(e5);
              for (var r4 = "", i4 = 0; i4 < e5; i4++)
                r4 += t5;
              return r4;
            }
            t4.moveToCellSequence = function(e5, t5, r4, i4) {
              var s4, h3 = r4.buffer.x, u3 = r4.buffer.y;
              if (!r4.buffer.hasScrollback)
                return function(e6, t6, r5, i5, s5, h4) {
                  return n3(t6, i5, s5, h4).length === 0 ? "" : l3(a3(e6, t6, e6, t6 - o3(s5, t6), false, s5).length, c3("D", h4));
                }(h3, u3, 0, t5, r4, i4) + n3(u3, t5, r4, i4) + function(e6, t6, r5, i5, s5, h4) {
                  var u4;
                  u4 = n3(t6, i5, s5, h4).length > 0 ? i5 - o3(s5, i5) : t6;
                  var f4 = i5, _3 = function(e7, t7, r6, i6, s6, a4) {
                    var c4;
                    return c4 = n3(r6, i6, s6, a4).length > 0 ? i6 - o3(s6, i6) : t7, e7 < r6 && c4 <= i6 || e7 >= r6 && c4 < i6 ? "C" : "D";
                  }(e6, t6, r5, i5, s5, h4);
                  return l3(a3(e6, u4, r5, f4, _3 === "C", s5).length, c3(_3, h4));
                }(h3, u3, e5, t5, r4, i4);
              if (u3 === t5)
                return s4 = h3 > e5 ? "D" : "C", l3(Math.abs(h3 - e5), c3(s4, i4));
              s4 = u3 > t5 ? "D" : "C";
              var f3 = Math.abs(u3 - t5);
              return l3(function(e6, t6) {
                return t6.cols - e6;
              }(u3 > t5 ? e5 : h3, r4) + (f3 - 1) * r4.cols + 1 + ((u3 > t5 ? h3 : e5) - 1), c3(s4, i4));
            };
          }, 4389: function(e4, t4, r3) {
            var i3 = this && this.__assign || function() {
              return i3 = Object.assign || function(e5) {
                for (var t5, r4 = 1, i4 = arguments.length; r4 < i4; r4++)
                  for (var n4 in t5 = arguments[r4])
                    Object.prototype.hasOwnProperty.call(t5, n4) && (e5[n4] = t5[n4]);
                return e5;
              }, i3.apply(this, arguments);
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.Terminal = void 0;
            var n3 = r3(3236), o3 = r3(9042), s3 = r3(7975), a3 = r3(7090), c3 = r3(5741), l3 = r3(8285), h3 = ["cols", "rows"], u3 = function() {
              function e5(e6) {
                var t5 = this;
                this._core = new n3.Terminal(e6), this._addonManager = new c3.AddonManager(), this._publicOptions = i3({}, this._core.options);
                var r4 = function(e7) {
                  return t5._core.options[e7];
                }, o4 = function(e7, r5) {
                  t5._checkReadonlyOptions(e7), t5._core.options[e7] = r5;
                };
                for (var s4 in this._core.options) {
                  var a4 = { get: r4.bind(this, s4), set: o4.bind(this, s4) };
                  Object.defineProperty(this._publicOptions, s4, a4);
                }
              }
              return e5.prototype._checkReadonlyOptions = function(e6) {
                if (h3.includes(e6))
                  throw new Error('Option "' + e6 + '" can only be set in the constructor');
              }, e5.prototype._checkProposedApi = function() {
                if (!this._core.optionsService.rawOptions.allowProposedApi)
                  throw new Error("You must set the allowProposedApi option to true to use proposed API");
              }, Object.defineProperty(e5.prototype, "onBell", { get: function() {
                return this._core.onBell;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onBinary", { get: function() {
                return this._core.onBinary;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onCursorMove", { get: function() {
                return this._core.onCursorMove;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onData", { get: function() {
                return this._core.onData;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onKey", { get: function() {
                return this._core.onKey;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onLineFeed", { get: function() {
                return this._core.onLineFeed;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onRender", { get: function() {
                return this._core.onRender;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onResize", { get: function() {
                return this._core.onResize;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onScroll", { get: function() {
                return this._core.onScroll;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onSelectionChange", { get: function() {
                return this._core.onSelectionChange;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onTitleChange", { get: function() {
                return this._core.onTitleChange;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "element", { get: function() {
                return this._core.element;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "parser", { get: function() {
                return this._checkProposedApi(), this._parser || (this._parser = new s3.ParserApi(this._core)), this._parser;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "unicode", { get: function() {
                return this._checkProposedApi(), new a3.UnicodeApi(this._core);
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "textarea", { get: function() {
                return this._core.textarea;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "rows", { get: function() {
                return this._core.rows;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "cols", { get: function() {
                return this._core.cols;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "buffer", { get: function() {
                return this._checkProposedApi(), this._buffer || (this._buffer = new l3.BufferNamespaceApi(this._core)), this._buffer;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "markers", { get: function() {
                return this._checkProposedApi(), this._core.markers;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "modes", { get: function() {
                var e6 = this._core.coreService.decPrivateModes, t5 = "none";
                switch (this._core.coreMouseService.activeProtocol) {
                  case "X10":
                    t5 = "x10";
                    break;
                  case "VT200":
                    t5 = "vt200";
                    break;
                  case "DRAG":
                    t5 = "drag";
                    break;
                  case "ANY":
                    t5 = "any";
                }
                return { applicationCursorKeysMode: e6.applicationCursorKeys, applicationKeypadMode: e6.applicationKeypad, bracketedPasteMode: e6.bracketedPasteMode, insertMode: this._core.coreService.modes.insertMode, mouseTrackingMode: t5, originMode: e6.origin, reverseWraparoundMode: e6.reverseWraparound, sendFocusMode: e6.sendFocus, wraparoundMode: e6.wraparound };
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "options", { get: function() {
                return this._publicOptions;
              }, set: function(e6) {
                for (var t5 in e6)
                  this._publicOptions[t5] = e6[t5];
              }, enumerable: false, configurable: true }), e5.prototype.blur = function() {
                this._core.blur();
              }, e5.prototype.focus = function() {
                this._core.focus();
              }, e5.prototype.resize = function(e6, t5) {
                this._verifyIntegers(e6, t5), this._core.resize(e6, t5);
              }, e5.prototype.open = function(e6) {
                this._core.open(e6);
              }, e5.prototype.attachCustomKeyEventHandler = function(e6) {
                this._core.attachCustomKeyEventHandler(e6);
              }, e5.prototype.registerLinkMatcher = function(e6, t5, r4) {
                return this._checkProposedApi(), this._core.registerLinkMatcher(e6, t5, r4);
              }, e5.prototype.deregisterLinkMatcher = function(e6) {
                this._checkProposedApi(), this._core.deregisterLinkMatcher(e6);
              }, e5.prototype.registerLinkProvider = function(e6) {
                return this._checkProposedApi(), this._core.registerLinkProvider(e6);
              }, e5.prototype.registerCharacterJoiner = function(e6) {
                return this._checkProposedApi(), this._core.registerCharacterJoiner(e6);
              }, e5.prototype.deregisterCharacterJoiner = function(e6) {
                this._checkProposedApi(), this._core.deregisterCharacterJoiner(e6);
              }, e5.prototype.registerMarker = function(e6) {
                return e6 === void 0 && (e6 = 0), this._checkProposedApi(), this._verifyIntegers(e6), this._core.addMarker(e6);
              }, e5.prototype.registerDecoration = function(e6) {
                var t5, r4, i4;
                return this._checkProposedApi(), this._verifyPositiveIntegers((t5 = e6.x) !== null && t5 !== void 0 ? t5 : 0, (r4 = e6.width) !== null && r4 !== void 0 ? r4 : 0, (i4 = e6.height) !== null && i4 !== void 0 ? i4 : 0), this._core.registerDecoration(e6);
              }, e5.prototype.addMarker = function(e6) {
                return this.registerMarker(e6);
              }, e5.prototype.hasSelection = function() {
                return this._core.hasSelection();
              }, e5.prototype.select = function(e6, t5, r4) {
                this._verifyIntegers(e6, t5, r4), this._core.select(e6, t5, r4);
              }, e5.prototype.getSelection = function() {
                return this._core.getSelection();
              }, e5.prototype.getSelectionPosition = function() {
                return this._core.getSelectionPosition();
              }, e5.prototype.clearSelection = function() {
                this._core.clearSelection();
              }, e5.prototype.selectAll = function() {
                this._core.selectAll();
              }, e5.prototype.selectLines = function(e6, t5) {
                this._verifyIntegers(e6, t5), this._core.selectLines(e6, t5);
              }, e5.prototype.dispose = function() {
                this._addonManager.dispose(), this._core.dispose();
              }, e5.prototype.scrollLines = function(e6) {
                this._verifyIntegers(e6), this._core.scrollLines(e6);
              }, e5.prototype.scrollPages = function(e6) {
                this._verifyIntegers(e6), this._core.scrollPages(e6);
              }, e5.prototype.scrollToTop = function() {
                this._core.scrollToTop();
              }, e5.prototype.scrollToBottom = function() {
                this._core.scrollToBottom();
              }, e5.prototype.scrollToLine = function(e6) {
                this._verifyIntegers(e6), this._core.scrollToLine(e6);
              }, e5.prototype.clear = function() {
                this._core.clear();
              }, e5.prototype.write = function(e6, t5) {
                this._core.write(e6, t5);
              }, e5.prototype.writeUtf8 = function(e6, t5) {
                this._core.write(e6, t5);
              }, e5.prototype.writeln = function(e6, t5) {
                this._core.write(e6), this._core.write("\r\n", t5);
              }, e5.prototype.paste = function(e6) {
                this._core.paste(e6);
              }, e5.prototype.getOption = function(e6) {
                return this._core.optionsService.getOption(e6);
              }, e5.prototype.setOption = function(e6, t5) {
                this._checkReadonlyOptions(e6), this._core.optionsService.setOption(e6, t5);
              }, e5.prototype.refresh = function(e6, t5) {
                this._verifyIntegers(e6, t5), this._core.refresh(e6, t5);
              }, e5.prototype.reset = function() {
                this._core.reset();
              }, e5.prototype.clearTextureAtlas = function() {
                this._core.clearTextureAtlas();
              }, e5.prototype.loadAddon = function(e6) {
                return this._addonManager.loadAddon(this, e6);
              }, Object.defineProperty(e5, "strings", { get: function() {
                return o3;
              }, enumerable: false, configurable: true }), e5.prototype._verifyIntegers = function() {
                for (var e6 = [], t5 = 0; t5 < arguments.length; t5++)
                  e6[t5] = arguments[t5];
                for (var r4 = 0, i4 = e6; r4 < i4.length; r4++) {
                  var n4 = i4[r4];
                  if (n4 === 1 / 0 || isNaN(n4) || n4 % 1 != 0)
                    throw new Error("This API only accepts integers");
                }
              }, e5.prototype._verifyPositiveIntegers = function() {
                for (var e6 = [], t5 = 0; t5 < arguments.length; t5++)
                  e6[t5] = arguments[t5];
                for (var r4 = 0, i4 = e6; r4 < i4.length; r4++) {
                  var n4 = i4[r4];
                  if (n4 && (n4 === 1 / 0 || isNaN(n4) || n4 % 1 != 0 || n4 < 0))
                    throw new Error("This API only accepts positive integers");
                }
              }, e5;
            }();
            t4.Terminal = u3;
          }, 1546: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.BaseRenderLayer = void 0;
            var i3 = r3(643), n3 = r3(8803), o3 = r3(1420), s3 = r3(3734), a3 = r3(1752), c3 = r3(4774), l3 = r3(9631), h3 = r3(8978), u3 = function() {
              function e5(e6, t5, r4, i4, n4, o4, s4, a4) {
                this._container = e6, this._alpha = i4, this._colors = n4, this._rendererId = o4, this._bufferService = s4, this._optionsService = a4, this._scaledCharWidth = 0, this._scaledCharHeight = 0, this._scaledCellWidth = 0, this._scaledCellHeight = 0, this._scaledCharLeft = 0, this._scaledCharTop = 0, this._currentGlyphIdentifier = { chars: "", code: 0, bg: 0, fg: 0, bold: false, dim: false, italic: false }, this._canvas = document.createElement("canvas"), this._canvas.classList.add("xterm-" + t5 + "-layer"), this._canvas.style.zIndex = r4.toString(), this._initCanvas(), this._container.appendChild(this._canvas);
              }
              return e5.prototype.dispose = function() {
                var e6;
                (0, l3.removeElementFromParent)(this._canvas), (e6 = this._charAtlas) === null || e6 === void 0 || e6.dispose();
              }, e5.prototype._initCanvas = function() {
                this._ctx = (0, a3.throwIfFalsy)(this._canvas.getContext("2d", { alpha: this._alpha })), this._alpha || this._clearAll();
              }, e5.prototype.onOptionsChanged = function() {
              }, e5.prototype.onBlur = function() {
              }, e5.prototype.onFocus = function() {
              }, e5.prototype.onCursorMove = function() {
              }, e5.prototype.onGridChanged = function(e6, t5) {
              }, e5.prototype.onSelectionChanged = function(e6, t5, r4) {
                r4 === void 0 && (r4 = false);
              }, e5.prototype.setColors = function(e6) {
                this._refreshCharAtlas(e6);
              }, e5.prototype._setTransparency = function(e6) {
                if (e6 !== this._alpha) {
                  var t5 = this._canvas;
                  this._alpha = e6, this._canvas = this._canvas.cloneNode(), this._initCanvas(), this._container.replaceChild(this._canvas, t5), this._refreshCharAtlas(this._colors), this.onGridChanged(0, this._bufferService.rows - 1);
                }
              }, e5.prototype._refreshCharAtlas = function(e6) {
                this._scaledCharWidth <= 0 && this._scaledCharHeight <= 0 || (this._charAtlas = (0, o3.acquireCharAtlas)(this._optionsService.rawOptions, this._rendererId, e6, this._scaledCharWidth, this._scaledCharHeight), this._charAtlas.warmUp());
              }, e5.prototype.resize = function(e6) {
                this._scaledCellWidth = e6.scaledCellWidth, this._scaledCellHeight = e6.scaledCellHeight, this._scaledCharWidth = e6.scaledCharWidth, this._scaledCharHeight = e6.scaledCharHeight, this._scaledCharLeft = e6.scaledCharLeft, this._scaledCharTop = e6.scaledCharTop, this._canvas.width = e6.scaledCanvasWidth, this._canvas.height = e6.scaledCanvasHeight, this._canvas.style.width = e6.canvasWidth + "px", this._canvas.style.height = e6.canvasHeight + "px", this._alpha || this._clearAll(), this._refreshCharAtlas(this._colors);
              }, e5.prototype.clearTextureAtlas = function() {
                var e6;
                (e6 = this._charAtlas) === null || e6 === void 0 || e6.clear();
              }, e5.prototype._fillCells = function(e6, t5, r4, i4) {
                this._ctx.fillRect(e6 * this._scaledCellWidth, t5 * this._scaledCellHeight, r4 * this._scaledCellWidth, i4 * this._scaledCellHeight);
              }, e5.prototype._fillMiddleLineAtCells = function(e6, t5, r4) {
                r4 === void 0 && (r4 = 1);
                var i4 = Math.ceil(0.5 * this._scaledCellHeight);
                this._ctx.fillRect(e6 * this._scaledCellWidth, (t5 + 1) * this._scaledCellHeight - i4 - window.devicePixelRatio, r4 * this._scaledCellWidth, window.devicePixelRatio);
              }, e5.prototype._fillBottomLineAtCells = function(e6, t5, r4) {
                r4 === void 0 && (r4 = 1), this._ctx.fillRect(e6 * this._scaledCellWidth, (t5 + 1) * this._scaledCellHeight - window.devicePixelRatio - 1, r4 * this._scaledCellWidth, window.devicePixelRatio);
              }, e5.prototype._fillLeftLineAtCell = function(e6, t5, r4) {
                this._ctx.fillRect(e6 * this._scaledCellWidth, t5 * this._scaledCellHeight, window.devicePixelRatio * r4, this._scaledCellHeight);
              }, e5.prototype._strokeRectAtCell = function(e6, t5, r4, i4) {
                this._ctx.lineWidth = window.devicePixelRatio, this._ctx.strokeRect(e6 * this._scaledCellWidth + window.devicePixelRatio / 2, t5 * this._scaledCellHeight + window.devicePixelRatio / 2, r4 * this._scaledCellWidth - window.devicePixelRatio, i4 * this._scaledCellHeight - window.devicePixelRatio);
              }, e5.prototype._clearAll = function() {
                this._alpha ? this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height) : (this._ctx.fillStyle = this._colors.background.css, this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height));
              }, e5.prototype._clearCells = function(e6, t5, r4, i4) {
                this._alpha ? this._ctx.clearRect(e6 * this._scaledCellWidth, t5 * this._scaledCellHeight, r4 * this._scaledCellWidth, i4 * this._scaledCellHeight) : (this._ctx.fillStyle = this._colors.background.css, this._ctx.fillRect(e6 * this._scaledCellWidth, t5 * this._scaledCellHeight, r4 * this._scaledCellWidth, i4 * this._scaledCellHeight));
              }, e5.prototype._fillCharTrueColor = function(e6, t5, r4) {
                this._ctx.font = this._getFont(false, false), this._ctx.textBaseline = n3.TEXT_BASELINE, this._clipRow(r4);
                var i4 = false;
                this._optionsService.rawOptions.customGlyphs !== false && (i4 = (0, h3.tryDrawCustomChar)(this._ctx, e6.getChars(), t5 * this._scaledCellWidth, r4 * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight)), i4 || this._ctx.fillText(e6.getChars(), t5 * this._scaledCellWidth + this._scaledCharLeft, r4 * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight);
              }, e5.prototype._drawChars = function(e6, t5, r4) {
                var o4, s4, a4, c4 = this._getContrastColor(e6);
                c4 || e6.isFgRGB() || e6.isBgRGB() ? this._drawUncachedChars(e6, t5, r4, c4) : (e6.isInverse() ? (s4 = e6.isBgDefault() ? n3.INVERTED_DEFAULT_COLOR : e6.getBgColor(), a4 = e6.isFgDefault() ? n3.INVERTED_DEFAULT_COLOR : e6.getFgColor()) : (a4 = e6.isBgDefault() ? i3.DEFAULT_COLOR : e6.getBgColor(), s4 = e6.isFgDefault() ? i3.DEFAULT_COLOR : e6.getFgColor()), s4 += this._optionsService.rawOptions.drawBoldTextInBrightColors && e6.isBold() && s4 < 8 ? 8 : 0, this._currentGlyphIdentifier.chars = e6.getChars() || i3.WHITESPACE_CELL_CHAR, this._currentGlyphIdentifier.code = e6.getCode() || i3.WHITESPACE_CELL_CODE, this._currentGlyphIdentifier.bg = a4, this._currentGlyphIdentifier.fg = s4, this._currentGlyphIdentifier.bold = !!e6.isBold(), this._currentGlyphIdentifier.dim = !!e6.isDim(), this._currentGlyphIdentifier.italic = !!e6.isItalic(), ((o4 = this._charAtlas) === null || o4 === void 0 ? void 0 : o4.draw(this._ctx, this._currentGlyphIdentifier, t5 * this._scaledCellWidth + this._scaledCharLeft, r4 * this._scaledCellHeight + this._scaledCharTop)) || this._drawUncachedChars(e6, t5, r4));
              }, e5.prototype._drawUncachedChars = function(e6, t5, r4, i4) {
                if (this._ctx.save(), this._ctx.font = this._getFont(!!e6.isBold(), !!e6.isItalic()), this._ctx.textBaseline = n3.TEXT_BASELINE, e6.isInverse())
                  if (i4)
                    this._ctx.fillStyle = i4.css;
                  else if (e6.isBgDefault())
                    this._ctx.fillStyle = c3.color.opaque(this._colors.background).css;
                  else if (e6.isBgRGB())
                    this._ctx.fillStyle = "rgb(" + s3.AttributeData.toColorRGB(e6.getBgColor()).join(",") + ")";
                  else {
                    var o4 = e6.getBgColor();
                    this._optionsService.rawOptions.drawBoldTextInBrightColors && e6.isBold() && o4 < 8 && (o4 += 8), this._ctx.fillStyle = this._colors.ansi[o4].css;
                  }
                else if (i4)
                  this._ctx.fillStyle = i4.css;
                else if (e6.isFgDefault())
                  this._ctx.fillStyle = this._colors.foreground.css;
                else if (e6.isFgRGB())
                  this._ctx.fillStyle = "rgb(" + s3.AttributeData.toColorRGB(e6.getFgColor()).join(",") + ")";
                else {
                  var a4 = e6.getFgColor();
                  this._optionsService.rawOptions.drawBoldTextInBrightColors && e6.isBold() && a4 < 8 && (a4 += 8), this._ctx.fillStyle = this._colors.ansi[a4].css;
                }
                this._clipRow(r4), e6.isDim() && (this._ctx.globalAlpha = n3.DIM_OPACITY);
                var l4 = false;
                this._optionsService.rawOptions.customGlyphs !== false && (l4 = (0, h3.tryDrawCustomChar)(this._ctx, e6.getChars(), t5 * this._scaledCellWidth, r4 * this._scaledCellHeight, this._scaledCellWidth, this._scaledCellHeight)), l4 || this._ctx.fillText(e6.getChars(), t5 * this._scaledCellWidth + this._scaledCharLeft, r4 * this._scaledCellHeight + this._scaledCharTop + this._scaledCharHeight), this._ctx.restore();
              }, e5.prototype._clipRow = function(e6) {
                this._ctx.beginPath(), this._ctx.rect(0, e6 * this._scaledCellHeight, this._bufferService.cols * this._scaledCellWidth, this._scaledCellHeight), this._ctx.clip();
              }, e5.prototype._getFont = function(e6, t5) {
                return (t5 ? "italic" : "") + " " + (e6 ? this._optionsService.rawOptions.fontWeightBold : this._optionsService.rawOptions.fontWeight) + " " + this._optionsService.rawOptions.fontSize * window.devicePixelRatio + "px " + this._optionsService.rawOptions.fontFamily;
              }, e5.prototype._getContrastColor = function(e6) {
                if (this._optionsService.rawOptions.minimumContrastRatio !== 1) {
                  var t5 = this._colors.contrastCache.getColor(e6.bg, e6.fg);
                  if (t5 !== void 0)
                    return t5 || void 0;
                  var r4 = e6.getFgColor(), i4 = e6.getFgColorMode(), n4 = e6.getBgColor(), o4 = e6.getBgColorMode(), s4 = !!e6.isInverse(), a4 = !!e6.isInverse();
                  if (s4) {
                    var l4 = r4;
                    r4 = n4, n4 = l4;
                    var h4 = i4;
                    i4 = o4, o4 = h4;
                  }
                  var u4 = this._resolveBackgroundRgba(o4, n4, s4), f3 = this._resolveForegroundRgba(i4, r4, s4, a4), _3 = c3.rgba.ensureContrastRatio(u4, f3, this._optionsService.rawOptions.minimumContrastRatio);
                  if (_3) {
                    var d3 = { css: c3.channels.toCss(_3 >> 24 & 255, _3 >> 16 & 255, _3 >> 8 & 255), rgba: _3 };
                    return this._colors.contrastCache.setColor(e6.bg, e6.fg, d3), d3;
                  }
                  this._colors.contrastCache.setColor(e6.bg, e6.fg, null);
                }
              }, e5.prototype._resolveBackgroundRgba = function(e6, t5, r4) {
                switch (e6) {
                  case 16777216:
                  case 33554432:
                    return this._colors.ansi[t5].rgba;
                  case 50331648:
                    return t5 << 8;
                  default:
                    return r4 ? this._colors.foreground.rgba : this._colors.background.rgba;
                }
              }, e5.prototype._resolveForegroundRgba = function(e6, t5, r4, i4) {
                switch (e6) {
                  case 16777216:
                  case 33554432:
                    return this._optionsService.rawOptions.drawBoldTextInBrightColors && i4 && t5 < 8 && (t5 += 8), this._colors.ansi[t5].rgba;
                  case 50331648:
                    return t5 << 8;
                  default:
                    return r4 ? this._colors.background.rgba : this._colors.foreground.rgba;
                }
              }, e5;
            }();
            t4.BaseRenderLayer = u3;
          }, 2512: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CursorRenderLayer = void 0;
            var a3 = r3(1546), c3 = r3(511), l3 = r3(2585), h3 = r3(4725), u3 = 600, f3 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4, a4, l4, h4) {
                var u4 = e5.call(this, t6, "cursor", r4, true, i4, n4, s4, a4) || this;
                return u4._onRequestRedraw = o4, u4._coreService = l4, u4._coreBrowserService = h4, u4._cell = new c3.CellData(), u4._state = { x: 0, y: 0, isFocused: false, style: "", width: 0 }, u4._cursorRenderers = { bar: u4._renderBarCursor.bind(u4), block: u4._renderBlockCursor.bind(u4), underline: u4._renderUnderlineCursor.bind(u4) }, u4;
              }
              return n3(t5, e5), t5.prototype.dispose = function() {
                this._cursorBlinkStateManager && (this._cursorBlinkStateManager.dispose(), this._cursorBlinkStateManager = void 0), e5.prototype.dispose.call(this);
              }, t5.prototype.resize = function(t6) {
                e5.prototype.resize.call(this, t6), this._state = { x: 0, y: 0, isFocused: false, style: "", width: 0 };
              }, t5.prototype.reset = function() {
                var e6;
                this._clearCursor(), (e6 = this._cursorBlinkStateManager) === null || e6 === void 0 || e6.restartBlinkAnimation(), this.onOptionsChanged();
              }, t5.prototype.onBlur = function() {
                var e6;
                (e6 = this._cursorBlinkStateManager) === null || e6 === void 0 || e6.pause(), this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });
              }, t5.prototype.onFocus = function() {
                var e6;
                (e6 = this._cursorBlinkStateManager) === null || e6 === void 0 || e6.resume(), this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });
              }, t5.prototype.onOptionsChanged = function() {
                var e6, t6 = this;
                this._optionsService.rawOptions.cursorBlink ? this._cursorBlinkStateManager || (this._cursorBlinkStateManager = new _3(this._coreBrowserService.isFocused, function() {
                  t6._render(true);
                })) : ((e6 = this._cursorBlinkStateManager) === null || e6 === void 0 || e6.dispose(), this._cursorBlinkStateManager = void 0), this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });
              }, t5.prototype.onCursorMove = function() {
                var e6;
                (e6 = this._cursorBlinkStateManager) === null || e6 === void 0 || e6.restartBlinkAnimation();
              }, t5.prototype.onGridChanged = function(e6, t6) {
                !this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused ? this._render(false) : this._cursorBlinkStateManager.restartBlinkAnimation();
              }, t5.prototype._render = function(e6) {
                if (this._coreService.isCursorInitialized && !this._coreService.isCursorHidden) {
                  var t6 = this._bufferService.buffer.ybase + this._bufferService.buffer.y, r4 = t6 - this._bufferService.buffer.ydisp;
                  if (r4 < 0 || r4 >= this._bufferService.rows)
                    this._clearCursor();
                  else {
                    var i4 = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);
                    if (this._bufferService.buffer.lines.get(t6).loadCell(i4, this._cell), this._cell.content !== void 0) {
                      if (!this._coreBrowserService.isFocused) {
                        this._clearCursor(), this._ctx.save(), this._ctx.fillStyle = this._colors.cursor.css;
                        var n4 = this._optionsService.rawOptions.cursorStyle;
                        return n4 && n4 !== "block" ? this._cursorRenderers[n4](i4, r4, this._cell) : this._renderBlurCursor(i4, r4, this._cell), this._ctx.restore(), this._state.x = i4, this._state.y = r4, this._state.isFocused = false, this._state.style = n4, void (this._state.width = this._cell.getWidth());
                      }
                      if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isCursorVisible) {
                        if (this._state) {
                          if (this._state.x === i4 && this._state.y === r4 && this._state.isFocused === this._coreBrowserService.isFocused && this._state.style === this._optionsService.rawOptions.cursorStyle && this._state.width === this._cell.getWidth())
                            return;
                          this._clearCursor();
                        }
                        this._ctx.save(), this._cursorRenderers[this._optionsService.rawOptions.cursorStyle || "block"](i4, r4, this._cell), this._ctx.restore(), this._state.x = i4, this._state.y = r4, this._state.isFocused = false, this._state.style = this._optionsService.rawOptions.cursorStyle, this._state.width = this._cell.getWidth();
                      } else
                        this._clearCursor();
                    }
                  }
                } else
                  this._clearCursor();
              }, t5.prototype._clearCursor = function() {
                this._state && (window.devicePixelRatio < 1 ? this._clearAll() : this._clearCells(this._state.x, this._state.y, this._state.width, 1), this._state = { x: 0, y: 0, isFocused: false, style: "", width: 0 });
              }, t5.prototype._renderBarCursor = function(e6, t6, r4) {
                this._ctx.save(), this._ctx.fillStyle = this._colors.cursor.css, this._fillLeftLineAtCell(e6, t6, this._optionsService.rawOptions.cursorWidth), this._ctx.restore();
              }, t5.prototype._renderBlockCursor = function(e6, t6, r4) {
                this._ctx.save(), this._ctx.fillStyle = this._colors.cursor.css, this._fillCells(e6, t6, r4.getWidth(), 1), this._ctx.fillStyle = this._colors.cursorAccent.css, this._fillCharTrueColor(r4, e6, t6), this._ctx.restore();
              }, t5.prototype._renderUnderlineCursor = function(e6, t6, r4) {
                this._ctx.save(), this._ctx.fillStyle = this._colors.cursor.css, this._fillBottomLineAtCells(e6, t6), this._ctx.restore();
              }, t5.prototype._renderBlurCursor = function(e6, t6, r4) {
                this._ctx.save(), this._ctx.strokeStyle = this._colors.cursor.css, this._strokeRectAtCell(e6, t6, r4.getWidth(), 1), this._ctx.restore();
              }, o3([s3(5, l3.IBufferService), s3(6, l3.IOptionsService), s3(7, l3.ICoreService), s3(8, h3.ICoreBrowserService)], t5);
            }(a3.BaseRenderLayer);
            t4.CursorRenderLayer = f3;
            var _3 = function() {
              function e5(e6, t5) {
                this._renderCallback = t5, this.isCursorVisible = true, e6 && this._restartInterval();
              }
              return Object.defineProperty(e5.prototype, "isPaused", { get: function() {
                return !(this._blinkStartTimeout || this._blinkInterval);
              }, enumerable: false, configurable: true }), e5.prototype.dispose = function() {
                this._blinkInterval && (window.clearInterval(this._blinkInterval), this._blinkInterval = void 0), this._blinkStartTimeout && (window.clearTimeout(this._blinkStartTimeout), this._blinkStartTimeout = void 0), this._animationFrame && (window.cancelAnimationFrame(this._animationFrame), this._animationFrame = void 0);
              }, e5.prototype.restartBlinkAnimation = function() {
                var e6 = this;
                this.isPaused || (this._animationTimeRestarted = Date.now(), this.isCursorVisible = true, this._animationFrame || (this._animationFrame = window.requestAnimationFrame(function() {
                  e6._renderCallback(), e6._animationFrame = void 0;
                })));
              }, e5.prototype._restartInterval = function(e6) {
                var t5 = this;
                e6 === void 0 && (e6 = u3), this._blinkInterval && (window.clearInterval(this._blinkInterval), this._blinkInterval = void 0), this._blinkStartTimeout = window.setTimeout(function() {
                  if (t5._animationTimeRestarted) {
                    var e7 = u3 - (Date.now() - t5._animationTimeRestarted);
                    if (t5._animationTimeRestarted = void 0, e7 > 0)
                      return void t5._restartInterval(e7);
                  }
                  t5.isCursorVisible = false, t5._animationFrame = window.requestAnimationFrame(function() {
                    t5._renderCallback(), t5._animationFrame = void 0;
                  }), t5._blinkInterval = window.setInterval(function() {
                    if (t5._animationTimeRestarted) {
                      var e8 = u3 - (Date.now() - t5._animationTimeRestarted);
                      return t5._animationTimeRestarted = void 0, void t5._restartInterval(e8);
                    }
                    t5.isCursorVisible = !t5.isCursorVisible, t5._animationFrame = window.requestAnimationFrame(function() {
                      t5._renderCallback(), t5._animationFrame = void 0;
                    });
                  }, u3);
                }, e6);
              }, e5.prototype.pause = function() {
                this.isCursorVisible = true, this._blinkInterval && (window.clearInterval(this._blinkInterval), this._blinkInterval = void 0), this._blinkStartTimeout && (window.clearTimeout(this._blinkStartTimeout), this._blinkStartTimeout = void 0), this._animationFrame && (window.cancelAnimationFrame(this._animationFrame), this._animationFrame = void 0);
              }, e5.prototype.resume = function() {
                this.pause(), this._animationTimeRestarted = void 0, this._restartInterval(), this.restartBlinkAnimation();
              }, e5;
            }();
          }, 8978: (e4, t4, r3) => {
            var i3, n3, o3, s3, a3, c3, l3, h3, u3, f3, _3, d3, p3, v2, g3, y3, m2, S2, C2, b3, w3, L2, E2, x2, k2, M2, A2, R2, O2, T, D2, B2, P2, I2, H2, F2, j2, W2, U2, q2, N2, z3, K, G2, V, X2, Y2, Z2, J, $, Q2, ee, te, re, ie, ne, oe, se, ae, ce, le, he, ue, fe, _e, de, pe, ve, ge, ye, me, Se, Ce, be, we, Le, Ee, xe, ke, Me, Ae, Re, Oe, Te, De, Be, Pe, Ie, He, Fe, je, We, Ue, qe, Ne, ze, Ke, Ge, Ve, Xe, Ye, Ze, Je, $e, Qe, et, tt, rt, it, nt, ot, st, at, ct, lt, ht, ut, ft, _t, dt, pt, vt, gt, yt, mt, St, Ct, bt;
            Object.defineProperty(t4, "__esModule", { value: true }), t4.tryDrawCustomChar = t4.boxDrawingDefinitions = t4.blockElementDefinitions = void 0;
            var wt = r3(1752);
            t4.blockElementDefinitions = { "\u2580": [{ x: 0, y: 0, w: 8, h: 4 }], "\u2581": [{ x: 0, y: 7, w: 8, h: 1 }], "\u2582": [{ x: 0, y: 6, w: 8, h: 2 }], "\u2583": [{ x: 0, y: 5, w: 8, h: 3 }], "\u2584": [{ x: 0, y: 4, w: 8, h: 4 }], "\u2585": [{ x: 0, y: 3, w: 8, h: 5 }], "\u2586": [{ x: 0, y: 2, w: 8, h: 6 }], "\u2587": [{ x: 0, y: 1, w: 8, h: 7 }], "\u2588": [{ x: 0, y: 0, w: 8, h: 8 }], "\u2589": [{ x: 0, y: 0, w: 7, h: 8 }], "\u258A": [{ x: 0, y: 0, w: 6, h: 8 }], "\u258B": [{ x: 0, y: 0, w: 5, h: 8 }], "\u258C": [{ x: 0, y: 0, w: 4, h: 8 }], "\u258D": [{ x: 0, y: 0, w: 3, h: 8 }], "\u258E": [{ x: 0, y: 0, w: 2, h: 8 }], "\u258F": [{ x: 0, y: 0, w: 1, h: 8 }], "\u2590": [{ x: 4, y: 0, w: 4, h: 8 }], "\u2594": [{ x: 0, y: 0, w: 9, h: 1 }], "\u2595": [{ x: 7, y: 0, w: 1, h: 8 }], "\u2596": [{ x: 0, y: 4, w: 4, h: 4 }], "\u2597": [{ x: 4, y: 4, w: 4, h: 4 }], "\u2598": [{ x: 0, y: 0, w: 4, h: 4 }], "\u2599": [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], "\u259A": [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], "\u259B": [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 0, w: 4, h: 8 }], "\u259C": [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], "\u259D": [{ x: 4, y: 0, w: 4, h: 4 }], "\u259E": [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], "\u259F": [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], "\u{1FB70}": [{ x: 1, y: 0, w: 1, h: 8 }], "\u{1FB71}": [{ x: 2, y: 0, w: 1, h: 8 }], "\u{1FB72}": [{ x: 3, y: 0, w: 1, h: 8 }], "\u{1FB73}": [{ x: 4, y: 0, w: 1, h: 8 }], "\u{1FB74}": [{ x: 5, y: 0, w: 1, h: 8 }], "\u{1FB75}": [{ x: 6, y: 0, w: 1, h: 8 }], "\u{1FB76}": [{ x: 0, y: 1, w: 8, h: 1 }], "\u{1FB77}": [{ x: 0, y: 2, w: 8, h: 1 }], "\u{1FB78}": [{ x: 0, y: 3, w: 8, h: 1 }], "\u{1FB79}": [{ x: 0, y: 4, w: 8, h: 1 }], "\u{1FB7A}": [{ x: 0, y: 5, w: 8, h: 1 }], "\u{1FB7B}": [{ x: 0, y: 6, w: 8, h: 1 }], "\u{1FB7C}": [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }], "\u{1FB7D}": [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }], "\u{1FB7E}": [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }], "\u{1FB7F}": [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }], "\u{1FB80}": [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }], "\u{1FB81}": [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }], "\u{1FB82}": [{ x: 0, y: 0, w: 8, h: 2 }], "\u{1FB83}": [{ x: 0, y: 0, w: 8, h: 3 }], "\u{1FB84}": [{ x: 0, y: 0, w: 8, h: 5 }], "\u{1FB85}": [{ x: 0, y: 0, w: 8, h: 6 }], "\u{1FB86}": [{ x: 0, y: 0, w: 8, h: 7 }], "\u{1FB87}": [{ x: 6, y: 0, w: 2, h: 8 }], "\u{1FB88}": [{ x: 5, y: 0, w: 3, h: 8 }], "\u{1FB89}": [{ x: 3, y: 0, w: 5, h: 8 }], "\u{1FB8A}": [{ x: 2, y: 0, w: 6, h: 8 }], "\u{1FB8B}": [{ x: 1, y: 0, w: 7, h: 8 }], "\u{1FB95}": [{ x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 }, { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 }, { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 }, { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }], "\u{1FB96}": [{ x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 }, { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 }, { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 }, { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }], "\u{1FB97}": [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }] };
            var Lt = { "\u2591": [[1, 0, 0, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]], "\u2592": [[1, 0], [0, 0], [0, 1], [0, 0]], "\u2593": [[0, 1], [1, 1], [1, 0], [1, 1]] };
            t4.boxDrawingDefinitions = { "\u2500": (i3 = {}, i3[1] = "M0,.5 L1,.5", i3), "\u2501": (n3 = {}, n3[3] = "M0,.5 L1,.5", n3), "\u2502": (o3 = {}, o3[1] = "M.5,0 L.5,1", o3), "\u2503": (s3 = {}, s3[3] = "M.5,0 L.5,1", s3), "\u250C": (a3 = {}, a3[1] = "M0.5,1 L.5,.5 L1,.5", a3), "\u250F": (c3 = {}, c3[3] = "M0.5,1 L.5,.5 L1,.5", c3), "\u2510": (l3 = {}, l3[1] = "M0,.5 L.5,.5 L.5,1", l3), "\u2513": (h3 = {}, h3[3] = "M0,.5 L.5,.5 L.5,1", h3), "\u2514": (u3 = {}, u3[1] = "M.5,0 L.5,.5 L1,.5", u3), "\u2517": (f3 = {}, f3[3] = "M.5,0 L.5,.5 L1,.5", f3), "\u2518": (_3 = {}, _3[1] = "M.5,0 L.5,.5 L0,.5", _3), "\u251B": (d3 = {}, d3[3] = "M.5,0 L.5,.5 L0,.5", d3), "\u251C": (p3 = {}, p3[1] = "M.5,0 L.5,1 M.5,.5 L1,.5", p3), "\u2523": (v2 = {}, v2[3] = "M.5,0 L.5,1 M.5,.5 L1,.5", v2), "\u2524": (g3 = {}, g3[1] = "M.5,0 L.5,1 M.5,.5 L0,.5", g3), "\u252B": (y3 = {}, y3[3] = "M.5,0 L.5,1 M.5,.5 L0,.5", y3), "\u252C": (m2 = {}, m2[1] = "M0,.5 L1,.5 M.5,.5 L.5,1", m2), "\u2533": (S2 = {}, S2[3] = "M0,.5 L1,.5 M.5,.5 L.5,1", S2), "\u2534": (C2 = {}, C2[1] = "M0,.5 L1,.5 M.5,.5 L.5,0", C2), "\u253B": (b3 = {}, b3[3] = "M0,.5 L1,.5 M.5,.5 L.5,0", b3), "\u253C": (w3 = {}, w3[1] = "M0,.5 L1,.5 M.5,0 L.5,1", w3), "\u254B": (L2 = {}, L2[3] = "M0,.5 L1,.5 M.5,0 L.5,1", L2), "\u2574": (E2 = {}, E2[1] = "M.5,.5 L0,.5", E2), "\u2578": (x2 = {}, x2[3] = "M.5,.5 L0,.5", x2), "\u2575": (k2 = {}, k2[1] = "M.5,.5 L.5,0", k2), "\u2579": (M2 = {}, M2[3] = "M.5,.5 L.5,0", M2), "\u2576": (A2 = {}, A2[1] = "M.5,.5 L1,.5", A2), "\u257A": (R2 = {}, R2[3] = "M.5,.5 L1,.5", R2), "\u2577": (O2 = {}, O2[1] = "M.5,.5 L.5,1", O2), "\u257B": (T = {}, T[3] = "M.5,.5 L.5,1", T), "\u2550": (D2 = {}, D2[1] = function(e5, t5) {
              return "M0," + (0.5 - t5) + " L1," + (0.5 - t5) + " M0," + (0.5 + t5) + " L1," + (0.5 + t5);
            }, D2), "\u2551": (B2 = {}, B2[1] = function(e5, t5) {
              return "M" + (0.5 - e5) + ",0 L" + (0.5 - e5) + ",1 M" + (0.5 + e5) + ",0 L" + (0.5 + e5) + ",1";
            }, B2), "\u2552": (P2 = {}, P2[1] = function(e5, t5) {
              return "M.5,1 L.5," + (0.5 - t5) + " L1," + (0.5 - t5) + " M.5," + (0.5 + t5) + " L1," + (0.5 + t5);
            }, P2), "\u2553": (I2 = {}, I2[1] = function(e5, t5) {
              return "M" + (0.5 - e5) + ",1 L" + (0.5 - e5) + ",.5 L1,.5 M" + (0.5 + e5) + ",.5 L" + (0.5 + e5) + ",1";
            }, I2), "\u2554": (H2 = {}, H2[1] = function(e5, t5) {
              return "M1," + (0.5 - t5) + " L" + (0.5 - e5) + "," + (0.5 - t5) + " L" + (0.5 - e5) + ",1 M1," + (0.5 + t5) + " L" + (0.5 + e5) + "," + (0.5 + t5) + " L" + (0.5 + e5) + ",1";
            }, H2), "\u2555": (F2 = {}, F2[1] = function(e5, t5) {
              return "M0," + (0.5 - t5) + " L.5," + (0.5 - t5) + " L.5,1 M0," + (0.5 + t5) + " L.5," + (0.5 + t5);
            }, F2), "\u2556": (j2 = {}, j2[1] = function(e5, t5) {
              return "M" + (0.5 + e5) + ",1 L" + (0.5 + e5) + ",.5 L0,.5 M" + (0.5 - e5) + ",.5 L" + (0.5 - e5) + ",1";
            }, j2), "\u2557": (W2 = {}, W2[1] = function(e5, t5) {
              return "M0," + (0.5 + t5) + " L" + (0.5 - e5) + "," + (0.5 + t5) + " L" + (0.5 - e5) + ",1 M0," + (0.5 - t5) + " L" + (0.5 + e5) + "," + (0.5 - t5) + " L" + (0.5 + e5) + ",1";
            }, W2), "\u2558": (U2 = {}, U2[1] = function(e5, t5) {
              return "M.5,0 L.5," + (0.5 + t5) + " L1," + (0.5 + t5) + " M.5," + (0.5 - t5) + " L1," + (0.5 - t5);
            }, U2), "\u2559": (q2 = {}, q2[1] = function(e5, t5) {
              return "M1,.5 L" + (0.5 - e5) + ",.5 L" + (0.5 - e5) + ",0 M" + (0.5 + e5) + ",.5 L" + (0.5 + e5) + ",0";
            }, q2), "\u255A": (N2 = {}, N2[1] = function(e5, t5) {
              return "M1," + (0.5 - t5) + " L" + (0.5 + e5) + "," + (0.5 - t5) + " L" + (0.5 + e5) + ",0 M1," + (0.5 + t5) + " L" + (0.5 - e5) + "," + (0.5 + t5) + " L" + (0.5 - e5) + ",0";
            }, N2), "\u255B": (z3 = {}, z3[1] = function(e5, t5) {
              return "M0," + (0.5 + t5) + " L.5," + (0.5 + t5) + " L.5,0 M0," + (0.5 - t5) + " L.5," + (0.5 - t5);
            }, z3), "\u255C": (K = {}, K[1] = function(e5, t5) {
              return "M0,.5 L" + (0.5 + e5) + ",.5 L" + (0.5 + e5) + ",0 M" + (0.5 - e5) + ",.5 L" + (0.5 - e5) + ",0";
            }, K), "\u255D": (G2 = {}, G2[1] = function(e5, t5) {
              return "M0," + (0.5 - t5) + " L" + (0.5 - e5) + "," + (0.5 - t5) + " L" + (0.5 - e5) + ",0 M0," + (0.5 + t5) + " L" + (0.5 + e5) + "," + (0.5 + t5) + " L" + (0.5 + e5) + ",0";
            }, G2), "\u255E": (V = {}, V[1] = function(e5, t5) {
              return "M.5,0 L.5,1 M.5," + (0.5 - t5) + " L1," + (0.5 - t5) + " M.5," + (0.5 + t5) + " L1," + (0.5 + t5);
            }, V), "\u255F": (X2 = {}, X2[1] = function(e5, t5) {
              return "M" + (0.5 - e5) + ",0 L" + (0.5 - e5) + ",1 M" + (0.5 + e5) + ",0 L" + (0.5 + e5) + ",1 M" + (0.5 + e5) + ",.5 L1,.5";
            }, X2), "\u2560": (Y2 = {}, Y2[1] = function(e5, t5) {
              return "M" + (0.5 - e5) + ",0 L" + (0.5 - e5) + ",1 M1," + (0.5 + t5) + " L" + (0.5 + e5) + "," + (0.5 + t5) + " L" + (0.5 + e5) + ",1 M1," + (0.5 - t5) + " L" + (0.5 + e5) + "," + (0.5 - t5) + " L" + (0.5 + e5) + ",0";
            }, Y2), "\u2561": (Z2 = {}, Z2[1] = function(e5, t5) {
              return "M.5,0 L.5,1 M0," + (0.5 - t5) + " L.5," + (0.5 - t5) + " M0," + (0.5 + t5) + " L.5," + (0.5 + t5);
            }, Z2), "\u2562": (J = {}, J[1] = function(e5, t5) {
              return "M0,.5 L" + (0.5 - e5) + ",.5 M" + (0.5 - e5) + ",0 L" + (0.5 - e5) + ",1 M" + (0.5 + e5) + ",0 L" + (0.5 + e5) + ",1";
            }, J), "\u2563": ($ = {}, $[1] = function(e5, t5) {
              return "M" + (0.5 + e5) + ",0 L" + (0.5 + e5) + ",1 M0," + (0.5 + t5) + " L" + (0.5 - e5) + "," + (0.5 + t5) + " L" + (0.5 - e5) + ",1 M0," + (0.5 - t5) + " L" + (0.5 - e5) + "," + (0.5 - t5) + " L" + (0.5 - e5) + ",0";
            }, $), "\u2564": (Q2 = {}, Q2[1] = function(e5, t5) {
              return "M0," + (0.5 - t5) + " L1," + (0.5 - t5) + " M0," + (0.5 + t5) + " L1," + (0.5 + t5) + " M.5," + (0.5 + t5) + " L.5,1";
            }, Q2), "\u2565": (ee = {}, ee[1] = function(e5, t5) {
              return "M0,.5 L1,.5 M" + (0.5 - e5) + ",.5 L" + (0.5 - e5) + ",1 M" + (0.5 + e5) + ",.5 L" + (0.5 + e5) + ",1";
            }, ee), "\u2566": (te = {}, te[1] = function(e5, t5) {
              return "M0," + (0.5 - t5) + " L1," + (0.5 - t5) + " M0," + (0.5 + t5) + " L" + (0.5 - e5) + "," + (0.5 + t5) + " L" + (0.5 - e5) + ",1 M1," + (0.5 + t5) + " L" + (0.5 + e5) + "," + (0.5 + t5) + " L" + (0.5 + e5) + ",1";
            }, te), "\u2567": (re = {}, re[1] = function(e5, t5) {
              return "M.5,0 L.5," + (0.5 - t5) + " M0," + (0.5 - t5) + " L1," + (0.5 - t5) + " M0," + (0.5 + t5) + " L1," + (0.5 + t5);
            }, re), "\u2568": (ie = {}, ie[1] = function(e5, t5) {
              return "M0,.5 L1,.5 M" + (0.5 - e5) + ",.5 L" + (0.5 - e5) + ",0 M" + (0.5 + e5) + ",.5 L" + (0.5 + e5) + ",0";
            }, ie), "\u2569": (ne = {}, ne[1] = function(e5, t5) {
              return "M0," + (0.5 + t5) + " L1," + (0.5 + t5) + " M0," + (0.5 - t5) + " L" + (0.5 - e5) + "," + (0.5 - t5) + " L" + (0.5 - e5) + ",0 M1," + (0.5 - t5) + " L" + (0.5 + e5) + "," + (0.5 - t5) + " L" + (0.5 + e5) + ",0";
            }, ne), "\u256A": (oe = {}, oe[1] = function(e5, t5) {
              return "M.5,0 L.5,1 M0," + (0.5 - t5) + " L1," + (0.5 - t5) + " M0," + (0.5 + t5) + " L1," + (0.5 + t5);
            }, oe), "\u256B": (se = {}, se[1] = function(e5, t5) {
              return "M0,.5 L1,.5 M" + (0.5 - e5) + ",0 L" + (0.5 - e5) + ",1 M" + (0.5 + e5) + ",0 L" + (0.5 + e5) + ",1";
            }, se), "\u256C": (ae = {}, ae[1] = function(e5, t5) {
              return "M0," + (0.5 + t5) + " L" + (0.5 - e5) + "," + (0.5 + t5) + " L" + (0.5 - e5) + ",1 M1," + (0.5 + t5) + " L" + (0.5 + e5) + "," + (0.5 + t5) + " L" + (0.5 + e5) + ",1 M0," + (0.5 - t5) + " L" + (0.5 - e5) + "," + (0.5 - t5) + " L" + (0.5 - e5) + ",0 M1," + (0.5 - t5) + " L" + (0.5 + e5) + "," + (0.5 - t5) + " L" + (0.5 + e5) + ",0";
            }, ae), "\u2571": (ce = {}, ce[1] = "M1,0 L0,1", ce), "\u2572": (le = {}, le[1] = "M0,0 L1,1", le), "\u2573": (he = {}, he[1] = "M1,0 L0,1 M0,0 L1,1", he), "\u257C": (ue = {}, ue[1] = "M.5,.5 L0,.5", ue[3] = "M.5,.5 L1,.5", ue), "\u257D": (fe = {}, fe[1] = "M.5,.5 L.5,0", fe[3] = "M.5,.5 L.5,1", fe), "\u257E": (_e = {}, _e[1] = "M.5,.5 L1,.5", _e[3] = "M.5,.5 L0,.5", _e), "\u257F": (de = {}, de[1] = "M.5,.5 L.5,1", de[3] = "M.5,.5 L.5,0", de), "\u250D": (pe = {}, pe[1] = "M.5,.5 L.5,1", pe[3] = "M.5,.5 L1,.5", pe), "\u250E": (ve = {}, ve[1] = "M.5,.5 L1,.5", ve[3] = "M.5,.5 L.5,1", ve), "\u2511": (ge = {}, ge[1] = "M.5,.5 L.5,1", ge[3] = "M.5,.5 L0,.5", ge), "\u2512": (ye = {}, ye[1] = "M.5,.5 L0,.5", ye[3] = "M.5,.5 L.5,1", ye), "\u2515": (me = {}, me[1] = "M.5,.5 L.5,0", me[3] = "M.5,.5 L1,.5", me), "\u2516": (Se = {}, Se[1] = "M.5,.5 L1,.5", Se[3] = "M.5,.5 L.5,0", Se), "\u2519": (Ce = {}, Ce[1] = "M.5,.5 L.5,0", Ce[3] = "M.5,.5 L0,.5", Ce), "\u251A": (be = {}, be[1] = "M.5,.5 L0,.5", be[3] = "M.5,.5 L.5,0", be), "\u251D": (we = {}, we[1] = "M.5,0 L.5,1", we[3] = "M.5,.5 L1,.5", we), "\u251E": (Le = {}, Le[1] = "M0.5,1 L.5,.5 L1,.5", Le[3] = "M.5,.5 L.5,0", Le), "\u251F": (Ee = {}, Ee[1] = "M.5,0 L.5,.5 L1,.5", Ee[3] = "M.5,.5 L.5,1", Ee), "\u2520": (xe = {}, xe[1] = "M.5,.5 L1,.5", xe[3] = "M.5,0 L.5,1", xe), "\u2521": (ke = {}, ke[1] = "M.5,.5 L.5,1", ke[3] = "M.5,0 L.5,.5 L1,.5", ke), "\u2522": (Me = {}, Me[1] = "M.5,.5 L.5,0", Me[3] = "M0.5,1 L.5,.5 L1,.5", Me), "\u2525": (Ae = {}, Ae[1] = "M.5,0 L.5,1", Ae[3] = "M.5,.5 L0,.5", Ae), "\u2526": (Re = {}, Re[1] = "M0,.5 L.5,.5 L.5,1", Re[3] = "M.5,.5 L.5,0", Re), "\u2527": (Oe = {}, Oe[1] = "M.5,0 L.5,.5 L0,.5", Oe[3] = "M.5,.5 L.5,1", Oe), "\u2528": (Te = {}, Te[1] = "M.5,.5 L0,.5", Te[3] = "M.5,0 L.5,1", Te), "\u2529": (De = {}, De[1] = "M.5,.5 L.5,1", De[3] = "M.5,0 L.5,.5 L0,.5", De), "\u252A": (Be = {}, Be[1] = "M.5,.5 L.5,0", Be[3] = "M0,.5 L.5,.5 L.5,1", Be), "\u252D": (Pe = {}, Pe[1] = "M0.5,1 L.5,.5 L1,.5", Pe[3] = "M.5,.5 L0,.5", Pe), "\u252E": (Ie = {}, Ie[1] = "M0,.5 L.5,.5 L.5,1", Ie[3] = "M.5,.5 L1,.5", Ie), "\u252F": (He = {}, He[1] = "M.5,.5 L.5,1", He[3] = "M0,.5 L1,.5", He), "\u2530": (Fe = {}, Fe[1] = "M0,.5 L1,.5", Fe[3] = "M.5,.5 L.5,1", Fe), "\u2531": (je = {}, je[1] = "M.5,.5 L1,.5", je[3] = "M0,.5 L.5,.5 L.5,1", je), "\u2532": (We = {}, We[1] = "M.5,.5 L0,.5", We[3] = "M0.5,1 L.5,.5 L1,.5", We), "\u2535": (Ue = {}, Ue[1] = "M.5,0 L.5,.5 L1,.5", Ue[3] = "M.5,.5 L0,.5", Ue), "\u2536": (qe = {}, qe[1] = "M.5,0 L.5,.5 L0,.5", qe[3] = "M.5,.5 L1,.5", qe), "\u2537": (Ne = {}, Ne[1] = "M.5,.5 L.5,0", Ne[3] = "M0,.5 L1,.5", Ne), "\u2538": (ze = {}, ze[1] = "M0,.5 L1,.5", ze[3] = "M.5,.5 L.5,0", ze), "\u2539": (Ke = {}, Ke[1] = "M.5,.5 L1,.5", Ke[3] = "M.5,0 L.5,.5 L0,.5", Ke), "\u253A": (Ge = {}, Ge[1] = "M.5,.5 L0,.5", Ge[3] = "M.5,0 L.5,.5 L1,.5", Ge), "\u253D": (Ve = {}, Ve[1] = "M.5,0 L.5,1 M.5,.5 L1,.5", Ve[3] = "M.5,.5 L0,.5", Ve), "\u253E": (Xe = {}, Xe[1] = "M.5,0 L.5,1 M.5,.5 L0,.5", Xe[3] = "M.5,.5 L1,.5", Xe), "\u253F": (Ye = {}, Ye[1] = "M.5,0 L.5,1", Ye[3] = "M0,.5 L1,.5", Ye), "\u2540": (Ze = {}, Ze[1] = "M0,.5 L1,.5 M.5,.5 L.5,1", Ze[3] = "M.5,.5 L.5,0", Ze), "\u2541": (Je = {}, Je[1] = "M.5,.5 L.5,0 M0,.5 L1,.5", Je[3] = "M.5,.5 L.5,1", Je), "\u2542": ($e = {}, $e[1] = "M0,.5 L1,.5", $e[3] = "M.5,0 L.5,1", $e), "\u2543": (Qe = {}, Qe[1] = "M0.5,1 L.5,.5 L1,.5", Qe[3] = "M.5,0 L.5,.5 L0,.5", Qe), "\u2544": (et = {}, et[1] = "M0,.5 L.5,.5 L.5,1", et[3] = "M.5,0 L.5,.5 L1,.5", et), "\u2545": (tt = {}, tt[1] = "M.5,0 L.5,.5 L1,.5", tt[3] = "M0,.5 L.5,.5 L.5,1", tt), "\u2546": (rt = {}, rt[1] = "M.5,0 L.5,.5 L0,.5", rt[3] = "M0.5,1 L.5,.5 L1,.5", rt), "\u2547": (it = {}, it[1] = "M.5,.5 L.5,1", it[3] = "M.5,.5 L.5,0 M0,.5 L1,.5", it), "\u2548": (nt = {}, nt[1] = "M.5,.5 L.5,0", nt[3] = "M0,.5 L1,.5 M.5,.5 L.5,1", nt), "\u2549": (ot = {}, ot[1] = "M.5,.5 L1,.5", ot[3] = "M.5,0 L.5,1 M.5,.5 L0,.5", ot), "\u254A": (st = {}, st[1] = "M.5,.5 L0,.5", st[3] = "M.5,0 L.5,1 M.5,.5 L1,.5", st), "\u254C": (at = {}, at[1] = "M.1,.5 L.4,.5 M.6,.5 L.9,.5", at), "\u254D": (ct = {}, ct[3] = "M.1,.5 L.4,.5 M.6,.5 L.9,.5", ct), "\u2504": (lt = {}, lt[1] = "M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5", lt), "\u2505": (ht = {}, ht[3] = "M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5", ht), "\u2508": (ut = {}, ut[1] = "M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5", ut), "\u2509": (ft = {}, ft[3] = "M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5", ft), "\u254E": (_t = {}, _t[1] = "M.5,.1 L.5,.4 M.5,.6 L.5,.9", _t), "\u254F": (dt = {}, dt[3] = "M.5,.1 L.5,.4 M.5,.6 L.5,.9", dt), "\u2506": (pt = {}, pt[1] = "M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333", pt), "\u2507": (vt = {}, vt[3] = "M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333", vt), "\u250A": (gt = {}, gt[1] = "M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95", gt), "\u250B": (yt = {}, yt[3] = "M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95", yt), "\u256D": (mt = {}, mt[1] = "C.5,1,.5,.5,1,.5", mt), "\u256E": (St = {}, St[1] = "C.5,1,.5,.5,0,.5", St), "\u256F": (Ct = {}, Ct[1] = "C.5,0,.5,.5,0,.5", Ct), "\u2570": (bt = {}, bt[1] = "C.5,0,.5,.5,1,.5", bt) }, t4.tryDrawCustomChar = function(e5, r4, i4, n4, o4, s4) {
              var a4 = t4.blockElementDefinitions[r4];
              if (a4)
                return function(e6, t5, r5, i5, n5, o5) {
                  for (var s5 = 0; s5 < t5.length; s5++) {
                    var a5 = t5[s5], c5 = n5 / 8, l5 = o5 / 8;
                    e6.fillRect(r5 + a5.x * c5, i5 + a5.y * l5, a5.w * c5, a5.h * l5);
                  }
                }(e5, a4, i4, n4, o4, s4), true;
              var c4 = Lt[r4];
              if (c4)
                return function(e6, t5, r5, i5, n5, o5) {
                  var s5, a5 = Et.get(t5);
                  a5 || (a5 = /* @__PURE__ */ new Map(), Et.set(t5, a5));
                  var c5 = e6.fillStyle;
                  if (typeof c5 != "string")
                    throw new Error('Unexpected fillStyle type "' + c5 + '"');
                  var l5 = a5.get(c5);
                  if (!l5) {
                    var h4 = t5[0].length, u4 = t5.length, f4 = document.createElement("canvas");
                    f4.width = h4, f4.height = u4;
                    var _4 = (0, wt.throwIfFalsy)(f4.getContext("2d")), d4 = new ImageData(h4, u4), p4 = void 0, v3 = void 0, g4 = void 0, y4 = void 0;
                    if (c5.startsWith("#"))
                      p4 = parseInt(c5.substr(1, 2), 16), v3 = parseInt(c5.substr(3, 2), 16), g4 = parseInt(c5.substr(5, 2), 16), y4 = c5.length > 7 && parseInt(c5.substr(7, 2), 16) || 1;
                    else {
                      if (!c5.startsWith("rgba"))
                        throw new Error('Unexpected fillStyle color format "' + c5 + '" when drawing pattern glyph');
                      p4 = (s5 = c5.substring(5, c5.length - 1).split(",").map(function(e7) {
                        return parseFloat(e7);
                      }))[0], v3 = s5[1], g4 = s5[2], y4 = s5[3];
                    }
                    for (var m3 = 0; m3 < u4; m3++)
                      for (var S3 = 0; S3 < h4; S3++)
                        d4.data[4 * (m3 * h4 + S3)] = p4, d4.data[4 * (m3 * h4 + S3) + 1] = v3, d4.data[4 * (m3 * h4 + S3) + 2] = g4, d4.data[4 * (m3 * h4 + S3) + 3] = t5[m3][S3] * (255 * y4);
                    _4.putImageData(d4, 0, 0), l5 = (0, wt.throwIfFalsy)(e6.createPattern(f4, null)), a5.set(c5, l5);
                  }
                  e6.fillStyle = l5, e6.fillRect(r5, i5, n5, o5);
                }(e5, c4, i4, n4, o4, s4), true;
              var l4 = t4.boxDrawingDefinitions[r4];
              return !!l4 && (function(e6, t5, r5, i5, n5, o5) {
                e6.strokeStyle = e6.fillStyle;
                for (var s5 = 0, a5 = Object.entries(t5); s5 < a5.length; s5++) {
                  var c5 = a5[s5], l5 = c5[0], h4 = c5[1];
                  e6.beginPath(), e6.lineWidth = window.devicePixelRatio * Number.parseInt(l5);
                  for (var u4 = 0, f4 = (typeof h4 == "function" ? h4(0.15, 0.15 / o5 * n5) : h4).split(" "); u4 < f4.length; u4++) {
                    var _4 = f4[u4], d4 = _4[0], p4 = kt[d4];
                    if (p4) {
                      var v3 = _4.substring(1).split(",");
                      v3[0] && v3[1] && p4(e6, Mt(v3, n5, o5, r5, i5));
                    } else
                      console.error('Could not find drawing instructions for "' + d4 + '"');
                  }
                  e6.stroke(), e6.closePath();
                }
              }(e5, l4, i4, n4, o4, s4), true);
            };
            var Et = /* @__PURE__ */ new Map();
            function xt(e5, t5, r4) {
              return r4 === void 0 && (r4 = 0), Math.max(Math.min(e5, t5), r4);
            }
            var kt = { C: function(e5, t5) {
              return e5.bezierCurveTo(t5[0], t5[1], t5[2], t5[3], t5[4], t5[5]);
            }, L: function(e5, t5) {
              return e5.lineTo(t5[0], t5[1]);
            }, M: function(e5, t5) {
              return e5.moveTo(t5[0], t5[1]);
            } };
            function Mt(e5, t5, r4, i4, n4) {
              var o4 = e5.map(function(e6) {
                return parseFloat(e6) || parseInt(e6);
              });
              if (o4.length < 2)
                throw new Error("Too few arguments for instruction");
              for (var s4 = 0; s4 < o4.length; s4 += 2)
                o4[s4] *= t5, o4[s4] !== 0 && (o4[s4] = xt(Math.round(o4[s4] + 0.5) - 0.5, t5, 0)), o4[s4] += i4;
              for (var a4 = 1; a4 < o4.length; a4 += 2)
                o4[a4] *= r4, o4[a4] !== 0 && (o4[a4] = xt(Math.round(o4[a4] + 0.5) - 0.5, r4, 0)), o4[a4] += n4;
              return o4;
            }
          }, 3700: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.GridCache = void 0;
            var r3 = function() {
              function e5() {
                this.cache = [];
              }
              return e5.prototype.resize = function(e6, t5) {
                for (var r4 = 0; r4 < e6; r4++) {
                  this.cache.length <= r4 && this.cache.push([]);
                  for (var i3 = this.cache[r4].length; i3 < t5; i3++)
                    this.cache[r4].push(void 0);
                  this.cache[r4].length = t5;
                }
                this.cache.length = e6;
              }, e5.prototype.clear = function() {
                for (var e6 = 0; e6 < this.cache.length; e6++)
                  for (var t5 = 0; t5 < this.cache[e6].length; t5++)
                    this.cache[e6][t5] = void 0;
              }, e5;
            }();
            t4.GridCache = r3;
          }, 5098: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.LinkRenderLayer = void 0;
            var a3 = r3(1546), c3 = r3(8803), l3 = r3(2040), h3 = r3(2585), u3 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4, a4, c4) {
                var l4 = e5.call(this, t6, "link", r4, true, i4, n4, a4, c4) || this;
                return o4.onShowLinkUnderline(function(e6) {
                  return l4._onShowLinkUnderline(e6);
                }), o4.onHideLinkUnderline(function(e6) {
                  return l4._onHideLinkUnderline(e6);
                }), s4.onShowLinkUnderline(function(e6) {
                  return l4._onShowLinkUnderline(e6);
                }), s4.onHideLinkUnderline(function(e6) {
                  return l4._onHideLinkUnderline(e6);
                }), l4;
              }
              return n3(t5, e5), t5.prototype.resize = function(t6) {
                e5.prototype.resize.call(this, t6), this._state = void 0;
              }, t5.prototype.reset = function() {
                this._clearCurrentLink();
              }, t5.prototype._clearCurrentLink = function() {
                if (this._state) {
                  this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);
                  var e6 = this._state.y2 - this._state.y1 - 1;
                  e6 > 0 && this._clearCells(0, this._state.y1 + 1, this._state.cols, e6), this._clearCells(0, this._state.y2, this._state.x2, 1), this._state = void 0;
                }
              }, t5.prototype._onShowLinkUnderline = function(e6) {
                if (e6.fg === c3.INVERTED_DEFAULT_COLOR ? this._ctx.fillStyle = this._colors.background.css : e6.fg && (0, l3.is256Color)(e6.fg) ? this._ctx.fillStyle = this._colors.ansi[e6.fg].css : this._ctx.fillStyle = this._colors.foreground.css, e6.y1 === e6.y2)
                  this._fillBottomLineAtCells(e6.x1, e6.y1, e6.x2 - e6.x1);
                else {
                  this._fillBottomLineAtCells(e6.x1, e6.y1, e6.cols - e6.x1);
                  for (var t6 = e6.y1 + 1; t6 < e6.y2; t6++)
                    this._fillBottomLineAtCells(0, t6, e6.cols);
                  this._fillBottomLineAtCells(0, e6.y2, e6.x2);
                }
                this._state = e6;
              }, t5.prototype._onHideLinkUnderline = function(e6) {
                this._clearCurrentLink();
              }, o3([s3(6, h3.IBufferService), s3(7, h3.IOptionsService)], t5);
            }(a3.BaseRenderLayer);
            t4.LinkRenderLayer = u3;
          }, 3525: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.Renderer = void 0;
            var a3 = r3(9596), c3 = r3(4149), l3 = r3(2512), h3 = r3(5098), u3 = r3(844), f3 = r3(4725), _3 = r3(2585), d3 = r3(1420), p3 = r3(8460), v2 = 1, g3 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4, u4, f4) {
                var _4 = e5.call(this) || this;
                _4._colors = t6, _4._screenElement = r4, _4._bufferService = s4, _4._charSizeService = u4, _4._optionsService = f4, _4._id = v2++, _4._onRequestRedraw = new p3.EventEmitter();
                var d4 = _4._optionsService.rawOptions.allowTransparency;
                return _4._renderLayers = [o4.createInstance(a3.TextRenderLayer, _4._screenElement, 0, _4._colors, d4, _4._id), o4.createInstance(c3.SelectionRenderLayer, _4._screenElement, 1, _4._colors, _4._id), o4.createInstance(h3.LinkRenderLayer, _4._screenElement, 2, _4._colors, _4._id, i4, n4), o4.createInstance(l3.CursorRenderLayer, _4._screenElement, 3, _4._colors, _4._id, _4._onRequestRedraw)], _4.dimensions = { scaledCharWidth: 0, scaledCharHeight: 0, scaledCellWidth: 0, scaledCellHeight: 0, scaledCharLeft: 0, scaledCharTop: 0, scaledCanvasWidth: 0, scaledCanvasHeight: 0, canvasWidth: 0, canvasHeight: 0, actualCellWidth: 0, actualCellHeight: 0 }, _4._devicePixelRatio = window.devicePixelRatio, _4._updateDimensions(), _4.onOptionsChanged(), _4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "onRequestRedraw", { get: function() {
                return this._onRequestRedraw.event;
              }, enumerable: false, configurable: true }), t5.prototype.dispose = function() {
                for (var t6 = 0, r4 = this._renderLayers; t6 < r4.length; t6++)
                  r4[t6].dispose();
                e5.prototype.dispose.call(this), (0, d3.removeTerminalFromCache)(this._id);
              }, t5.prototype.onDevicePixelRatioChange = function() {
                this._devicePixelRatio !== window.devicePixelRatio && (this._devicePixelRatio = window.devicePixelRatio, this.onResize(this._bufferService.cols, this._bufferService.rows));
              }, t5.prototype.setColors = function(e6) {
                this._colors = e6;
                for (var t6 = 0, r4 = this._renderLayers; t6 < r4.length; t6++) {
                  var i4 = r4[t6];
                  i4.setColors(this._colors), i4.reset();
                }
              }, t5.prototype.onResize = function(e6, t6) {
                this._updateDimensions();
                for (var r4 = 0, i4 = this._renderLayers; r4 < i4.length; r4++)
                  i4[r4].resize(this.dimensions);
                this._screenElement.style.width = this.dimensions.canvasWidth + "px", this._screenElement.style.height = this.dimensions.canvasHeight + "px";
              }, t5.prototype.onCharSizeChanged = function() {
                this.onResize(this._bufferService.cols, this._bufferService.rows);
              }, t5.prototype.onBlur = function() {
                this._runOperation(function(e6) {
                  return e6.onBlur();
                });
              }, t5.prototype.onFocus = function() {
                this._runOperation(function(e6) {
                  return e6.onFocus();
                });
              }, t5.prototype.onSelectionChanged = function(e6, t6, r4) {
                r4 === void 0 && (r4 = false), this._runOperation(function(i4) {
                  return i4.onSelectionChanged(e6, t6, r4);
                });
              }, t5.prototype.onCursorMove = function() {
                this._runOperation(function(e6) {
                  return e6.onCursorMove();
                });
              }, t5.prototype.onOptionsChanged = function() {
                this._runOperation(function(e6) {
                  return e6.onOptionsChanged();
                });
              }, t5.prototype.clear = function() {
                this._runOperation(function(e6) {
                  return e6.reset();
                });
              }, t5.prototype._runOperation = function(e6) {
                for (var t6 = 0, r4 = this._renderLayers; t6 < r4.length; t6++)
                  e6(r4[t6]);
              }, t5.prototype.renderRows = function(e6, t6) {
                for (var r4 = 0, i4 = this._renderLayers; r4 < i4.length; r4++)
                  i4[r4].onGridChanged(e6, t6);
              }, t5.prototype.clearTextureAtlas = function() {
                for (var e6 = 0, t6 = this._renderLayers; e6 < t6.length; e6++)
                  t6[e6].clearTextureAtlas();
              }, t5.prototype._updateDimensions = function() {
                this._charSizeService.hasValidSize && (this.dimensions.scaledCharWidth = Math.floor(this._charSizeService.width * window.devicePixelRatio), this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio), this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight), this.dimensions.scaledCharTop = this._optionsService.rawOptions.lineHeight === 1 ? 0 : Math.round((this.dimensions.scaledCellHeight - this.dimensions.scaledCharHeight) / 2), this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing), this.dimensions.scaledCharLeft = Math.floor(this._optionsService.rawOptions.letterSpacing / 2), this.dimensions.scaledCanvasHeight = this._bufferService.rows * this.dimensions.scaledCellHeight, this.dimensions.scaledCanvasWidth = this._bufferService.cols * this.dimensions.scaledCellWidth, this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio), this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio), this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows, this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols);
              }, o3([s3(4, _3.IInstantiationService), s3(5, _3.IBufferService), s3(6, f3.ICharSizeService), s3(7, _3.IOptionsService)], t5);
            }(u3.Disposable);
            t4.Renderer = g3;
          }, 1752: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.throwIfFalsy = void 0, t4.throwIfFalsy = function(e5) {
              if (!e5)
                throw new Error("value must not be falsy");
              return e5;
            };
          }, 4149: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.SelectionRenderLayer = void 0;
            var a3 = r3(1546), c3 = r3(2585), l3 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4) {
                var a4 = e5.call(this, t6, "selection", r4, true, i4, n4, o4, s4) || this;
                return a4._clearState(), a4;
              }
              return n3(t5, e5), t5.prototype._clearState = function() {
                this._state = { start: void 0, end: void 0, columnSelectMode: void 0, ydisp: void 0 };
              }, t5.prototype.resize = function(t6) {
                e5.prototype.resize.call(this, t6), this._clearState();
              }, t5.prototype.reset = function() {
                this._state.start && this._state.end && (this._clearState(), this._clearAll());
              }, t5.prototype.onSelectionChanged = function(e6, t6, r4) {
                if (this._didStateChange(e6, t6, r4, this._bufferService.buffer.ydisp))
                  if (this._clearAll(), e6 && t6) {
                    var i4 = e6[1] - this._bufferService.buffer.ydisp, n4 = t6[1] - this._bufferService.buffer.ydisp, o4 = Math.max(i4, 0), s4 = Math.min(n4, this._bufferService.rows - 1);
                    if (o4 >= this._bufferService.rows || s4 < 0)
                      this._state.ydisp = this._bufferService.buffer.ydisp;
                    else {
                      if (this._ctx.fillStyle = this._colors.selectionTransparent.css, r4) {
                        var a4 = e6[0], c4 = t6[0] - a4, l4 = s4 - o4 + 1;
                        this._fillCells(a4, o4, c4, l4);
                      } else {
                        a4 = i4 === o4 ? e6[0] : 0;
                        var h3 = o4 === n4 ? t6[0] : this._bufferService.cols;
                        this._fillCells(a4, o4, h3 - a4, 1);
                        var u3 = Math.max(s4 - o4 - 1, 0);
                        if (this._fillCells(0, o4 + 1, this._bufferService.cols, u3), o4 !== s4) {
                          var f3 = n4 === s4 ? t6[0] : this._bufferService.cols;
                          this._fillCells(0, s4, f3, 1);
                        }
                      }
                      this._state.start = [e6[0], e6[1]], this._state.end = [t6[0], t6[1]], this._state.columnSelectMode = r4, this._state.ydisp = this._bufferService.buffer.ydisp;
                    }
                  } else
                    this._clearState();
              }, t5.prototype._didStateChange = function(e6, t6, r4, i4) {
                return !this._areCoordinatesEqual(e6, this._state.start) || !this._areCoordinatesEqual(t6, this._state.end) || r4 !== this._state.columnSelectMode || i4 !== this._state.ydisp;
              }, t5.prototype._areCoordinatesEqual = function(e6, t6) {
                return !(!e6 || !t6) && e6[0] === t6[0] && e6[1] === t6[1];
              }, o3([s3(4, c3.IBufferService), s3(5, c3.IOptionsService)], t5);
            }(a3.BaseRenderLayer);
            t4.SelectionRenderLayer = l3;
          }, 9596: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.TextRenderLayer = void 0;
            var a3 = r3(3700), c3 = r3(1546), l3 = r3(3734), h3 = r3(643), u3 = r3(511), f3 = r3(2585), _3 = r3(4725), d3 = r3(4269), p3 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4, c4, l4) {
                var h4 = e5.call(this, t6, "text", r4, n4, i4, o4, s4, c4) || this;
                return h4._characterJoinerService = l4, h4._characterWidth = 0, h4._characterFont = "", h4._characterOverlapCache = {}, h4._workCell = new u3.CellData(), h4._state = new a3.GridCache(), h4;
              }
              return n3(t5, e5), t5.prototype.resize = function(t6) {
                e5.prototype.resize.call(this, t6);
                var r4 = this._getFont(false, false);
                this._characterWidth === t6.scaledCharWidth && this._characterFont === r4 || (this._characterWidth = t6.scaledCharWidth, this._characterFont = r4, this._characterOverlapCache = {}), this._state.clear(), this._state.resize(this._bufferService.cols, this._bufferService.rows);
              }, t5.prototype.reset = function() {
                this._state.clear(), this._clearAll();
              }, t5.prototype._forEachCell = function(e6, t6, r4) {
                for (var i4 = e6; i4 <= t6; i4++)
                  for (var n4 = i4 + this._bufferService.buffer.ydisp, o4 = this._bufferService.buffer.lines.get(n4), s4 = this._characterJoinerService.getJoinedCharacters(n4), a4 = 0; a4 < this._bufferService.cols; a4++) {
                    o4.loadCell(a4, this._workCell);
                    var c4 = this._workCell, l4 = false, u4 = a4;
                    if (c4.getWidth() !== 0) {
                      if (s4.length > 0 && a4 === s4[0][0]) {
                        l4 = true;
                        var f4 = s4.shift();
                        c4 = new d3.JoinedCellData(this._workCell, o4.translateToString(true, f4[0], f4[1]), f4[1] - f4[0]), u4 = f4[1] - 1;
                      }
                      !l4 && this._isOverlapping(c4) && u4 < o4.length - 1 && o4.getCodePoint(u4 + 1) === h3.NULL_CELL_CODE && (c4.content &= -12582913, c4.content |= 2 << 22), r4(c4, a4, i4), a4 = u4;
                    }
                  }
              }, t5.prototype._drawBackground = function(e6, t6) {
                var r4 = this, i4 = this._ctx, n4 = this._bufferService.cols, o4 = 0, s4 = 0, a4 = null;
                i4.save(), this._forEachCell(e6, t6, function(e7, t7, c4) {
                  var h4 = null;
                  e7.isInverse() ? h4 = e7.isFgDefault() ? r4._colors.foreground.css : e7.isFgRGB() ? "rgb(" + l3.AttributeData.toColorRGB(e7.getFgColor()).join(",") + ")" : r4._colors.ansi[e7.getFgColor()].css : e7.isBgRGB() ? h4 = "rgb(" + l3.AttributeData.toColorRGB(e7.getBgColor()).join(",") + ")" : e7.isBgPalette() && (h4 = r4._colors.ansi[e7.getBgColor()].css), a4 === null && (o4 = t7, s4 = c4), c4 !== s4 ? (i4.fillStyle = a4 || "", r4._fillCells(o4, s4, n4 - o4, 1), o4 = t7, s4 = c4) : a4 !== h4 && (i4.fillStyle = a4 || "", r4._fillCells(o4, s4, t7 - o4, 1), o4 = t7, s4 = c4), a4 = h4;
                }), a4 !== null && (i4.fillStyle = a4, this._fillCells(o4, s4, n4 - o4, 1)), i4.restore();
              }, t5.prototype._drawForeground = function(e6, t6) {
                var r4 = this;
                this._forEachCell(e6, t6, function(e7, t7, i4) {
                  if (!e7.isInvisible() && (r4._drawChars(e7, t7, i4), e7.isUnderline() || e7.isStrikethrough())) {
                    if (r4._ctx.save(), e7.isInverse())
                      if (e7.isBgDefault())
                        r4._ctx.fillStyle = r4._colors.background.css;
                      else if (e7.isBgRGB())
                        r4._ctx.fillStyle = "rgb(" + l3.AttributeData.toColorRGB(e7.getBgColor()).join(",") + ")";
                      else {
                        var n4 = e7.getBgColor();
                        r4._optionsService.rawOptions.drawBoldTextInBrightColors && e7.isBold() && n4 < 8 && (n4 += 8), r4._ctx.fillStyle = r4._colors.ansi[n4].css;
                      }
                    else if (e7.isFgDefault())
                      r4._ctx.fillStyle = r4._colors.foreground.css;
                    else if (e7.isFgRGB())
                      r4._ctx.fillStyle = "rgb(" + l3.AttributeData.toColorRGB(e7.getFgColor()).join(",") + ")";
                    else {
                      var o4 = e7.getFgColor();
                      r4._optionsService.rawOptions.drawBoldTextInBrightColors && e7.isBold() && o4 < 8 && (o4 += 8), r4._ctx.fillStyle = r4._colors.ansi[o4].css;
                    }
                    e7.isStrikethrough() && r4._fillMiddleLineAtCells(t7, i4, e7.getWidth()), e7.isUnderline() && r4._fillBottomLineAtCells(t7, i4, e7.getWidth()), r4._ctx.restore();
                  }
                });
              }, t5.prototype.onGridChanged = function(e6, t6) {
                this._state.cache.length !== 0 && (this._charAtlas && this._charAtlas.beginFrame(), this._clearCells(0, e6, this._bufferService.cols, t6 - e6 + 1), this._drawBackground(e6, t6), this._drawForeground(e6, t6));
              }, t5.prototype.onOptionsChanged = function() {
                this._setTransparency(this._optionsService.rawOptions.allowTransparency);
              }, t5.prototype._isOverlapping = function(e6) {
                if (e6.getWidth() !== 1)
                  return false;
                if (e6.getCode() < 256)
                  return false;
                var t6 = e6.getChars();
                if (this._characterOverlapCache.hasOwnProperty(t6))
                  return this._characterOverlapCache[t6];
                this._ctx.save(), this._ctx.font = this._characterFont;
                var r4 = Math.floor(this._ctx.measureText(t6).width) > this._characterWidth;
                return this._ctx.restore(), this._characterOverlapCache[t6] = r4, r4;
              }, o3([s3(5, f3.IBufferService), s3(6, f3.IOptionsService), s3(7, _3.ICharacterJoinerService)], t5);
            }(c3.BaseRenderLayer);
            t4.TextRenderLayer = p3;
          }, 9616: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.BaseCharAtlas = void 0;
            var r3 = function() {
              function e5() {
                this._didWarmUp = false;
              }
              return e5.prototype.dispose = function() {
              }, e5.prototype.warmUp = function() {
                this._didWarmUp || (this._doWarmUp(), this._didWarmUp = true);
              }, e5.prototype._doWarmUp = function() {
              }, e5.prototype.clear = function() {
              }, e5.prototype.beginFrame = function() {
              }, e5;
            }();
            t4.BaseCharAtlas = r3;
          }, 1420: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.removeTerminalFromCache = t4.acquireCharAtlas = void 0;
            var i3 = r3(2040), n3 = r3(1906), o3 = [];
            t4.acquireCharAtlas = function(e5, t5, r4, s3, a3) {
              for (var c3 = (0, i3.generateConfig)(s3, a3, e5, r4), l3 = 0; l3 < o3.length; l3++) {
                var h3 = (u3 = o3[l3]).ownedBy.indexOf(t5);
                if (h3 >= 0) {
                  if ((0, i3.configEquals)(u3.config, c3))
                    return u3.atlas;
                  u3.ownedBy.length === 1 ? (u3.atlas.dispose(), o3.splice(l3, 1)) : u3.ownedBy.splice(h3, 1);
                  break;
                }
              }
              for (l3 = 0; l3 < o3.length; l3++) {
                var u3 = o3[l3];
                if ((0, i3.configEquals)(u3.config, c3))
                  return u3.ownedBy.push(t5), u3.atlas;
              }
              var f3 = { atlas: new n3.DynamicCharAtlas(document, c3), config: c3, ownedBy: [t5] };
              return o3.push(f3), f3.atlas;
            }, t4.removeTerminalFromCache = function(e5) {
              for (var t5 = 0; t5 < o3.length; t5++) {
                var r4 = o3[t5].ownedBy.indexOf(e5);
                if (r4 !== -1) {
                  o3[t5].ownedBy.length === 1 ? (o3[t5].atlas.dispose(), o3.splice(t5, 1)) : o3[t5].ownedBy.splice(r4, 1);
                  break;
                }
              }
            };
          }, 2040: function(e4, t4, r3) {
            var i3 = this && this.__spreadArray || function(e5, t5, r4) {
              if (r4 || arguments.length === 2)
                for (var i4, n4 = 0, o3 = t5.length; n4 < o3; n4++)
                  !i4 && n4 in t5 || (i4 || (i4 = Array.prototype.slice.call(t5, 0, n4)), i4[n4] = t5[n4]);
              return e5.concat(i4 || Array.prototype.slice.call(t5));
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.is256Color = t4.configEquals = t4.generateConfig = void 0;
            var n3 = r3(643);
            t4.generateConfig = function(e5, t5, r4, n4) {
              var o3 = { foreground: n4.foreground, background: n4.background, cursor: void 0, cursorAccent: void 0, selection: void 0, ansi: i3([], n4.ansi, true) };
              return { devicePixelRatio: window.devicePixelRatio, scaledCharWidth: e5, scaledCharHeight: t5, fontFamily: r4.fontFamily, fontSize: r4.fontSize, fontWeight: r4.fontWeight, fontWeightBold: r4.fontWeightBold, allowTransparency: r4.allowTransparency, colors: o3 };
            }, t4.configEquals = function(e5, t5) {
              for (var r4 = 0; r4 < e5.colors.ansi.length; r4++)
                if (e5.colors.ansi[r4].rgba !== t5.colors.ansi[r4].rgba)
                  return false;
              return e5.devicePixelRatio === t5.devicePixelRatio && e5.fontFamily === t5.fontFamily && e5.fontSize === t5.fontSize && e5.fontWeight === t5.fontWeight && e5.fontWeightBold === t5.fontWeightBold && e5.allowTransparency === t5.allowTransparency && e5.scaledCharWidth === t5.scaledCharWidth && e5.scaledCharHeight === t5.scaledCharHeight && e5.colors.foreground === t5.colors.foreground && e5.colors.background === t5.colors.background;
            }, t4.is256Color = function(e5) {
              return e5 < n3.DEFAULT_COLOR;
            };
          }, 8803: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CHAR_ATLAS_CELL_SPACING = t4.TEXT_BASELINE = t4.DIM_OPACITY = t4.INVERTED_DEFAULT_COLOR = void 0;
            var i3 = r3(6114);
            t4.INVERTED_DEFAULT_COLOR = 257, t4.DIM_OPACITY = 0.5, t4.TEXT_BASELINE = i3.isFirefox || i3.isLegacyEdge ? "bottom" : "ideographic", t4.CHAR_ATLAS_CELL_SPACING = 1;
          }, 1906: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.NoneCharAtlas = t4.DynamicCharAtlas = t4.getGlyphCacheKey = void 0;
            var o3 = r3(8803), s3 = r3(9616), a3 = r3(5680), c3 = r3(7001), l3 = r3(6114), h3 = r3(1752), u3 = r3(4774), f3 = 1024, _3 = 1024, d3 = { css: "rgba(0, 0, 0, 0)", rgba: 0 };
            function p3(e5) {
              return e5.code << 21 | e5.bg << 12 | e5.fg << 3 | (e5.bold ? 0 : 4) + (e5.dim ? 0 : 2) + (e5.italic ? 0 : 1);
            }
            t4.getGlyphCacheKey = p3;
            var v2 = function(e5) {
              function t5(t6, r4) {
                var i4 = e5.call(this) || this;
                i4._config = r4, i4._drawToCacheCount = 0, i4._glyphsWaitingOnBitmap = [], i4._bitmapCommitTimeout = null, i4._bitmap = null, i4._cacheCanvas = t6.createElement("canvas"), i4._cacheCanvas.width = f3, i4._cacheCanvas.height = _3, i4._cacheCtx = (0, h3.throwIfFalsy)(i4._cacheCanvas.getContext("2d", { alpha: true }));
                var n4 = t6.createElement("canvas");
                n4.width = i4._config.scaledCharWidth, n4.height = i4._config.scaledCharHeight, i4._tmpCtx = (0, h3.throwIfFalsy)(n4.getContext("2d", { alpha: i4._config.allowTransparency })), i4._width = Math.floor(f3 / i4._config.scaledCharWidth), i4._height = Math.floor(_3 / i4._config.scaledCharHeight);
                var o4 = i4._width * i4._height;
                return i4._cacheMap = new c3.LRUMap(o4), i4._cacheMap.prealloc(o4), i4;
              }
              return n3(t5, e5), t5.prototype.dispose = function() {
                this._bitmapCommitTimeout !== null && (window.clearTimeout(this._bitmapCommitTimeout), this._bitmapCommitTimeout = null);
              }, t5.prototype.beginFrame = function() {
                this._drawToCacheCount = 0;
              }, t5.prototype.clear = function() {
                if (this._cacheMap.size > 0) {
                  var e6 = this._width * this._height;
                  this._cacheMap = new c3.LRUMap(e6), this._cacheMap.prealloc(e6);
                }
                this._cacheCtx.clearRect(0, 0, f3, _3), this._tmpCtx.clearRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight);
              }, t5.prototype.draw = function(e6, t6, r4, i4) {
                if (t6.code === 32)
                  return true;
                if (!this._canCache(t6))
                  return false;
                var n4 = p3(t6), o4 = this._cacheMap.get(n4);
                if (o4 != null)
                  return this._drawFromCache(e6, o4, r4, i4), true;
                if (this._drawToCacheCount < 100) {
                  var s4;
                  s4 = this._cacheMap.size < this._cacheMap.capacity ? this._cacheMap.size : this._cacheMap.peek().index;
                  var a4 = this._drawToCache(t6, s4);
                  return this._cacheMap.set(n4, a4), this._drawFromCache(e6, a4, r4, i4), true;
                }
                return false;
              }, t5.prototype._canCache = function(e6) {
                return e6.code < 256;
              }, t5.prototype._toCoordinateX = function(e6) {
                return e6 % this._width * this._config.scaledCharWidth;
              }, t5.prototype._toCoordinateY = function(e6) {
                return Math.floor(e6 / this._width) * this._config.scaledCharHeight;
              }, t5.prototype._drawFromCache = function(e6, t6, r4, i4) {
                if (!t6.isEmpty) {
                  var n4 = this._toCoordinateX(t6.index), o4 = this._toCoordinateY(t6.index);
                  e6.drawImage(t6.inBitmap ? this._bitmap : this._cacheCanvas, n4, o4, this._config.scaledCharWidth, this._config.scaledCharHeight, r4, i4, this._config.scaledCharWidth, this._config.scaledCharHeight);
                }
              }, t5.prototype._getColorFromAnsiIndex = function(e6) {
                return e6 < this._config.colors.ansi.length ? this._config.colors.ansi[e6] : a3.DEFAULT_ANSI_COLORS[e6];
              }, t5.prototype._getBackgroundColor = function(e6) {
                return this._config.allowTransparency ? d3 : e6.bg === o3.INVERTED_DEFAULT_COLOR ? this._config.colors.foreground : e6.bg < 256 ? this._getColorFromAnsiIndex(e6.bg) : this._config.colors.background;
              }, t5.prototype._getForegroundColor = function(e6) {
                return e6.fg === o3.INVERTED_DEFAULT_COLOR ? u3.color.opaque(this._config.colors.background) : e6.fg < 256 ? this._getColorFromAnsiIndex(e6.fg) : this._config.colors.foreground;
              }, t5.prototype._drawToCache = function(e6, t6) {
                this._drawToCacheCount++, this._tmpCtx.save();
                var r4 = this._getBackgroundColor(e6);
                this._tmpCtx.globalCompositeOperation = "copy", this._tmpCtx.fillStyle = r4.css, this._tmpCtx.fillRect(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight), this._tmpCtx.globalCompositeOperation = "source-over";
                var i4 = e6.bold ? this._config.fontWeightBold : this._config.fontWeight, n4 = e6.italic ? "italic" : "";
                this._tmpCtx.font = n4 + " " + i4 + " " + this._config.fontSize * this._config.devicePixelRatio + "px " + this._config.fontFamily, this._tmpCtx.textBaseline = o3.TEXT_BASELINE, this._tmpCtx.fillStyle = this._getForegroundColor(e6).css, e6.dim && (this._tmpCtx.globalAlpha = o3.DIM_OPACITY), this._tmpCtx.fillText(e6.chars, 0, this._config.scaledCharHeight);
                var s4 = this._tmpCtx.getImageData(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight), a4 = false;
                if (this._config.allowTransparency || (a4 = y3(s4, r4)), a4 && e6.chars === "_" && !this._config.allowTransparency)
                  for (var c4 = 1; c4 <= 5 && (this._tmpCtx.fillText(e6.chars, 0, this._config.scaledCharHeight - c4), a4 = y3(s4 = this._tmpCtx.getImageData(0, 0, this._config.scaledCharWidth, this._config.scaledCharHeight), r4)); c4++)
                    ;
                this._tmpCtx.restore();
                var l4 = this._toCoordinateX(t6), h4 = this._toCoordinateY(t6);
                this._cacheCtx.putImageData(s4, l4, h4);
                var u4 = { index: t6, isEmpty: a4, inBitmap: false };
                return this._addGlyphToBitmap(u4), u4;
              }, t5.prototype._addGlyphToBitmap = function(e6) {
                var t6 = this;
                !("createImageBitmap" in window) || l3.isFirefox || l3.isSafari || (this._glyphsWaitingOnBitmap.push(e6), this._bitmapCommitTimeout === null && (this._bitmapCommitTimeout = window.setTimeout(function() {
                  return t6._generateBitmap();
                }, 100)));
              }, t5.prototype._generateBitmap = function() {
                var e6 = this, t6 = this._glyphsWaitingOnBitmap;
                this._glyphsWaitingOnBitmap = [], window.createImageBitmap(this._cacheCanvas).then(function(r4) {
                  e6._bitmap = r4;
                  for (var i4 = 0; i4 < t6.length; i4++)
                    t6[i4].inBitmap = true;
                }), this._bitmapCommitTimeout = null;
              }, t5;
            }(s3.BaseCharAtlas);
            t4.DynamicCharAtlas = v2;
            var g3 = function(e5) {
              function t5(t6, r4) {
                return e5.call(this) || this;
              }
              return n3(t5, e5), t5.prototype.draw = function(e6, t6, r4, i4) {
                return false;
              }, t5;
            }(s3.BaseCharAtlas);
            function y3(e5, t5) {
              for (var r4 = true, i4 = t5.rgba >>> 24, n4 = t5.rgba >>> 16 & 255, o4 = t5.rgba >>> 8 & 255, s4 = 0; s4 < e5.data.length; s4 += 4)
                e5.data[s4] === i4 && e5.data[s4 + 1] === n4 && e5.data[s4 + 2] === o4 ? e5.data[s4 + 3] = 0 : r4 = false;
              return r4;
            }
            t4.NoneCharAtlas = g3;
          }, 7001: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.LRUMap = void 0;
            var r3 = function() {
              function e5(e6) {
                this.capacity = e6, this._map = {}, this._head = null, this._tail = null, this._nodePool = [], this.size = 0;
              }
              return e5.prototype._unlinkNode = function(e6) {
                var t5 = e6.prev, r4 = e6.next;
                e6 === this._head && (this._head = r4), e6 === this._tail && (this._tail = t5), t5 !== null && (t5.next = r4), r4 !== null && (r4.prev = t5);
              }, e5.prototype._appendNode = function(e6) {
                var t5 = this._tail;
                t5 !== null && (t5.next = e6), e6.prev = t5, e6.next = null, this._tail = e6, this._head === null && (this._head = e6);
              }, e5.prototype.prealloc = function(e6) {
                for (var t5 = this._nodePool, r4 = 0; r4 < e6; r4++)
                  t5.push({ prev: null, next: null, key: null, value: null });
              }, e5.prototype.get = function(e6) {
                var t5 = this._map[e6];
                return t5 !== void 0 ? (this._unlinkNode(t5), this._appendNode(t5), t5.value) : null;
              }, e5.prototype.peekValue = function(e6) {
                var t5 = this._map[e6];
                return t5 !== void 0 ? t5.value : null;
              }, e5.prototype.peek = function() {
                var e6 = this._head;
                return e6 === null ? null : e6.value;
              }, e5.prototype.set = function(e6, t5) {
                var r4 = this._map[e6];
                if (r4 !== void 0)
                  r4 = this._map[e6], this._unlinkNode(r4), r4.value = t5;
                else if (this.size >= this.capacity)
                  r4 = this._head, this._unlinkNode(r4), delete this._map[r4.key], r4.key = e6, r4.value = t5, this._map[e6] = r4;
                else {
                  var i3 = this._nodePool;
                  i3.length > 0 ? ((r4 = i3.pop()).key = e6, r4.value = t5) : r4 = { prev: null, next: null, key: e6, value: t5 }, this._map[e6] = r4, this.size++;
                }
                this._appendNode(r4);
              }, e5;
            }();
            t4.LRUMap = r3;
          }, 1296: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.DomRenderer = void 0;
            var a3 = r3(3787), c3 = r3(8803), l3 = r3(844), h3 = r3(4725), u3 = r3(2585), f3 = r3(8460), _3 = r3(4774), d3 = r3(9631), p3 = "xterm-dom-renderer-owner-", v2 = "xterm-fg-", g3 = "xterm-bg-", y3 = "xterm-focus", m2 = 1, S2 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4, c4, l4, h4, u4) {
                var f4 = e5.call(this) || this;
                return f4._colors = t6, f4._element = r4, f4._screenElement = i4, f4._viewportElement = n4, f4._linkifier = o4, f4._linkifier2 = s4, f4._charSizeService = l4, f4._optionsService = h4, f4._bufferService = u4, f4._terminalClass = m2++, f4._rowElements = [], f4._rowContainer = document.createElement("div"), f4._rowContainer.classList.add("xterm-rows"), f4._rowContainer.style.lineHeight = "normal", f4._rowContainer.setAttribute("aria-hidden", "true"), f4._refreshRowElements(f4._bufferService.cols, f4._bufferService.rows), f4._selectionContainer = document.createElement("div"), f4._selectionContainer.classList.add("xterm-selection"), f4._selectionContainer.setAttribute("aria-hidden", "true"), f4.dimensions = { scaledCharWidth: 0, scaledCharHeight: 0, scaledCellWidth: 0, scaledCellHeight: 0, scaledCharLeft: 0, scaledCharTop: 0, scaledCanvasWidth: 0, scaledCanvasHeight: 0, canvasWidth: 0, canvasHeight: 0, actualCellWidth: 0, actualCellHeight: 0 }, f4._updateDimensions(), f4._injectCss(), f4._rowFactory = c4.createInstance(a3.DomRendererRowFactory, document, f4._colors), f4._element.classList.add(p3 + f4._terminalClass), f4._screenElement.appendChild(f4._rowContainer), f4._screenElement.appendChild(f4._selectionContainer), f4._linkifier.onShowLinkUnderline(function(e6) {
                  return f4._onLinkHover(e6);
                }), f4._linkifier.onHideLinkUnderline(function(e6) {
                  return f4._onLinkLeave(e6);
                }), f4._linkifier2.onShowLinkUnderline(function(e6) {
                  return f4._onLinkHover(e6);
                }), f4._linkifier2.onHideLinkUnderline(function(e6) {
                  return f4._onLinkLeave(e6);
                }), f4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "onRequestRedraw", { get: function() {
                return new f3.EventEmitter().event;
              }, enumerable: false, configurable: true }), t5.prototype.dispose = function() {
                this._element.classList.remove(p3 + this._terminalClass), (0, d3.removeElementFromParent)(this._rowContainer, this._selectionContainer, this._themeStyleElement, this._dimensionsStyleElement), e5.prototype.dispose.call(this);
              }, t5.prototype._updateDimensions = function() {
                this.dimensions.scaledCharWidth = this._charSizeService.width * window.devicePixelRatio, this.dimensions.scaledCharHeight = Math.ceil(this._charSizeService.height * window.devicePixelRatio), this.dimensions.scaledCellWidth = this.dimensions.scaledCharWidth + Math.round(this._optionsService.rawOptions.letterSpacing), this.dimensions.scaledCellHeight = Math.floor(this.dimensions.scaledCharHeight * this._optionsService.rawOptions.lineHeight), this.dimensions.scaledCharLeft = 0, this.dimensions.scaledCharTop = 0, this.dimensions.scaledCanvasWidth = this.dimensions.scaledCellWidth * this._bufferService.cols, this.dimensions.scaledCanvasHeight = this.dimensions.scaledCellHeight * this._bufferService.rows, this.dimensions.canvasWidth = Math.round(this.dimensions.scaledCanvasWidth / window.devicePixelRatio), this.dimensions.canvasHeight = Math.round(this.dimensions.scaledCanvasHeight / window.devicePixelRatio), this.dimensions.actualCellWidth = this.dimensions.canvasWidth / this._bufferService.cols, this.dimensions.actualCellHeight = this.dimensions.canvasHeight / this._bufferService.rows;
                for (var e6 = 0, t6 = this._rowElements; e6 < t6.length; e6++) {
                  var r4 = t6[e6];
                  r4.style.width = this.dimensions.canvasWidth + "px", r4.style.height = this.dimensions.actualCellHeight + "px", r4.style.lineHeight = this.dimensions.actualCellHeight + "px", r4.style.overflow = "hidden";
                }
                this._dimensionsStyleElement || (this._dimensionsStyleElement = document.createElement("style"), this._screenElement.appendChild(this._dimensionsStyleElement));
                var i4 = this._terminalSelector + " .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: " + this.dimensions.actualCellWidth + "px}";
                this._dimensionsStyleElement.textContent = i4, this._selectionContainer.style.height = this._viewportElement.style.height, this._screenElement.style.width = this.dimensions.canvasWidth + "px", this._screenElement.style.height = this.dimensions.canvasHeight + "px";
              }, t5.prototype.setColors = function(e6) {
                this._colors = e6, this._injectCss();
              }, t5.prototype._injectCss = function() {
                var e6 = this;
                this._themeStyleElement || (this._themeStyleElement = document.createElement("style"), this._screenElement.appendChild(this._themeStyleElement));
                var t6 = this._terminalSelector + " .xterm-rows { color: " + this._colors.foreground.css + "; font-family: " + this._optionsService.rawOptions.fontFamily + "; font-size: " + this._optionsService.rawOptions.fontSize + "px;}";
                t6 += this._terminalSelector + " span:not(." + a3.BOLD_CLASS + ") { font-weight: " + this._optionsService.rawOptions.fontWeight + ";}" + this._terminalSelector + " span." + a3.BOLD_CLASS + " { font-weight: " + this._optionsService.rawOptions.fontWeightBold + ";}" + this._terminalSelector + " span." + a3.ITALIC_CLASS + " { font-style: italic;}", t6 += "@keyframes blink_box_shadow_" + this._terminalClass + " { 50% {  box-shadow: none; }}", t6 += "@keyframes blink_block_" + this._terminalClass + " { 0% {  background-color: " + this._colors.cursor.css + ";  color: " + this._colors.cursorAccent.css + "; } 50% {  background-color: " + this._colors.cursorAccent.css + ";  color: " + this._colors.cursor.css + "; }}", t6 += this._terminalSelector + " .xterm-rows:not(.xterm-focus) ." + a3.CURSOR_CLASS + "." + a3.CURSOR_STYLE_BLOCK_CLASS + " { outline: 1px solid " + this._colors.cursor.css + "; outline-offset: -1px;}" + this._terminalSelector + " .xterm-rows.xterm-focus ." + a3.CURSOR_CLASS + "." + a3.CURSOR_BLINK_CLASS + ":not(." + a3.CURSOR_STYLE_BLOCK_CLASS + ") { animation: blink_box_shadow_" + this._terminalClass + " 1s step-end infinite;}" + this._terminalSelector + " .xterm-rows.xterm-focus ." + a3.CURSOR_CLASS + "." + a3.CURSOR_BLINK_CLASS + "." + a3.CURSOR_STYLE_BLOCK_CLASS + " { animation: blink_block_" + this._terminalClass + " 1s step-end infinite;}" + this._terminalSelector + " .xterm-rows.xterm-focus ." + a3.CURSOR_CLASS + "." + a3.CURSOR_STYLE_BLOCK_CLASS + " { background-color: " + this._colors.cursor.css + "; color: " + this._colors.cursorAccent.css + ";}" + this._terminalSelector + " .xterm-rows ." + a3.CURSOR_CLASS + "." + a3.CURSOR_STYLE_BAR_CLASS + " { box-shadow: " + this._optionsService.rawOptions.cursorWidth + "px 0 0 " + this._colors.cursor.css + " inset;}" + this._terminalSelector + " .xterm-rows ." + a3.CURSOR_CLASS + "." + a3.CURSOR_STYLE_UNDERLINE_CLASS + " { box-shadow: 0 -1px 0 " + this._colors.cursor.css + " inset;}", t6 += this._terminalSelector + " .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}" + this._terminalSelector + " .xterm-selection div { position: absolute; background-color: " + this._colors.selectionTransparent.css + ";}", this._colors.ansi.forEach(function(r4, i4) {
                  t6 += e6._terminalSelector + " ." + v2 + i4 + " { color: " + r4.css + "; }" + e6._terminalSelector + " ." + g3 + i4 + " { background-color: " + r4.css + "; }";
                }), t6 += this._terminalSelector + " ." + v2 + c3.INVERTED_DEFAULT_COLOR + " { color: " + _3.color.opaque(this._colors.background).css + "; }" + this._terminalSelector + " ." + g3 + c3.INVERTED_DEFAULT_COLOR + " { background-color: " + this._colors.foreground.css + "; }", this._themeStyleElement.textContent = t6;
              }, t5.prototype.onDevicePixelRatioChange = function() {
                this._updateDimensions();
              }, t5.prototype._refreshRowElements = function(e6, t6) {
                for (var r4 = this._rowElements.length; r4 <= t6; r4++) {
                  var i4 = document.createElement("div");
                  this._rowContainer.appendChild(i4), this._rowElements.push(i4);
                }
                for (; this._rowElements.length > t6; )
                  this._rowContainer.removeChild(this._rowElements.pop());
              }, t5.prototype.onResize = function(e6, t6) {
                this._refreshRowElements(e6, t6), this._updateDimensions();
              }, t5.prototype.onCharSizeChanged = function() {
                this._updateDimensions();
              }, t5.prototype.onBlur = function() {
                this._rowContainer.classList.remove(y3);
              }, t5.prototype.onFocus = function() {
                this._rowContainer.classList.add(y3);
              }, t5.prototype.onSelectionChanged = function(e6, t6, r4) {
                for (; this._selectionContainer.children.length; )
                  this._selectionContainer.removeChild(this._selectionContainer.children[0]);
                if (e6 && t6) {
                  var i4 = e6[1] - this._bufferService.buffer.ydisp, n4 = t6[1] - this._bufferService.buffer.ydisp, o4 = Math.max(i4, 0), s4 = Math.min(n4, this._bufferService.rows - 1);
                  if (!(o4 >= this._bufferService.rows || s4 < 0)) {
                    var a4 = document.createDocumentFragment();
                    if (r4)
                      a4.appendChild(this._createSelectionElement(o4, e6[0], t6[0], s4 - o4 + 1));
                    else {
                      var c4 = i4 === o4 ? e6[0] : 0, l4 = o4 === n4 ? t6[0] : this._bufferService.cols;
                      a4.appendChild(this._createSelectionElement(o4, c4, l4));
                      var h4 = s4 - o4 - 1;
                      if (a4.appendChild(this._createSelectionElement(o4 + 1, 0, this._bufferService.cols, h4)), o4 !== s4) {
                        var u4 = n4 === s4 ? t6[0] : this._bufferService.cols;
                        a4.appendChild(this._createSelectionElement(s4, 0, u4));
                      }
                    }
                    this._selectionContainer.appendChild(a4);
                  }
                }
              }, t5.prototype._createSelectionElement = function(e6, t6, r4, i4) {
                i4 === void 0 && (i4 = 1);
                var n4 = document.createElement("div");
                return n4.style.height = i4 * this.dimensions.actualCellHeight + "px", n4.style.top = e6 * this.dimensions.actualCellHeight + "px", n4.style.left = t6 * this.dimensions.actualCellWidth + "px", n4.style.width = this.dimensions.actualCellWidth * (r4 - t6) + "px", n4;
              }, t5.prototype.onCursorMove = function() {
              }, t5.prototype.onOptionsChanged = function() {
                this._updateDimensions(), this._injectCss();
              }, t5.prototype.clear = function() {
                for (var e6 = 0, t6 = this._rowElements; e6 < t6.length; e6++)
                  t6[e6].innerText = "";
              }, t5.prototype.renderRows = function(e6, t6) {
                for (var r4 = this._bufferService.buffer.ybase + this._bufferService.buffer.y, i4 = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1), n4 = this._optionsService.rawOptions.cursorBlink, o4 = e6; o4 <= t6; o4++) {
                  var s4 = this._rowElements[o4];
                  s4.innerText = "";
                  var a4 = o4 + this._bufferService.buffer.ydisp, c4 = this._bufferService.buffer.lines.get(a4), l4 = this._optionsService.rawOptions.cursorStyle;
                  s4.appendChild(this._rowFactory.createRow(c4, a4, a4 === r4, l4, i4, n4, this.dimensions.actualCellWidth, this._bufferService.cols));
                }
              }, Object.defineProperty(t5.prototype, "_terminalSelector", { get: function() {
                return "." + p3 + this._terminalClass;
              }, enumerable: false, configurable: true }), t5.prototype._onLinkHover = function(e6) {
                this._setCellUnderline(e6.x1, e6.x2, e6.y1, e6.y2, e6.cols, true);
              }, t5.prototype._onLinkLeave = function(e6) {
                this._setCellUnderline(e6.x1, e6.x2, e6.y1, e6.y2, e6.cols, false);
              }, t5.prototype._setCellUnderline = function(e6, t6, r4, i4, n4, o4) {
                for (; e6 !== t6 || r4 !== i4; ) {
                  var s4 = this._rowElements[r4];
                  if (!s4)
                    return;
                  var a4 = s4.children[e6];
                  a4 && (a4.style.textDecoration = o4 ? "underline" : "none"), ++e6 >= n4 && (e6 = 0, r4++);
                }
              }, o3([s3(6, u3.IInstantiationService), s3(7, h3.ICharSizeService), s3(8, u3.IOptionsService), s3(9, u3.IBufferService)], t5);
            }(l3.Disposable);
            t4.DomRenderer = S2;
          }, 3787: function(e4, t4, r3) {
            var i3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, n3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.DomRendererRowFactory = t4.CURSOR_STYLE_UNDERLINE_CLASS = t4.CURSOR_STYLE_BAR_CLASS = t4.CURSOR_STYLE_BLOCK_CLASS = t4.CURSOR_BLINK_CLASS = t4.CURSOR_CLASS = t4.STRIKETHROUGH_CLASS = t4.UNDERLINE_CLASS = t4.ITALIC_CLASS = t4.DIM_CLASS = t4.BOLD_CLASS = void 0;
            var o3 = r3(8803), s3 = r3(643), a3 = r3(511), c3 = r3(2585), l3 = r3(4774), h3 = r3(4725), u3 = r3(4269);
            t4.BOLD_CLASS = "xterm-bold", t4.DIM_CLASS = "xterm-dim", t4.ITALIC_CLASS = "xterm-italic", t4.UNDERLINE_CLASS = "xterm-underline", t4.STRIKETHROUGH_CLASS = "xterm-strikethrough", t4.CURSOR_CLASS = "xterm-cursor", t4.CURSOR_BLINK_CLASS = "xterm-cursor-blink", t4.CURSOR_STYLE_BLOCK_CLASS = "xterm-cursor-block", t4.CURSOR_STYLE_BAR_CLASS = "xterm-cursor-bar", t4.CURSOR_STYLE_UNDERLINE_CLASS = "xterm-cursor-underline";
            var f3 = function() {
              function e5(e6, t5, r4, i4, n4) {
                this._document = e6, this._colors = t5, this._characterJoinerService = r4, this._optionsService = i4, this._coreService = n4, this._workCell = new a3.CellData();
              }
              return e5.prototype.setColors = function(e6) {
                this._colors = e6;
              }, e5.prototype.createRow = function(e6, r4, i4, n4, a4, c4, h4, f4) {
                for (var d3 = this._document.createDocumentFragment(), p3 = this._characterJoinerService.getJoinedCharacters(r4), v2 = 0, g3 = Math.min(e6.length, f4) - 1; g3 >= 0; g3--)
                  if (e6.loadCell(g3, this._workCell).getCode() !== s3.NULL_CELL_CODE || i4 && g3 === a4) {
                    v2 = g3 + 1;
                    break;
                  }
                for (g3 = 0; g3 < v2; g3++) {
                  e6.loadCell(g3, this._workCell);
                  var y3 = this._workCell.getWidth();
                  if (y3 !== 0) {
                    var m2 = false, S2 = g3, C2 = this._workCell;
                    if (p3.length > 0 && g3 === p3[0][0]) {
                      m2 = true;
                      var b3 = p3.shift();
                      C2 = new u3.JoinedCellData(this._workCell, e6.translateToString(true, b3[0], b3[1]), b3[1] - b3[0]), S2 = b3[1] - 1, y3 = C2.getWidth();
                    }
                    var w3 = this._document.createElement("span");
                    if (y3 > 1 && (w3.style.width = h4 * y3 + "px"), m2 && (w3.style.display = "inline", a4 >= g3 && a4 <= S2 && (a4 = g3)), !this._coreService.isCursorHidden && i4 && g3 === a4)
                      switch (w3.classList.add(t4.CURSOR_CLASS), c4 && w3.classList.add(t4.CURSOR_BLINK_CLASS), n4) {
                        case "bar":
                          w3.classList.add(t4.CURSOR_STYLE_BAR_CLASS);
                          break;
                        case "underline":
                          w3.classList.add(t4.CURSOR_STYLE_UNDERLINE_CLASS);
                          break;
                        default:
                          w3.classList.add(t4.CURSOR_STYLE_BLOCK_CLASS);
                      }
                    C2.isBold() && w3.classList.add(t4.BOLD_CLASS), C2.isItalic() && w3.classList.add(t4.ITALIC_CLASS), C2.isDim() && w3.classList.add(t4.DIM_CLASS), C2.isUnderline() && w3.classList.add(t4.UNDERLINE_CLASS), C2.isInvisible() ? w3.textContent = s3.WHITESPACE_CELL_CHAR : w3.textContent = C2.getChars() || s3.WHITESPACE_CELL_CHAR, C2.isStrikethrough() && w3.classList.add(t4.STRIKETHROUGH_CLASS);
                    var L2 = C2.getFgColor(), E2 = C2.getFgColorMode(), x2 = C2.getBgColor(), k2 = C2.getBgColorMode(), M2 = !!C2.isInverse();
                    if (M2) {
                      var A2 = L2;
                      L2 = x2, x2 = A2;
                      var R2 = E2;
                      E2 = k2, k2 = R2;
                    }
                    switch (E2) {
                      case 16777216:
                      case 33554432:
                        C2.isBold() && L2 < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors && (L2 += 8), this._applyMinimumContrast(w3, this._colors.background, this._colors.ansi[L2]) || w3.classList.add("xterm-fg-" + L2);
                        break;
                      case 50331648:
                        var O2 = l3.rgba.toColor(L2 >> 16 & 255, L2 >> 8 & 255, 255 & L2);
                        this._applyMinimumContrast(w3, this._colors.background, O2) || this._addStyle(w3, "color:#" + _3(L2.toString(16), "0", 6));
                        break;
                      default:
                        this._applyMinimumContrast(w3, this._colors.background, this._colors.foreground) || M2 && w3.classList.add("xterm-fg-" + o3.INVERTED_DEFAULT_COLOR);
                    }
                    switch (k2) {
                      case 16777216:
                      case 33554432:
                        w3.classList.add("xterm-bg-" + x2);
                        break;
                      case 50331648:
                        this._addStyle(w3, "background-color:#" + _3(x2.toString(16), "0", 6));
                        break;
                      default:
                        M2 && w3.classList.add("xterm-bg-" + o3.INVERTED_DEFAULT_COLOR);
                    }
                    d3.appendChild(w3), g3 = S2;
                  }
                }
                return d3;
              }, e5.prototype._applyMinimumContrast = function(e6, t5, r4) {
                if (this._optionsService.rawOptions.minimumContrastRatio === 1)
                  return false;
                var i4 = this._colors.contrastCache.getColor(this._workCell.bg, this._workCell.fg);
                return i4 === void 0 && (i4 = l3.color.ensureContrastRatio(t5, r4, this._optionsService.rawOptions.minimumContrastRatio), this._colors.contrastCache.setColor(this._workCell.bg, this._workCell.fg, i4 != null ? i4 : null)), !!i4 && (this._addStyle(e6, "color:" + i4.css), true);
              }, e5.prototype._addStyle = function(e6, t5) {
                e6.setAttribute("style", "" + (e6.getAttribute("style") || "") + t5 + ";");
              }, i3([n3(2, h3.ICharacterJoinerService), n3(3, c3.IOptionsService), n3(4, c3.ICoreService)], e5);
            }();
            function _3(e5, t5, r4) {
              for (; e5.length < r4; )
                e5 = t5 + e5;
              return e5;
            }
            t4.DomRendererRowFactory = f3;
          }, 456: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.SelectionModel = void 0;
            var r3 = function() {
              function e5(e6) {
                this._bufferService = e6, this.isSelectAllActive = false, this.selectionStartLength = 0;
              }
              return e5.prototype.clearSelection = function() {
                this.selectionStart = void 0, this.selectionEnd = void 0, this.isSelectAllActive = false, this.selectionStartLength = 0;
              }, Object.defineProperty(e5.prototype, "finalSelectionStart", { get: function() {
                return this.isSelectAllActive ? [0, 0] : this.selectionEnd && this.selectionStart && this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "finalSelectionEnd", { get: function() {
                if (this.isSelectAllActive)
                  return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];
                if (this.selectionStart) {
                  if (!this.selectionEnd || this.areSelectionValuesReversed()) {
                    var e6 = this.selectionStart[0] + this.selectionStartLength;
                    return e6 > this._bufferService.cols ? e6 % this._bufferService.cols == 0 ? [this._bufferService.cols, this.selectionStart[1] + Math.floor(e6 / this._bufferService.cols) - 1] : [e6 % this._bufferService.cols, this.selectionStart[1] + Math.floor(e6 / this._bufferService.cols)] : [e6, this.selectionStart[1]];
                  }
                  return this.selectionStartLength && this.selectionEnd[1] === this.selectionStart[1] ? [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]] : this.selectionEnd;
                }
              }, enumerable: false, configurable: true }), e5.prototype.areSelectionValuesReversed = function() {
                var e6 = this.selectionStart, t5 = this.selectionEnd;
                return !(!e6 || !t5) && (e6[1] > t5[1] || e6[1] === t5[1] && e6[0] > t5[0]);
              }, e5.prototype.onTrim = function(e6) {
                return this.selectionStart && (this.selectionStart[1] -= e6), this.selectionEnd && (this.selectionEnd[1] -= e6), this.selectionEnd && this.selectionEnd[1] < 0 ? (this.clearSelection(), true) : (this.selectionStart && this.selectionStart[1] < 0 && (this.selectionStart[1] = 0), false);
              }, e5;
            }();
            t4.SelectionModel = r3;
          }, 428: function(e4, t4, r3) {
            var i3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, n3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CharSizeService = void 0;
            var o3 = r3(2585), s3 = r3(8460), a3 = function() {
              function e5(e6, t5, r4) {
                this._optionsService = r4, this.width = 0, this.height = 0, this._onCharSizeChange = new s3.EventEmitter(), this._measureStrategy = new c3(e6, t5, this._optionsService);
              }
              return Object.defineProperty(e5.prototype, "hasValidSize", { get: function() {
                return this.width > 0 && this.height > 0;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onCharSizeChange", { get: function() {
                return this._onCharSizeChange.event;
              }, enumerable: false, configurable: true }), e5.prototype.measure = function() {
                var e6 = this._measureStrategy.measure();
                e6.width === this.width && e6.height === this.height || (this.width = e6.width, this.height = e6.height, this._onCharSizeChange.fire());
              }, i3([n3(2, o3.IOptionsService)], e5);
            }();
            t4.CharSizeService = a3;
            var c3 = function() {
              function e5(e6, t5, r4) {
                this._document = e6, this._parentElement = t5, this._optionsService = r4, this._result = { width: 0, height: 0 }, this._measureElement = this._document.createElement("span"), this._measureElement.classList.add("xterm-char-measure-element"), this._measureElement.textContent = "W", this._measureElement.setAttribute("aria-hidden", "true"), this._parentElement.appendChild(this._measureElement);
              }
              return e5.prototype.measure = function() {
                this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily, this._measureElement.style.fontSize = this._optionsService.rawOptions.fontSize + "px";
                var e6 = this._measureElement.getBoundingClientRect();
                return e6.width !== 0 && e6.height !== 0 && (this._result.width = e6.width, this._result.height = Math.ceil(e6.height)), this._result;
              }, e5;
            }();
          }, 4269: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CharacterJoinerService = t4.JoinedCellData = void 0;
            var a3 = r3(3734), c3 = r3(643), l3 = r3(511), h3 = r3(2585), u3 = function(e5) {
              function t5(t6, r4, i4) {
                var n4 = e5.call(this) || this;
                return n4.content = 0, n4.combinedData = "", n4.fg = t6.fg, n4.bg = t6.bg, n4.combinedData = r4, n4._width = i4, n4;
              }
              return n3(t5, e5), t5.prototype.isCombined = function() {
                return 2097152;
              }, t5.prototype.getWidth = function() {
                return this._width;
              }, t5.prototype.getChars = function() {
                return this.combinedData;
              }, t5.prototype.getCode = function() {
                return 2097151;
              }, t5.prototype.setFromCharData = function(e6) {
                throw new Error("not implemented");
              }, t5.prototype.getAsCharData = function() {
                return [this.fg, this.getChars(), this.getWidth(), this.getCode()];
              }, t5;
            }(a3.AttributeData);
            t4.JoinedCellData = u3;
            var f3 = function() {
              function e5(e6) {
                this._bufferService = e6, this._characterJoiners = [], this._nextCharacterJoinerId = 0, this._workCell = new l3.CellData();
              }
              return e5.prototype.register = function(e6) {
                var t5 = { id: this._nextCharacterJoinerId++, handler: e6 };
                return this._characterJoiners.push(t5), t5.id;
              }, e5.prototype.deregister = function(e6) {
                for (var t5 = 0; t5 < this._characterJoiners.length; t5++)
                  if (this._characterJoiners[t5].id === e6)
                    return this._characterJoiners.splice(t5, 1), true;
                return false;
              }, e5.prototype.getJoinedCharacters = function(e6) {
                if (this._characterJoiners.length === 0)
                  return [];
                var t5 = this._bufferService.buffer.lines.get(e6);
                if (!t5 || t5.length === 0)
                  return [];
                for (var r4 = [], i4 = t5.translateToString(true), n4 = 0, o4 = 0, s4 = 0, a4 = t5.getFg(0), l4 = t5.getBg(0), h4 = 0; h4 < t5.getTrimmedLength(); h4++)
                  if (t5.loadCell(h4, this._workCell), this._workCell.getWidth() !== 0) {
                    if (this._workCell.fg !== a4 || this._workCell.bg !== l4) {
                      if (h4 - n4 > 1)
                        for (var u4 = this._getJoinedRanges(i4, s4, o4, t5, n4), f4 = 0; f4 < u4.length; f4++)
                          r4.push(u4[f4]);
                      n4 = h4, s4 = o4, a4 = this._workCell.fg, l4 = this._workCell.bg;
                    }
                    o4 += this._workCell.getChars().length || c3.WHITESPACE_CELL_CHAR.length;
                  }
                if (this._bufferService.cols - n4 > 1)
                  for (u4 = this._getJoinedRanges(i4, s4, o4, t5, n4), f4 = 0; f4 < u4.length; f4++)
                    r4.push(u4[f4]);
                return r4;
              }, e5.prototype._getJoinedRanges = function(t5, r4, i4, n4, o4) {
                var s4 = t5.substring(r4, i4), a4 = [];
                try {
                  a4 = this._characterJoiners[0].handler(s4);
                } catch (e6) {
                  console.error(e6);
                }
                for (var c4 = 1; c4 < this._characterJoiners.length; c4++)
                  try {
                    for (var l4 = this._characterJoiners[c4].handler(s4), h4 = 0; h4 < l4.length; h4++)
                      e5._mergeRanges(a4, l4[h4]);
                  } catch (e6) {
                    console.error(e6);
                  }
                return this._stringRangesToCellRanges(a4, n4, o4), a4;
              }, e5.prototype._stringRangesToCellRanges = function(e6, t5, r4) {
                var i4 = 0, n4 = false, o4 = 0, s4 = e6[i4];
                if (s4) {
                  for (var a4 = r4; a4 < this._bufferService.cols; a4++) {
                    var l4 = t5.getWidth(a4), h4 = t5.getString(a4).length || c3.WHITESPACE_CELL_CHAR.length;
                    if (l4 !== 0) {
                      if (!n4 && s4[0] <= o4 && (s4[0] = a4, n4 = true), s4[1] <= o4) {
                        if (s4[1] = a4, !(s4 = e6[++i4]))
                          break;
                        s4[0] <= o4 ? (s4[0] = a4, n4 = true) : n4 = false;
                      }
                      o4 += h4;
                    }
                  }
                  s4 && (s4[1] = this._bufferService.cols);
                }
              }, e5._mergeRanges = function(e6, t5) {
                for (var r4 = false, i4 = 0; i4 < e6.length; i4++) {
                  var n4 = e6[i4];
                  if (r4) {
                    if (t5[1] <= n4[0])
                      return e6[i4 - 1][1] = t5[1], e6;
                    if (t5[1] <= n4[1])
                      return e6[i4 - 1][1] = Math.max(t5[1], n4[1]), e6.splice(i4, 1), e6;
                    e6.splice(i4, 1), i4--;
                  } else {
                    if (t5[1] <= n4[0])
                      return e6.splice(i4, 0, t5), e6;
                    if (t5[1] <= n4[1])
                      return n4[0] = Math.min(t5[0], n4[0]), e6;
                    t5[0] < n4[1] && (n4[0] = Math.min(t5[0], n4[0]), r4 = true);
                  }
                }
                return r4 ? e6[e6.length - 1][1] = t5[1] : e6.push(t5), e6;
              }, e5 = o3([s3(0, h3.IBufferService)], e5);
            }();
            t4.CharacterJoinerService = f3;
          }, 5114: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CoreBrowserService = void 0;
            var r3 = function() {
              function e5(e6) {
                this._textarea = e6;
              }
              return Object.defineProperty(e5.prototype, "isFocused", { get: function() {
                return (this._textarea.getRootNode ? this._textarea.getRootNode() : document).activeElement === this._textarea && document.hasFocus();
              }, enumerable: false, configurable: true }), e5;
            }();
            t4.CoreBrowserService = r3;
          }, 7641: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.Decoration = t4.DecorationService = void 0;
            var a3 = r3(8460), c3 = r3(844), l3 = r3(2585), h3 = function(e5) {
              function t5(t6) {
                var r4 = e5.call(this) || this;
                return r4._instantiationService = t6, r4._decorations = [], r4;
              }
              return n3(t5, e5), t5.prototype.attachToDom = function(e6, t6) {
                var r4 = this;
                this._renderService = t6, this._screenElement = e6, this._container = document.createElement("div"), this._container.classList.add("xterm-decoration-container"), e6.appendChild(this._container), this.register(this._renderService.onRenderedBufferChange(function() {
                  return r4.refresh();
                })), this.register(this._renderService.onDimensionsChange(function() {
                  return r4.refresh(true);
                }));
              }, t5.prototype.registerDecoration = function(e6) {
                var t6 = this;
                if (!e6.marker.isDisposed && this._container) {
                  var r4 = this._instantiationService.createInstance(u3, e6, this._container);
                  return this._decorations.push(r4), r4.onDispose(function() {
                    return t6._decorations.splice(t6._decorations.indexOf(r4), 1);
                  }), this._queueRefresh(), r4;
                }
              }, t5.prototype._queueRefresh = function() {
                var e6 = this;
                this._animationFrame === void 0 && (this._animationFrame = window.requestAnimationFrame(function() {
                  e6.refresh(), e6._animationFrame = void 0;
                }));
              }, t5.prototype.refresh = function(e6) {
                if (this._renderService)
                  for (var t6 = 0, r4 = this._decorations; t6 < r4.length; t6++)
                    r4[t6].render(this._renderService, e6);
              }, t5.prototype.dispose = function() {
                for (var e6 = 0, t6 = this._decorations; e6 < t6.length; e6++)
                  t6[e6].dispose();
                this._screenElement && this._container && this._screenElement.contains(this._container) && this._screenElement.removeChild(this._container);
              }, o3([s3(0, l3.IInstantiationService)], t5);
            }(c3.Disposable);
            t4.DecorationService = h3;
            var u3 = function(e5) {
              function t5(t6, r4, i4) {
                var n4, o4 = e5.call(this) || this;
                return o4._container = r4, o4._bufferService = i4, o4.isDisposed = false, o4._onDispose = new a3.EventEmitter(), o4._onRender = new a3.EventEmitter(), o4.x = (n4 = t6.x) !== null && n4 !== void 0 ? n4 : 0, o4._marker = t6.marker, o4._marker.onDispose(function() {
                  return o4.dispose();
                }), o4.anchor = t6.anchor || "left", o4.width = t6.width || 1, o4.height = t6.height || 1, o4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "element", { get: function() {
                return this._element;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "marker", { get: function() {
                return this._marker;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onDispose", { get: function() {
                return this._onDispose.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRender", { get: function() {
                return this._onRender.event;
              }, enumerable: false, configurable: true }), t5.prototype.render = function(e6, t6) {
                this._element && !t6 || this._createElement(e6, t6), this._container && this._element && !this._container.contains(this._element) && this._container.append(this._element), this._refreshStyle(e6), this._element && this._onRender.fire(this._element);
              }, t5.prototype._createElement = function(e6, t6) {
                t6 && this._element && this._container.contains(this._element) && this._container.removeChild(this._element), this._element = document.createElement("div"), this._element.classList.add("xterm-decoration"), this._element.style.width = this.width * e6.dimensions.actualCellWidth + "px", this._element.style.height = this.height * e6.dimensions.actualCellHeight + "px", this._element.style.top = (this.marker.line - this._bufferService.buffers.active.ydisp) * e6.dimensions.actualCellHeight + "px", this._element.style.lineHeight = e6.dimensions.actualCellHeight + "px", this.x && this.x > this._bufferService.cols && (this._element.style.display = "none"), this.anchor === "right" ? this._element.style.right = this.x ? this.x * e6.dimensions.actualCellWidth + "px" : "" : this._element.style.left = this.x ? this.x * e6.dimensions.actualCellWidth + "px" : "";
              }, t5.prototype._refreshStyle = function(e6) {
                if (this._element) {
                  var t6 = this.marker.line - this._bufferService.buffers.active.ydisp;
                  t6 < 0 || t6 > this._bufferService.rows ? this._element.style.display = "none" : (this._element.style.top = t6 * e6.dimensions.actualCellHeight + "px", this._element.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? "none" : "block");
                }
              }, t5.prototype.dispose = function() {
                this.isDisposed || (this._element && this._container.contains(this._element) && this._container.removeChild(this._element), this.isDisposed = true, this._onDispose.fire());
              }, o3([s3(2, l3.IBufferService)], t5);
            }(c3.Disposable);
            t4.Decoration = u3;
          }, 8934: function(e4, t4, r3) {
            var i3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, n3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.MouseService = void 0;
            var o3 = r3(4725), s3 = r3(9806), a3 = function() {
              function e5(e6, t5) {
                this._renderService = e6, this._charSizeService = t5;
              }
              return e5.prototype.getCoords = function(e6, t5, r4, i4, n4) {
                return (0, s3.getCoords)(e6, t5, r4, i4, this._charSizeService.hasValidSize, this._renderService.dimensions.actualCellWidth, this._renderService.dimensions.actualCellHeight, n4);
              }, e5.prototype.getRawByteCoords = function(e6, t5, r4, i4) {
                var n4 = this.getCoords(e6, t5, r4, i4);
                return (0, s3.getRawByteCoords)(n4);
              }, i3([n3(0, o3.IRenderService), n3(1, o3.ICharSizeService)], e5);
            }();
            t4.MouseService = a3;
          }, 3230: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.RenderService = void 0;
            var a3 = r3(6193), c3 = r3(8460), l3 = r3(844), h3 = r3(5596), u3 = r3(3656), f3 = r3(2585), _3 = r3(4725), d3 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4) {
                var l4 = e5.call(this) || this;
                if (l4._renderer = t6, l4._rowCount = r4, l4._charSizeService = o4, l4._isPaused = false, l4._needsFullRefresh = false, l4._isNextRenderRedrawOnly = true, l4._needsSelectionRefresh = false, l4._canvasWidth = 0, l4._canvasHeight = 0, l4._selectionState = { start: void 0, end: void 0, columnSelectMode: false }, l4._onDimensionsChange = new c3.EventEmitter(), l4._onRender = new c3.EventEmitter(), l4._onRefreshRequest = new c3.EventEmitter(), l4.register({ dispose: function() {
                  return l4._renderer.dispose();
                } }), l4._renderDebouncer = new a3.RenderDebouncer(function(e6, t7) {
                  return l4._renderRows(e6, t7);
                }), l4.register(l4._renderDebouncer), l4._screenDprMonitor = new h3.ScreenDprMonitor(), l4._screenDprMonitor.setListener(function() {
                  return l4.onDevicePixelRatioChange();
                }), l4.register(l4._screenDprMonitor), l4.register(s4.onResize(function() {
                  return l4._fullRefresh();
                })), l4.register(s4.buffers.onBufferActivate(function() {
                  var e6;
                  return (e6 = l4._renderer) === null || e6 === void 0 ? void 0 : e6.clear();
                })), l4.register(n4.onOptionChange(function() {
                  return l4._renderer.onOptionsChanged();
                })), l4.register(l4._charSizeService.onCharSizeChange(function() {
                  return l4.onCharSizeChanged();
                })), l4._renderer.onRequestRedraw(function(e6) {
                  return l4.refreshRows(e6.start, e6.end, true);
                }), l4.register((0, u3.addDisposableDomListener)(window, "resize", function() {
                  return l4.onDevicePixelRatioChange();
                })), "IntersectionObserver" in window) {
                  var f4 = new IntersectionObserver(function(e6) {
                    return l4._onIntersectionChange(e6[e6.length - 1]);
                  }, { threshold: 0 });
                  f4.observe(i4), l4.register({ dispose: function() {
                    return f4.disconnect();
                  } });
                }
                return l4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "onDimensionsChange", { get: function() {
                return this._onDimensionsChange.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRenderedBufferChange", { get: function() {
                return this._onRender.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRefreshRequest", { get: function() {
                return this._onRefreshRequest.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "dimensions", { get: function() {
                return this._renderer.dimensions;
              }, enumerable: false, configurable: true }), t5.prototype._onIntersectionChange = function(e6) {
                this._isPaused = e6.isIntersecting === void 0 ? e6.intersectionRatio === 0 : !e6.isIntersecting, this._isPaused || this._charSizeService.hasValidSize || this._charSizeService.measure(), !this._isPaused && this._needsFullRefresh && (this.refreshRows(0, this._rowCount - 1), this._needsFullRefresh = false);
              }, t5.prototype.refreshRows = function(e6, t6, r4) {
                r4 === void 0 && (r4 = false), this._isPaused ? this._needsFullRefresh = true : (r4 || (this._isNextRenderRedrawOnly = false), this._renderDebouncer.refresh(e6, t6, this._rowCount));
              }, t5.prototype._renderRows = function(e6, t6) {
                this._renderer.renderRows(e6, t6), this._needsSelectionRefresh && (this._renderer.onSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode), this._needsSelectionRefresh = false), this._isNextRenderRedrawOnly || this._onRender.fire({ start: e6, end: t6 }), this._isNextRenderRedrawOnly = true;
              }, t5.prototype.resize = function(e6, t6) {
                this._rowCount = t6, this._fireOnCanvasResize();
              }, t5.prototype.changeOptions = function() {
                this._renderer.onOptionsChanged(), this.refreshRows(0, this._rowCount - 1), this._fireOnCanvasResize();
              }, t5.prototype._fireOnCanvasResize = function() {
                this._renderer.dimensions.canvasWidth === this._canvasWidth && this._renderer.dimensions.canvasHeight === this._canvasHeight || this._onDimensionsChange.fire(this._renderer.dimensions);
              }, t5.prototype.dispose = function() {
                e5.prototype.dispose.call(this);
              }, t5.prototype.setRenderer = function(e6) {
                var t6 = this;
                this._renderer.dispose(), this._renderer = e6, this._renderer.onRequestRedraw(function(e7) {
                  return t6.refreshRows(e7.start, e7.end, true);
                }), this._needsSelectionRefresh = true, this._fullRefresh();
              }, t5.prototype._fullRefresh = function() {
                this._isPaused ? this._needsFullRefresh = true : this.refreshRows(0, this._rowCount - 1);
              }, t5.prototype.clearTextureAtlas = function() {
                var e6, t6;
                (t6 = (e6 = this._renderer) === null || e6 === void 0 ? void 0 : e6.clearTextureAtlas) === null || t6 === void 0 || t6.call(e6), this._fullRefresh();
              }, t5.prototype.setColors = function(e6) {
                this._renderer.setColors(e6), this._fullRefresh();
              }, t5.prototype.onDevicePixelRatioChange = function() {
                this._charSizeService.measure(), this._renderer.onDevicePixelRatioChange(), this.refreshRows(0, this._rowCount - 1);
              }, t5.prototype.onResize = function(e6, t6) {
                this._renderer.onResize(e6, t6), this._fullRefresh();
              }, t5.prototype.onCharSizeChanged = function() {
                this._renderer.onCharSizeChanged();
              }, t5.prototype.onBlur = function() {
                this._renderer.onBlur();
              }, t5.prototype.onFocus = function() {
                this._renderer.onFocus();
              }, t5.prototype.onSelectionChanged = function(e6, t6, r4) {
                this._selectionState.start = e6, this._selectionState.end = t6, this._selectionState.columnSelectMode = r4, this._renderer.onSelectionChanged(e6, t6, r4);
              }, t5.prototype.onCursorMove = function() {
                this._renderer.onCursorMove();
              }, t5.prototype.clear = function() {
                this._renderer.clear();
              }, o3([s3(3, f3.IOptionsService), s3(4, _3.ICharSizeService), s3(5, f3.IBufferService)], t5);
            }(l3.Disposable);
            t4.RenderService = d3;
          }, 9312: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.SelectionService = void 0;
            var a3 = r3(6114), c3 = r3(456), l3 = r3(511), h3 = r3(8460), u3 = r3(4725), f3 = r3(2585), _3 = r3(9806), d3 = r3(9504), p3 = r3(844), v2 = r3(4841), g3 = String.fromCharCode(160), y3 = new RegExp(g3, "g"), m2 = function(e5) {
              function t5(t6, r4, i4, n4, o4, s4, a4, u4) {
                var f4 = e5.call(this) || this;
                return f4._element = t6, f4._screenElement = r4, f4._linkifier = i4, f4._bufferService = n4, f4._coreService = o4, f4._mouseService = s4, f4._optionsService = a4, f4._renderService = u4, f4._dragScrollAmount = 0, f4._enabled = true, f4._workCell = new l3.CellData(), f4._mouseDownTimeStamp = 0, f4._oldHasSelection = false, f4._oldSelectionStart = void 0, f4._oldSelectionEnd = void 0, f4._onLinuxMouseSelection = f4.register(new h3.EventEmitter()), f4._onRedrawRequest = f4.register(new h3.EventEmitter()), f4._onSelectionChange = f4.register(new h3.EventEmitter()), f4._onRequestScrollLines = f4.register(new h3.EventEmitter()), f4._mouseMoveListener = function(e6) {
                  return f4._onMouseMove(e6);
                }, f4._mouseUpListener = function(e6) {
                  return f4._onMouseUp(e6);
                }, f4._coreService.onUserInput(function() {
                  f4.hasSelection && f4.clearSelection();
                }), f4._trimListener = f4._bufferService.buffer.lines.onTrim(function(e6) {
                  return f4._onTrim(e6);
                }), f4.register(f4._bufferService.buffers.onBufferActivate(function(e6) {
                  return f4._onBufferActivate(e6);
                })), f4.enable(), f4._model = new c3.SelectionModel(f4._bufferService), f4._activeSelectionMode = 0, f4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "onLinuxMouseSelection", { get: function() {
                return this._onLinuxMouseSelection.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRequestRedraw", { get: function() {
                return this._onRedrawRequest.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onSelectionChange", { get: function() {
                return this._onSelectionChange.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRequestScrollLines", { get: function() {
                return this._onRequestScrollLines.event;
              }, enumerable: false, configurable: true }), t5.prototype.dispose = function() {
                this._removeMouseDownListeners();
              }, t5.prototype.reset = function() {
                this.clearSelection();
              }, t5.prototype.disable = function() {
                this.clearSelection(), this._enabled = false;
              }, t5.prototype.enable = function() {
                this._enabled = true;
              }, Object.defineProperty(t5.prototype, "selectionStart", { get: function() {
                return this._model.finalSelectionStart;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "selectionEnd", { get: function() {
                return this._model.finalSelectionEnd;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "hasSelection", { get: function() {
                var e6 = this._model.finalSelectionStart, t6 = this._model.finalSelectionEnd;
                return !(!e6 || !t6 || e6[0] === t6[0] && e6[1] === t6[1]);
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "selectionText", { get: function() {
                var e6 = this._model.finalSelectionStart, t6 = this._model.finalSelectionEnd;
                if (!e6 || !t6)
                  return "";
                var r4 = this._bufferService.buffer, i4 = [];
                if (this._activeSelectionMode === 3) {
                  if (e6[0] === t6[0])
                    return "";
                  for (var n4 = e6[1]; n4 <= t6[1]; n4++) {
                    var o4 = r4.translateBufferLineToString(n4, true, e6[0], t6[0]);
                    i4.push(o4);
                  }
                } else {
                  var s4 = e6[1] === t6[1] ? t6[0] : void 0;
                  for (i4.push(r4.translateBufferLineToString(e6[1], true, e6[0], s4)), n4 = e6[1] + 1; n4 <= t6[1] - 1; n4++) {
                    var c4 = r4.lines.get(n4);
                    o4 = r4.translateBufferLineToString(n4, true), (c4 == null ? void 0 : c4.isWrapped) ? i4[i4.length - 1] += o4 : i4.push(o4);
                  }
                  e6[1] !== t6[1] && (c4 = r4.lines.get(t6[1]), o4 = r4.translateBufferLineToString(t6[1], true, 0, t6[0]), c4 && c4.isWrapped ? i4[i4.length - 1] += o4 : i4.push(o4));
                }
                return i4.map(function(e7) {
                  return e7.replace(y3, " ");
                }).join(a3.isWindows ? "\r\n" : "\n");
              }, enumerable: false, configurable: true }), t5.prototype.clearSelection = function() {
                this._model.clearSelection(), this._removeMouseDownListeners(), this.refresh(), this._onSelectionChange.fire();
              }, t5.prototype.refresh = function(e6) {
                var t6 = this;
                this._refreshAnimationFrame || (this._refreshAnimationFrame = window.requestAnimationFrame(function() {
                  return t6._refresh();
                })), a3.isLinux && e6 && this.selectionText.length && this._onLinuxMouseSelection.fire(this.selectionText);
              }, t5.prototype._refresh = function() {
                this._refreshAnimationFrame = void 0, this._onRedrawRequest.fire({ start: this._model.finalSelectionStart, end: this._model.finalSelectionEnd, columnSelectMode: this._activeSelectionMode === 3 });
              }, t5.prototype._isClickInSelection = function(e6) {
                var t6 = this._getMouseBufferCoords(e6), r4 = this._model.finalSelectionStart, i4 = this._model.finalSelectionEnd;
                return !!(r4 && i4 && t6) && this._areCoordsInSelection(t6, r4, i4);
              }, t5.prototype._areCoordsInSelection = function(e6, t6, r4) {
                return e6[1] > t6[1] && e6[1] < r4[1] || t6[1] === r4[1] && e6[1] === t6[1] && e6[0] >= t6[0] && e6[0] < r4[0] || t6[1] < r4[1] && e6[1] === r4[1] && e6[0] < r4[0] || t6[1] < r4[1] && e6[1] === t6[1] && e6[0] >= t6[0];
              }, t5.prototype._selectWordAtCursor = function(e6, t6) {
                var r4, i4, n4 = (i4 = (r4 = this._linkifier.currentLink) === null || r4 === void 0 ? void 0 : r4.link) === null || i4 === void 0 ? void 0 : i4.range;
                if (n4)
                  return this._model.selectionStart = [n4.start.x - 1, n4.start.y - 1], this._model.selectionStartLength = (0, v2.getRangeLength)(n4, this._bufferService.cols), this._model.selectionEnd = void 0, true;
                var o4 = this._getMouseBufferCoords(e6);
                return !!o4 && (this._selectWordAt(o4, t6), this._model.selectionEnd = void 0, true);
              }, t5.prototype.selectAll = function() {
                this._model.isSelectAllActive = true, this.refresh(), this._onSelectionChange.fire();
              }, t5.prototype.selectLines = function(e6, t6) {
                this._model.clearSelection(), e6 = Math.max(e6, 0), t6 = Math.min(t6, this._bufferService.buffer.lines.length - 1), this._model.selectionStart = [0, e6], this._model.selectionEnd = [this._bufferService.cols, t6], this.refresh(), this._onSelectionChange.fire();
              }, t5.prototype._onTrim = function(e6) {
                this._model.onTrim(e6) && this.refresh();
              }, t5.prototype._getMouseBufferCoords = function(e6) {
                var t6 = this._mouseService.getCoords(e6, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);
                if (t6)
                  return t6[0]--, t6[1]--, t6[1] += this._bufferService.buffer.ydisp, t6;
              }, t5.prototype._getMouseEventScrollAmount = function(e6) {
                var t6 = (0, _3.getCoordsRelativeToElement)(e6, this._screenElement)[1], r4 = this._renderService.dimensions.canvasHeight;
                return t6 >= 0 && t6 <= r4 ? 0 : (t6 > r4 && (t6 -= r4), t6 = Math.min(Math.max(t6, -50), 50), (t6 /= 50) / Math.abs(t6) + Math.round(14 * t6));
              }, t5.prototype.shouldForceSelection = function(e6) {
                return a3.isMac ? e6.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection : e6.shiftKey;
              }, t5.prototype.onMouseDown = function(e6) {
                if (this._mouseDownTimeStamp = e6.timeStamp, (e6.button !== 2 || !this.hasSelection) && e6.button === 0) {
                  if (!this._enabled) {
                    if (!this.shouldForceSelection(e6))
                      return;
                    e6.stopPropagation();
                  }
                  e6.preventDefault(), this._dragScrollAmount = 0, this._enabled && e6.shiftKey ? this._onIncrementalClick(e6) : e6.detail === 1 ? this._onSingleClick(e6) : e6.detail === 2 ? this._onDoubleClick(e6) : e6.detail === 3 && this._onTripleClick(e6), this._addMouseDownListeners(), this.refresh(true);
                }
              }, t5.prototype._addMouseDownListeners = function() {
                var e6 = this;
                this._screenElement.ownerDocument && (this._screenElement.ownerDocument.addEventListener("mousemove", this._mouseMoveListener), this._screenElement.ownerDocument.addEventListener("mouseup", this._mouseUpListener)), this._dragScrollIntervalTimer = window.setInterval(function() {
                  return e6._dragScroll();
                }, 50);
              }, t5.prototype._removeMouseDownListeners = function() {
                this._screenElement.ownerDocument && (this._screenElement.ownerDocument.removeEventListener("mousemove", this._mouseMoveListener), this._screenElement.ownerDocument.removeEventListener("mouseup", this._mouseUpListener)), clearInterval(this._dragScrollIntervalTimer), this._dragScrollIntervalTimer = void 0;
              }, t5.prototype._onIncrementalClick = function(e6) {
                this._model.selectionStart && (this._model.selectionEnd = this._getMouseBufferCoords(e6));
              }, t5.prototype._onSingleClick = function(e6) {
                if (this._model.selectionStartLength = 0, this._model.isSelectAllActive = false, this._activeSelectionMode = this.shouldColumnSelect(e6) ? 3 : 0, this._model.selectionStart = this._getMouseBufferCoords(e6), this._model.selectionStart) {
                  this._model.selectionEnd = void 0;
                  var t6 = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);
                  t6 && t6.length !== this._model.selectionStart[0] && t6.hasWidth(this._model.selectionStart[0]) === 0 && this._model.selectionStart[0]++;
                }
              }, t5.prototype._onDoubleClick = function(e6) {
                this._selectWordAtCursor(e6, true) && (this._activeSelectionMode = 1);
              }, t5.prototype._onTripleClick = function(e6) {
                var t6 = this._getMouseBufferCoords(e6);
                t6 && (this._activeSelectionMode = 2, this._selectLineAt(t6[1]));
              }, t5.prototype.shouldColumnSelect = function(e6) {
                return e6.altKey && !(a3.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);
              }, t5.prototype._onMouseMove = function(e6) {
                if (e6.stopImmediatePropagation(), this._model.selectionStart) {
                  var t6 = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;
                  if (this._model.selectionEnd = this._getMouseBufferCoords(e6), this._model.selectionEnd) {
                    this._activeSelectionMode === 2 ? this._model.selectionEnd[1] < this._model.selectionStart[1] ? this._model.selectionEnd[0] = 0 : this._model.selectionEnd[0] = this._bufferService.cols : this._activeSelectionMode === 1 && this._selectToWordAt(this._model.selectionEnd), this._dragScrollAmount = this._getMouseEventScrollAmount(e6), this._activeSelectionMode !== 3 && (this._dragScrollAmount > 0 ? this._model.selectionEnd[0] = this._bufferService.cols : this._dragScrollAmount < 0 && (this._model.selectionEnd[0] = 0));
                    var r4 = this._bufferService.buffer;
                    if (this._model.selectionEnd[1] < r4.lines.length) {
                      var i4 = r4.lines.get(this._model.selectionEnd[1]);
                      i4 && i4.hasWidth(this._model.selectionEnd[0]) === 0 && this._model.selectionEnd[0]++;
                    }
                    t6 && t6[0] === this._model.selectionEnd[0] && t6[1] === this._model.selectionEnd[1] || this.refresh(true);
                  } else
                    this.refresh(true);
                }
              }, t5.prototype._dragScroll = function() {
                if (this._model.selectionEnd && this._model.selectionStart && this._dragScrollAmount) {
                  this._onRequestScrollLines.fire({ amount: this._dragScrollAmount, suppressScrollEvent: false });
                  var e6 = this._bufferService.buffer;
                  this._dragScrollAmount > 0 ? (this._activeSelectionMode !== 3 && (this._model.selectionEnd[0] = this._bufferService.cols), this._model.selectionEnd[1] = Math.min(e6.ydisp + this._bufferService.rows, e6.lines.length - 1)) : (this._activeSelectionMode !== 3 && (this._model.selectionEnd[0] = 0), this._model.selectionEnd[1] = e6.ydisp), this.refresh();
                }
              }, t5.prototype._onMouseUp = function(e6) {
                var t6 = e6.timeStamp - this._mouseDownTimeStamp;
                if (this._removeMouseDownListeners(), this.selectionText.length <= 1 && t6 < 500 && e6.altKey && this._optionsService.getOption("altClickMovesCursor")) {
                  if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {
                    var r4 = this._mouseService.getCoords(e6, this._element, this._bufferService.cols, this._bufferService.rows, false);
                    if (r4 && r4[0] !== void 0 && r4[1] !== void 0) {
                      var i4 = (0, d3.moveToCellSequence)(r4[0] - 1, r4[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);
                      this._coreService.triggerDataEvent(i4, true);
                    }
                  }
                } else
                  this._fireEventIfSelectionChanged();
              }, t5.prototype._fireEventIfSelectionChanged = function() {
                var e6 = this._model.finalSelectionStart, t6 = this._model.finalSelectionEnd, r4 = !(!e6 || !t6 || e6[0] === t6[0] && e6[1] === t6[1]);
                r4 ? e6 && t6 && (this._oldSelectionStart && this._oldSelectionEnd && e6[0] === this._oldSelectionStart[0] && e6[1] === this._oldSelectionStart[1] && t6[0] === this._oldSelectionEnd[0] && t6[1] === this._oldSelectionEnd[1] || this._fireOnSelectionChange(e6, t6, r4)) : this._oldHasSelection && this._fireOnSelectionChange(e6, t6, r4);
              }, t5.prototype._fireOnSelectionChange = function(e6, t6, r4) {
                this._oldSelectionStart = e6, this._oldSelectionEnd = t6, this._oldHasSelection = r4, this._onSelectionChange.fire();
              }, t5.prototype._onBufferActivate = function(e6) {
                var t6 = this;
                this.clearSelection(), this._trimListener.dispose(), this._trimListener = e6.activeBuffer.lines.onTrim(function(e7) {
                  return t6._onTrim(e7);
                });
              }, t5.prototype._convertViewportColToCharacterIndex = function(e6, t6) {
                for (var r4 = t6[0], i4 = 0; t6[0] >= i4; i4++) {
                  var n4 = e6.loadCell(i4, this._workCell).getChars().length;
                  this._workCell.getWidth() === 0 ? r4-- : n4 > 1 && t6[0] !== i4 && (r4 += n4 - 1);
                }
                return r4;
              }, t5.prototype.setSelection = function(e6, t6, r4) {
                this._model.clearSelection(), this._removeMouseDownListeners(), this._model.selectionStart = [e6, t6], this._model.selectionStartLength = r4, this.refresh();
              }, t5.prototype.rightClickSelect = function(e6) {
                this._isClickInSelection(e6) || (this._selectWordAtCursor(e6, false) && this.refresh(true), this._fireEventIfSelectionChanged());
              }, t5.prototype._getWordAt = function(e6, t6, r4, i4) {
                if (r4 === void 0 && (r4 = true), i4 === void 0 && (i4 = true), !(e6[0] >= this._bufferService.cols)) {
                  var n4 = this._bufferService.buffer, o4 = n4.lines.get(e6[1]);
                  if (o4) {
                    var s4 = n4.translateBufferLineToString(e6[1], false), a4 = this._convertViewportColToCharacterIndex(o4, e6), c4 = a4, l4 = e6[0] - a4, h4 = 0, u4 = 0, f4 = 0, _4 = 0;
                    if (s4.charAt(a4) === " ") {
                      for (; a4 > 0 && s4.charAt(a4 - 1) === " "; )
                        a4--;
                      for (; c4 < s4.length && s4.charAt(c4 + 1) === " "; )
                        c4++;
                    } else {
                      var d4 = e6[0], p4 = e6[0];
                      o4.getWidth(d4) === 0 && (h4++, d4--), o4.getWidth(p4) === 2 && (u4++, p4++);
                      var v3 = o4.getString(p4).length;
                      for (v3 > 1 && (_4 += v3 - 1, c4 += v3 - 1); d4 > 0 && a4 > 0 && !this._isCharWordSeparator(o4.loadCell(d4 - 1, this._workCell)); ) {
                        o4.loadCell(d4 - 1, this._workCell);
                        var g4 = this._workCell.getChars().length;
                        this._workCell.getWidth() === 0 ? (h4++, d4--) : g4 > 1 && (f4 += g4 - 1, a4 -= g4 - 1), a4--, d4--;
                      }
                      for (; p4 < o4.length && c4 + 1 < s4.length && !this._isCharWordSeparator(o4.loadCell(p4 + 1, this._workCell)); ) {
                        o4.loadCell(p4 + 1, this._workCell);
                        var y4 = this._workCell.getChars().length;
                        this._workCell.getWidth() === 2 ? (u4++, p4++) : y4 > 1 && (_4 += y4 - 1, c4 += y4 - 1), c4++, p4++;
                      }
                    }
                    c4++;
                    var m3 = a4 + l4 - h4 + f4, S2 = Math.min(this._bufferService.cols, c4 - a4 + h4 + u4 - f4 - _4);
                    if (t6 || s4.slice(a4, c4).trim() !== "") {
                      if (r4 && m3 === 0 && o4.getCodePoint(0) !== 32) {
                        var C2 = n4.lines.get(e6[1] - 1);
                        if (C2 && o4.isWrapped && C2.getCodePoint(this._bufferService.cols - 1) !== 32) {
                          var b3 = this._getWordAt([this._bufferService.cols - 1, e6[1] - 1], false, true, false);
                          if (b3) {
                            var w3 = this._bufferService.cols - b3.start;
                            m3 -= w3, S2 += w3;
                          }
                        }
                      }
                      if (i4 && m3 + S2 === this._bufferService.cols && o4.getCodePoint(this._bufferService.cols - 1) !== 32) {
                        var L2 = n4.lines.get(e6[1] + 1);
                        if ((L2 == null ? void 0 : L2.isWrapped) && L2.getCodePoint(0) !== 32) {
                          var E2 = this._getWordAt([0, e6[1] + 1], false, false, true);
                          E2 && (S2 += E2.length);
                        }
                      }
                      return { start: m3, length: S2 };
                    }
                  }
                }
              }, t5.prototype._selectWordAt = function(e6, t6) {
                var r4 = this._getWordAt(e6, t6);
                if (r4) {
                  for (; r4.start < 0; )
                    r4.start += this._bufferService.cols, e6[1]--;
                  this._model.selectionStart = [r4.start, e6[1]], this._model.selectionStartLength = r4.length;
                }
              }, t5.prototype._selectToWordAt = function(e6) {
                var t6 = this._getWordAt(e6, true);
                if (t6) {
                  for (var r4 = e6[1]; t6.start < 0; )
                    t6.start += this._bufferService.cols, r4--;
                  if (!this._model.areSelectionValuesReversed())
                    for (; t6.start + t6.length > this._bufferService.cols; )
                      t6.length -= this._bufferService.cols, r4++;
                  this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? t6.start : t6.start + t6.length, r4];
                }
              }, t5.prototype._isCharWordSeparator = function(e6) {
                return e6.getWidth() !== 0 && this._optionsService.rawOptions.wordSeparator.indexOf(e6.getChars()) >= 0;
              }, t5.prototype._selectLineAt = function(e6) {
                var t6 = this._bufferService.buffer.getWrappedRangeForLine(e6);
                this._model.selectionStart = [0, t6.first], this._model.selectionEnd = [this._bufferService.cols, t6.last], this._model.selectionStartLength = 0;
              }, o3([s3(3, f3.IBufferService), s3(4, f3.ICoreService), s3(5, u3.IMouseService), s3(6, f3.IOptionsService), s3(7, u3.IRenderService)], t5);
            }(p3.Disposable);
            t4.SelectionService = m2;
          }, 4725: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.IDecorationService = t4.ICharacterJoinerService = t4.ISoundService = t4.ISelectionService = t4.IRenderService = t4.IMouseService = t4.ICoreBrowserService = t4.ICharSizeService = void 0;
            var i3 = r3(8343);
            t4.ICharSizeService = (0, i3.createDecorator)("CharSizeService"), t4.ICoreBrowserService = (0, i3.createDecorator)("CoreBrowserService"), t4.IMouseService = (0, i3.createDecorator)("MouseService"), t4.IRenderService = (0, i3.createDecorator)("RenderService"), t4.ISelectionService = (0, i3.createDecorator)("SelectionService"), t4.ISoundService = (0, i3.createDecorator)("SoundService"), t4.ICharacterJoinerService = (0, i3.createDecorator)("CharacterJoinerService"), t4.IDecorationService = (0, i3.createDecorator)("DecorationService");
          }, 357: function(e4, t4, r3) {
            var i3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a3 = e5.length - 1; a3 >= 0; a3--)
                  (n4 = e5[a3]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, n3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.SoundService = void 0;
            var o3 = r3(2585), s3 = function() {
              function e5(e6) {
                this._optionsService = e6;
              }
              return Object.defineProperty(e5, "audioContext", { get: function() {
                if (!e5._audioContext) {
                  var t5 = window.AudioContext || window.webkitAudioContext;
                  if (!t5)
                    return console.warn("Web Audio API is not supported by this browser. Consider upgrading to the latest version"), null;
                  e5._audioContext = new t5();
                }
                return e5._audioContext;
              }, enumerable: false, configurable: true }), e5.prototype.playBellSound = function() {
                var t5 = e5.audioContext;
                if (t5) {
                  var r4 = t5.createBufferSource();
                  t5.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._optionsService.rawOptions.bellSound)), function(e6) {
                    r4.buffer = e6, r4.connect(t5.destination), r4.start(0);
                  });
                }
              }, e5.prototype._base64ToArrayBuffer = function(e6) {
                for (var t5 = window.atob(e6), r4 = t5.length, i4 = new Uint8Array(r4), n4 = 0; n4 < r4; n4++)
                  i4[n4] = t5.charCodeAt(n4);
                return i4.buffer;
              }, e5.prototype._removeMimeType = function(e6) {
                return e6.split(",")[1];
              }, e5 = i3([n3(0, o3.IOptionsService)], e5);
            }();
            t4.SoundService = s3;
          }, 6349: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CircularList = void 0;
            var i3 = r3(8460), n3 = function() {
              function e5(e6) {
                this._maxLength = e6, this.onDeleteEmitter = new i3.EventEmitter(), this.onInsertEmitter = new i3.EventEmitter(), this.onTrimEmitter = new i3.EventEmitter(), this._array = new Array(this._maxLength), this._startIndex = 0, this._length = 0;
              }
              return Object.defineProperty(e5.prototype, "onDelete", { get: function() {
                return this.onDeleteEmitter.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onInsert", { get: function() {
                return this.onInsertEmitter.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "onTrim", { get: function() {
                return this.onTrimEmitter.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "maxLength", { get: function() {
                return this._maxLength;
              }, set: function(e6) {
                if (this._maxLength !== e6) {
                  for (var t5 = new Array(e6), r4 = 0; r4 < Math.min(e6, this.length); r4++)
                    t5[r4] = this._array[this._getCyclicIndex(r4)];
                  this._array = t5, this._maxLength = e6, this._startIndex = 0;
                }
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "length", { get: function() {
                return this._length;
              }, set: function(e6) {
                if (e6 > this._length)
                  for (var t5 = this._length; t5 < e6; t5++)
                    this._array[t5] = void 0;
                this._length = e6;
              }, enumerable: false, configurable: true }), e5.prototype.get = function(e6) {
                return this._array[this._getCyclicIndex(e6)];
              }, e5.prototype.set = function(e6, t5) {
                this._array[this._getCyclicIndex(e6)] = t5;
              }, e5.prototype.push = function(e6) {
                this._array[this._getCyclicIndex(this._length)] = e6, this._length === this._maxLength ? (this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1)) : this._length++;
              }, e5.prototype.recycle = function() {
                if (this._length !== this._maxLength)
                  throw new Error("Can only recycle when the buffer is full");
                return this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1), this._array[this._getCyclicIndex(this._length - 1)];
              }, Object.defineProperty(e5.prototype, "isFull", { get: function() {
                return this._length === this._maxLength;
              }, enumerable: false, configurable: true }), e5.prototype.pop = function() {
                return this._array[this._getCyclicIndex(this._length-- - 1)];
              }, e5.prototype.splice = function(e6, t5) {
                for (var r4 = [], i4 = 2; i4 < arguments.length; i4++)
                  r4[i4 - 2] = arguments[i4];
                if (t5) {
                  for (var n4 = e6; n4 < this._length - t5; n4++)
                    this._array[this._getCyclicIndex(n4)] = this._array[this._getCyclicIndex(n4 + t5)];
                  this._length -= t5, this.onDeleteEmitter.fire({ index: e6, amount: t5 });
                }
                for (n4 = this._length - 1; n4 >= e6; n4--)
                  this._array[this._getCyclicIndex(n4 + r4.length)] = this._array[this._getCyclicIndex(n4)];
                for (n4 = 0; n4 < r4.length; n4++)
                  this._array[this._getCyclicIndex(e6 + n4)] = r4[n4];
                if (r4.length && this.onInsertEmitter.fire({ index: e6, amount: r4.length }), this._length + r4.length > this._maxLength) {
                  var o3 = this._length + r4.length - this._maxLength;
                  this._startIndex += o3, this._length = this._maxLength, this.onTrimEmitter.fire(o3);
                } else
                  this._length += r4.length;
              }, e5.prototype.trimStart = function(e6) {
                e6 > this._length && (e6 = this._length), this._startIndex += e6, this._length -= e6, this.onTrimEmitter.fire(e6);
              }, e5.prototype.shiftElements = function(e6, t5, r4) {
                if (!(t5 <= 0)) {
                  if (e6 < 0 || e6 >= this._length)
                    throw new Error("start argument out of range");
                  if (e6 + r4 < 0)
                    throw new Error("Cannot shift elements in list beyond index 0");
                  if (r4 > 0) {
                    for (var i4 = t5 - 1; i4 >= 0; i4--)
                      this.set(e6 + i4 + r4, this.get(e6 + i4));
                    var n4 = e6 + t5 + r4 - this._length;
                    if (n4 > 0)
                      for (this._length += n4; this._length > this._maxLength; )
                        this._length--, this._startIndex++, this.onTrimEmitter.fire(1);
                  } else
                    for (i4 = 0; i4 < t5; i4++)
                      this.set(e6 + i4 + r4, this.get(e6 + i4));
                }
              }, e5.prototype._getCyclicIndex = function(e6) {
                return (this._startIndex + e6) % this._maxLength;
              }, e5;
            }();
            t4.CircularList = n3;
          }, 1439: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.clone = void 0, t4.clone = function e5(t5, r3) {
              if (r3 === void 0 && (r3 = 5), typeof t5 != "object")
                return t5;
              var i3 = Array.isArray(t5) ? [] : {};
              for (var n3 in t5)
                i3[n3] = r3 <= 1 ? t5[n3] : t5[n3] && e5(t5[n3], r3 - 1);
              return i3;
            };
          }, 8969: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CoreTerminal = void 0;
            var o3 = r3(844), s3 = r3(2585), a3 = r3(4348), c3 = r3(7866), l3 = r3(744), h3 = r3(7302), u3 = r3(6975), f3 = r3(8460), _3 = r3(1753), d3 = r3(3730), p3 = r3(1480), v2 = r3(7994), g3 = r3(9282), y3 = r3(5435), m2 = r3(5981), S2 = false, C2 = function(e5) {
              function t5(t6) {
                var r4 = e5.call(this) || this;
                return r4._onBinary = new f3.EventEmitter(), r4._onData = new f3.EventEmitter(), r4._onLineFeed = new f3.EventEmitter(), r4._onResize = new f3.EventEmitter(), r4._onScroll = new f3.EventEmitter(), r4._instantiationService = new a3.InstantiationService(), r4.optionsService = new h3.OptionsService(t6), r4._instantiationService.setService(s3.IOptionsService, r4.optionsService), r4._bufferService = r4.register(r4._instantiationService.createInstance(l3.BufferService)), r4._instantiationService.setService(s3.IBufferService, r4._bufferService), r4._logService = r4._instantiationService.createInstance(c3.LogService), r4._instantiationService.setService(s3.ILogService, r4._logService), r4.coreService = r4.register(r4._instantiationService.createInstance(u3.CoreService, function() {
                  return r4.scrollToBottom();
                })), r4._instantiationService.setService(s3.ICoreService, r4.coreService), r4.coreMouseService = r4._instantiationService.createInstance(_3.CoreMouseService), r4._instantiationService.setService(s3.ICoreMouseService, r4.coreMouseService), r4._dirtyRowService = r4._instantiationService.createInstance(d3.DirtyRowService), r4._instantiationService.setService(s3.IDirtyRowService, r4._dirtyRowService), r4.unicodeService = r4._instantiationService.createInstance(p3.UnicodeService), r4._instantiationService.setService(s3.IUnicodeService, r4.unicodeService), r4._charsetService = r4._instantiationService.createInstance(v2.CharsetService), r4._instantiationService.setService(s3.ICharsetService, r4._charsetService), r4._inputHandler = new y3.InputHandler(r4._bufferService, r4._charsetService, r4.coreService, r4._dirtyRowService, r4._logService, r4.optionsService, r4.coreMouseService, r4.unicodeService), r4.register((0, f3.forwardEvent)(r4._inputHandler.onLineFeed, r4._onLineFeed)), r4.register(r4._inputHandler), r4.register((0, f3.forwardEvent)(r4._bufferService.onResize, r4._onResize)), r4.register((0, f3.forwardEvent)(r4.coreService.onData, r4._onData)), r4.register((0, f3.forwardEvent)(r4.coreService.onBinary, r4._onBinary)), r4.register(r4.optionsService.onOptionChange(function(e6) {
                  return r4._updateOptions(e6);
                })), r4.register(r4._bufferService.onScroll(function(e6) {
                  r4._onScroll.fire({ position: r4._bufferService.buffer.ydisp, source: 0 }), r4._dirtyRowService.markRangeDirty(r4._bufferService.buffer.scrollTop, r4._bufferService.buffer.scrollBottom);
                })), r4.register(r4._inputHandler.onScroll(function(e6) {
                  r4._onScroll.fire({ position: r4._bufferService.buffer.ydisp, source: 0 }), r4._dirtyRowService.markRangeDirty(r4._bufferService.buffer.scrollTop, r4._bufferService.buffer.scrollBottom);
                })), r4._writeBuffer = new m2.WriteBuffer(function(e6, t7) {
                  return r4._inputHandler.parse(e6, t7);
                }), r4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "onBinary", { get: function() {
                return this._onBinary.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onData", { get: function() {
                return this._onData.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onLineFeed", { get: function() {
                return this._onLineFeed.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onResize", { get: function() {
                return this._onResize.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onScroll", { get: function() {
                var e6 = this;
                return this._onScrollApi || (this._onScrollApi = new f3.EventEmitter(), this.register(this._onScroll.event(function(t6) {
                  var r4;
                  (r4 = e6._onScrollApi) === null || r4 === void 0 || r4.fire(t6.position);
                }))), this._onScrollApi.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "cols", { get: function() {
                return this._bufferService.cols;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "rows", { get: function() {
                return this._bufferService.rows;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "buffers", { get: function() {
                return this._bufferService.buffers;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "options", { get: function() {
                return this.optionsService.options;
              }, set: function(e6) {
                for (var t6 in e6)
                  this.optionsService.options[t6] = e6[t6];
              }, enumerable: false, configurable: true }), t5.prototype.dispose = function() {
                var t6;
                this._isDisposed || (e5.prototype.dispose.call(this), (t6 = this._windowsMode) === null || t6 === void 0 || t6.dispose(), this._windowsMode = void 0);
              }, t5.prototype.write = function(e6, t6) {
                this._writeBuffer.write(e6, t6);
              }, t5.prototype.writeSync = function(e6, t6) {
                this._logService.logLevel <= s3.LogLevelEnum.WARN && !S2 && (this._logService.warn("writeSync is unreliable and will be removed soon."), S2 = true), this._writeBuffer.writeSync(e6, t6);
              }, t5.prototype.resize = function(e6, t6) {
                isNaN(e6) || isNaN(t6) || (e6 = Math.max(e6, l3.MINIMUM_COLS), t6 = Math.max(t6, l3.MINIMUM_ROWS), this._bufferService.resize(e6, t6));
              }, t5.prototype.scroll = function(e6, t6) {
                t6 === void 0 && (t6 = false), this._bufferService.scroll(e6, t6);
              }, t5.prototype.scrollLines = function(e6, t6, r4) {
                this._bufferService.scrollLines(e6, t6, r4);
              }, t5.prototype.scrollPages = function(e6) {
                this._bufferService.scrollPages(e6);
              }, t5.prototype.scrollToTop = function() {
                this._bufferService.scrollToTop();
              }, t5.prototype.scrollToBottom = function() {
                this._bufferService.scrollToBottom();
              }, t5.prototype.scrollToLine = function(e6) {
                this._bufferService.scrollToLine(e6);
              }, t5.prototype.registerEscHandler = function(e6, t6) {
                return this._inputHandler.registerEscHandler(e6, t6);
              }, t5.prototype.registerDcsHandler = function(e6, t6) {
                return this._inputHandler.registerDcsHandler(e6, t6);
              }, t5.prototype.registerCsiHandler = function(e6, t6) {
                return this._inputHandler.registerCsiHandler(e6, t6);
              }, t5.prototype.registerOscHandler = function(e6, t6) {
                return this._inputHandler.registerOscHandler(e6, t6);
              }, t5.prototype._setup = function() {
                this.optionsService.rawOptions.windowsMode && this._enableWindowsMode();
              }, t5.prototype.reset = function() {
                this._inputHandler.reset(), this._bufferService.reset(), this._charsetService.reset(), this.coreService.reset(), this.coreMouseService.reset();
              }, t5.prototype._updateOptions = function(e6) {
                var t6;
                switch (e6) {
                  case "scrollback":
                    this.buffers.resize(this.cols, this.rows);
                    break;
                  case "windowsMode":
                    this.optionsService.rawOptions.windowsMode ? this._enableWindowsMode() : ((t6 = this._windowsMode) === null || t6 === void 0 || t6.dispose(), this._windowsMode = void 0);
                }
              }, t5.prototype._enableWindowsMode = function() {
                var e6 = this;
                if (!this._windowsMode) {
                  var t6 = [];
                  t6.push(this.onLineFeed(g3.updateWindowsModeWrappedState.bind(null, this._bufferService))), t6.push(this.registerCsiHandler({ final: "H" }, function() {
                    return (0, g3.updateWindowsModeWrappedState)(e6._bufferService), false;
                  })), this._windowsMode = { dispose: function() {
                    for (var e7 = 0, r4 = t6; e7 < r4.length; e7++)
                      r4[e7].dispose();
                  } };
                }
              }, t5;
            }(o3.Disposable);
            t4.CoreTerminal = C2;
          }, 8460: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.forwardEvent = t4.EventEmitter = void 0;
            var r3 = function() {
              function e5() {
                this._listeners = [], this._disposed = false;
              }
              return Object.defineProperty(e5.prototype, "event", { get: function() {
                var e6 = this;
                return this._event || (this._event = function(t5) {
                  return e6._listeners.push(t5), { dispose: function() {
                    if (!e6._disposed) {
                      for (var r4 = 0; r4 < e6._listeners.length; r4++)
                        if (e6._listeners[r4] === t5)
                          return void e6._listeners.splice(r4, 1);
                    }
                  } };
                }), this._event;
              }, enumerable: false, configurable: true }), e5.prototype.fire = function(e6, t5) {
                for (var r4 = [], i3 = 0; i3 < this._listeners.length; i3++)
                  r4.push(this._listeners[i3]);
                for (i3 = 0; i3 < r4.length; i3++)
                  r4[i3].call(void 0, e6, t5);
              }, e5.prototype.dispose = function() {
                this._listeners && (this._listeners.length = 0), this._disposed = true;
              }, e5;
            }();
            t4.EventEmitter = r3, t4.forwardEvent = function(e5, t5) {
              return e5(function(e6) {
                return t5.fire(e6);
              });
            };
          }, 5435: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.InputHandler = t4.WindowsOptionsReportType = void 0;
            var o3, s3 = r3(2584), a3 = r3(7116), c3 = r3(2015), l3 = r3(844), h3 = r3(8273), u3 = r3(482), f3 = r3(8437), _3 = r3(8460), d3 = r3(643), p3 = r3(511), v2 = r3(3734), g3 = r3(2585), y3 = r3(6242), m2 = r3(6351), S2 = r3(5941), C2 = { "(": 0, ")": 1, "*": 2, "+": 3, "-": 1, ".": 2 }, b3 = 131072;
            function w3(e5, t5) {
              if (e5 > 24)
                return t5.setWinLines || false;
              switch (e5) {
                case 1:
                  return !!t5.restoreWin;
                case 2:
                  return !!t5.minimizeWin;
                case 3:
                  return !!t5.setWinPosition;
                case 4:
                  return !!t5.setWinSizePixels;
                case 5:
                  return !!t5.raiseWin;
                case 6:
                  return !!t5.lowerWin;
                case 7:
                  return !!t5.refreshWin;
                case 8:
                  return !!t5.setWinSizeChars;
                case 9:
                  return !!t5.maximizeWin;
                case 10:
                  return !!t5.fullscreenWin;
                case 11:
                  return !!t5.getWinState;
                case 13:
                  return !!t5.getWinPosition;
                case 14:
                  return !!t5.getWinSizePixels;
                case 15:
                  return !!t5.getScreenSizePixels;
                case 16:
                  return !!t5.getCellSizePixels;
                case 18:
                  return !!t5.getWinSizeChars;
                case 19:
                  return !!t5.getScreenSizeChars;
                case 20:
                  return !!t5.getIconTitle;
                case 21:
                  return !!t5.getWinTitle;
                case 22:
                  return !!t5.pushTitle;
                case 23:
                  return !!t5.popTitle;
                case 24:
                  return !!t5.setWinLines;
              }
              return false;
            }
            !function(e5) {
              e5[e5.GET_WIN_SIZE_PIXELS = 0] = "GET_WIN_SIZE_PIXELS", e5[e5.GET_CELL_SIZE_PIXELS = 1] = "GET_CELL_SIZE_PIXELS";
            }(o3 = t4.WindowsOptionsReportType || (t4.WindowsOptionsReportType = {}));
            var L2 = function() {
              function e5(e6, t5, r4, i4) {
                this._bufferService = e6, this._coreService = t5, this._logService = r4, this._optionsService = i4, this._data = new Uint32Array(0);
              }
              return e5.prototype.hook = function(e6) {
                this._data = new Uint32Array(0);
              }, e5.prototype.put = function(e6, t5, r4) {
                this._data = (0, h3.concat)(this._data, e6.subarray(t5, r4));
              }, e5.prototype.unhook = function(e6) {
                if (!e6)
                  return this._data = new Uint32Array(0), true;
                var t5 = (0, u3.utf32ToString)(this._data);
                switch (this._data = new Uint32Array(0), t5) {
                  case '"q':
                    this._coreService.triggerDataEvent(s3.C0.ESC + 'P1$r0"q' + s3.C0.ESC + "\\");
                    break;
                  case '"p':
                    this._coreService.triggerDataEvent(s3.C0.ESC + 'P1$r61;1"p' + s3.C0.ESC + "\\");
                    break;
                  case "r":
                    var r4 = this._bufferService.buffer.scrollTop + 1 + ";" + (this._bufferService.buffer.scrollBottom + 1) + "r";
                    this._coreService.triggerDataEvent(s3.C0.ESC + "P1$r" + r4 + s3.C0.ESC + "\\");
                    break;
                  case "m":
                    this._coreService.triggerDataEvent(s3.C0.ESC + "P1$r0m" + s3.C0.ESC + "\\");
                    break;
                  case " q":
                    var i4 = { block: 2, underline: 4, bar: 6 }[this._optionsService.rawOptions.cursorStyle];
                    i4 -= this._optionsService.rawOptions.cursorBlink ? 1 : 0, this._coreService.triggerDataEvent(s3.C0.ESC + "P1$r" + i4 + " q" + s3.C0.ESC + "\\");
                    break;
                  default:
                    this._logService.debug("Unknown DCS $q %s", t5), this._coreService.triggerDataEvent(s3.C0.ESC + "P0$r" + s3.C0.ESC + "\\");
                }
                return true;
              }, e5;
            }(), E2 = function(e5) {
              function t5(t6, r4, i4, n4, o4, l4, h4, d4, v3) {
                v3 === void 0 && (v3 = new c3.EscapeSequenceParser());
                var g4 = e5.call(this) || this;
                g4._bufferService = t6, g4._charsetService = r4, g4._coreService = i4, g4._dirtyRowService = n4, g4._logService = o4, g4._optionsService = l4, g4._coreMouseService = h4, g4._unicodeService = d4, g4._parser = v3, g4._parseBuffer = new Uint32Array(4096), g4._stringDecoder = new u3.StringToUtf32(), g4._utf8Decoder = new u3.Utf8ToUtf32(), g4._workCell = new p3.CellData(), g4._windowTitle = "", g4._iconName = "", g4._windowTitleStack = [], g4._iconNameStack = [], g4._curAttrData = f3.DEFAULT_ATTR_DATA.clone(), g4._eraseAttrDataInternal = f3.DEFAULT_ATTR_DATA.clone(), g4._onRequestBell = new _3.EventEmitter(), g4._onRequestRefreshRows = new _3.EventEmitter(), g4._onRequestReset = new _3.EventEmitter(), g4._onRequestSendFocus = new _3.EventEmitter(), g4._onRequestSyncScrollBar = new _3.EventEmitter(), g4._onRequestWindowsOptionsReport = new _3.EventEmitter(), g4._onA11yChar = new _3.EventEmitter(), g4._onA11yTab = new _3.EventEmitter(), g4._onCursorMove = new _3.EventEmitter(), g4._onLineFeed = new _3.EventEmitter(), g4._onScroll = new _3.EventEmitter(), g4._onTitleChange = new _3.EventEmitter(), g4._onColor = new _3.EventEmitter(), g4._parseStack = { paused: false, cursorStartX: 0, cursorStartY: 0, decodedLength: 0, position: 0 }, g4._specialColors = [256, 257, 258], g4.register(g4._parser), g4._activeBuffer = g4._bufferService.buffer, g4.register(g4._bufferService.buffers.onBufferActivate(function(e6) {
                  return g4._activeBuffer = e6.activeBuffer;
                })), g4._parser.setCsiHandlerFallback(function(e6, t7) {
                  g4._logService.debug("Unknown CSI code: ", { identifier: g4._parser.identToString(e6), params: t7.toArray() });
                }), g4._parser.setEscHandlerFallback(function(e6) {
                  g4._logService.debug("Unknown ESC code: ", { identifier: g4._parser.identToString(e6) });
                }), g4._parser.setExecuteHandlerFallback(function(e6) {
                  g4._logService.debug("Unknown EXECUTE code: ", { code: e6 });
                }), g4._parser.setOscHandlerFallback(function(e6, t7, r5) {
                  g4._logService.debug("Unknown OSC code: ", { identifier: e6, action: t7, data: r5 });
                }), g4._parser.setDcsHandlerFallback(function(e6, t7, r5) {
                  t7 === "HOOK" && (r5 = r5.toArray()), g4._logService.debug("Unknown DCS code: ", { identifier: g4._parser.identToString(e6), action: t7, payload: r5 });
                }), g4._parser.setPrintHandler(function(e6, t7, r5) {
                  return g4.print(e6, t7, r5);
                }), g4._parser.registerCsiHandler({ final: "@" }, function(e6) {
                  return g4.insertChars(e6);
                }), g4._parser.registerCsiHandler({ intermediates: " ", final: "@" }, function(e6) {
                  return g4.scrollLeft(e6);
                }), g4._parser.registerCsiHandler({ final: "A" }, function(e6) {
                  return g4.cursorUp(e6);
                }), g4._parser.registerCsiHandler({ intermediates: " ", final: "A" }, function(e6) {
                  return g4.scrollRight(e6);
                }), g4._parser.registerCsiHandler({ final: "B" }, function(e6) {
                  return g4.cursorDown(e6);
                }), g4._parser.registerCsiHandler({ final: "C" }, function(e6) {
                  return g4.cursorForward(e6);
                }), g4._parser.registerCsiHandler({ final: "D" }, function(e6) {
                  return g4.cursorBackward(e6);
                }), g4._parser.registerCsiHandler({ final: "E" }, function(e6) {
                  return g4.cursorNextLine(e6);
                }), g4._parser.registerCsiHandler({ final: "F" }, function(e6) {
                  return g4.cursorPrecedingLine(e6);
                }), g4._parser.registerCsiHandler({ final: "G" }, function(e6) {
                  return g4.cursorCharAbsolute(e6);
                }), g4._parser.registerCsiHandler({ final: "H" }, function(e6) {
                  return g4.cursorPosition(e6);
                }), g4._parser.registerCsiHandler({ final: "I" }, function(e6) {
                  return g4.cursorForwardTab(e6);
                }), g4._parser.registerCsiHandler({ final: "J" }, function(e6) {
                  return g4.eraseInDisplay(e6);
                }), g4._parser.registerCsiHandler({ prefix: "?", final: "J" }, function(e6) {
                  return g4.eraseInDisplay(e6);
                }), g4._parser.registerCsiHandler({ final: "K" }, function(e6) {
                  return g4.eraseInLine(e6);
                }), g4._parser.registerCsiHandler({ prefix: "?", final: "K" }, function(e6) {
                  return g4.eraseInLine(e6);
                }), g4._parser.registerCsiHandler({ final: "L" }, function(e6) {
                  return g4.insertLines(e6);
                }), g4._parser.registerCsiHandler({ final: "M" }, function(e6) {
                  return g4.deleteLines(e6);
                }), g4._parser.registerCsiHandler({ final: "P" }, function(e6) {
                  return g4.deleteChars(e6);
                }), g4._parser.registerCsiHandler({ final: "S" }, function(e6) {
                  return g4.scrollUp(e6);
                }), g4._parser.registerCsiHandler({ final: "T" }, function(e6) {
                  return g4.scrollDown(e6);
                }), g4._parser.registerCsiHandler({ final: "X" }, function(e6) {
                  return g4.eraseChars(e6);
                }), g4._parser.registerCsiHandler({ final: "Z" }, function(e6) {
                  return g4.cursorBackwardTab(e6);
                }), g4._parser.registerCsiHandler({ final: "`" }, function(e6) {
                  return g4.charPosAbsolute(e6);
                }), g4._parser.registerCsiHandler({ final: "a" }, function(e6) {
                  return g4.hPositionRelative(e6);
                }), g4._parser.registerCsiHandler({ final: "b" }, function(e6) {
                  return g4.repeatPrecedingCharacter(e6);
                }), g4._parser.registerCsiHandler({ final: "c" }, function(e6) {
                  return g4.sendDeviceAttributesPrimary(e6);
                }), g4._parser.registerCsiHandler({ prefix: ">", final: "c" }, function(e6) {
                  return g4.sendDeviceAttributesSecondary(e6);
                }), g4._parser.registerCsiHandler({ final: "d" }, function(e6) {
                  return g4.linePosAbsolute(e6);
                }), g4._parser.registerCsiHandler({ final: "e" }, function(e6) {
                  return g4.vPositionRelative(e6);
                }), g4._parser.registerCsiHandler({ final: "f" }, function(e6) {
                  return g4.hVPosition(e6);
                }), g4._parser.registerCsiHandler({ final: "g" }, function(e6) {
                  return g4.tabClear(e6);
                }), g4._parser.registerCsiHandler({ final: "h" }, function(e6) {
                  return g4.setMode(e6);
                }), g4._parser.registerCsiHandler({ prefix: "?", final: "h" }, function(e6) {
                  return g4.setModePrivate(e6);
                }), g4._parser.registerCsiHandler({ final: "l" }, function(e6) {
                  return g4.resetMode(e6);
                }), g4._parser.registerCsiHandler({ prefix: "?", final: "l" }, function(e6) {
                  return g4.resetModePrivate(e6);
                }), g4._parser.registerCsiHandler({ final: "m" }, function(e6) {
                  return g4.charAttributes(e6);
                }), g4._parser.registerCsiHandler({ final: "n" }, function(e6) {
                  return g4.deviceStatus(e6);
                }), g4._parser.registerCsiHandler({ prefix: "?", final: "n" }, function(e6) {
                  return g4.deviceStatusPrivate(e6);
                }), g4._parser.registerCsiHandler({ intermediates: "!", final: "p" }, function(e6) {
                  return g4.softReset(e6);
                }), g4._parser.registerCsiHandler({ intermediates: " ", final: "q" }, function(e6) {
                  return g4.setCursorStyle(e6);
                }), g4._parser.registerCsiHandler({ final: "r" }, function(e6) {
                  return g4.setScrollRegion(e6);
                }), g4._parser.registerCsiHandler({ final: "s" }, function(e6) {
                  return g4.saveCursor(e6);
                }), g4._parser.registerCsiHandler({ final: "t" }, function(e6) {
                  return g4.windowOptions(e6);
                }), g4._parser.registerCsiHandler({ final: "u" }, function(e6) {
                  return g4.restoreCursor(e6);
                }), g4._parser.registerCsiHandler({ intermediates: "'", final: "}" }, function(e6) {
                  return g4.insertColumns(e6);
                }), g4._parser.registerCsiHandler({ intermediates: "'", final: "~" }, function(e6) {
                  return g4.deleteColumns(e6);
                }), g4._parser.setExecuteHandler(s3.C0.BEL, function() {
                  return g4.bell();
                }), g4._parser.setExecuteHandler(s3.C0.LF, function() {
                  return g4.lineFeed();
                }), g4._parser.setExecuteHandler(s3.C0.VT, function() {
                  return g4.lineFeed();
                }), g4._parser.setExecuteHandler(s3.C0.FF, function() {
                  return g4.lineFeed();
                }), g4._parser.setExecuteHandler(s3.C0.CR, function() {
                  return g4.carriageReturn();
                }), g4._parser.setExecuteHandler(s3.C0.BS, function() {
                  return g4.backspace();
                }), g4._parser.setExecuteHandler(s3.C0.HT, function() {
                  return g4.tab();
                }), g4._parser.setExecuteHandler(s3.C0.SO, function() {
                  return g4.shiftOut();
                }), g4._parser.setExecuteHandler(s3.C0.SI, function() {
                  return g4.shiftIn();
                }), g4._parser.setExecuteHandler(s3.C1.IND, function() {
                  return g4.index();
                }), g4._parser.setExecuteHandler(s3.C1.NEL, function() {
                  return g4.nextLine();
                }), g4._parser.setExecuteHandler(s3.C1.HTS, function() {
                  return g4.tabSet();
                }), g4._parser.registerOscHandler(0, new y3.OscHandler(function(e6) {
                  return g4.setTitle(e6), g4.setIconName(e6), true;
                })), g4._parser.registerOscHandler(1, new y3.OscHandler(function(e6) {
                  return g4.setIconName(e6);
                })), g4._parser.registerOscHandler(2, new y3.OscHandler(function(e6) {
                  return g4.setTitle(e6);
                })), g4._parser.registerOscHandler(4, new y3.OscHandler(function(e6) {
                  return g4.setOrReportIndexedColor(e6);
                })), g4._parser.registerOscHandler(10, new y3.OscHandler(function(e6) {
                  return g4.setOrReportFgColor(e6);
                })), g4._parser.registerOscHandler(11, new y3.OscHandler(function(e6) {
                  return g4.setOrReportBgColor(e6);
                })), g4._parser.registerOscHandler(12, new y3.OscHandler(function(e6) {
                  return g4.setOrReportCursorColor(e6);
                })), g4._parser.registerOscHandler(104, new y3.OscHandler(function(e6) {
                  return g4.restoreIndexedColor(e6);
                })), g4._parser.registerOscHandler(110, new y3.OscHandler(function(e6) {
                  return g4.restoreFgColor(e6);
                })), g4._parser.registerOscHandler(111, new y3.OscHandler(function(e6) {
                  return g4.restoreBgColor(e6);
                })), g4._parser.registerOscHandler(112, new y3.OscHandler(function(e6) {
                  return g4.restoreCursorColor(e6);
                })), g4._parser.registerEscHandler({ final: "7" }, function() {
                  return g4.saveCursor();
                }), g4._parser.registerEscHandler({ final: "8" }, function() {
                  return g4.restoreCursor();
                }), g4._parser.registerEscHandler({ final: "D" }, function() {
                  return g4.index();
                }), g4._parser.registerEscHandler({ final: "E" }, function() {
                  return g4.nextLine();
                }), g4._parser.registerEscHandler({ final: "H" }, function() {
                  return g4.tabSet();
                }), g4._parser.registerEscHandler({ final: "M" }, function() {
                  return g4.reverseIndex();
                }), g4._parser.registerEscHandler({ final: "=" }, function() {
                  return g4.keypadApplicationMode();
                }), g4._parser.registerEscHandler({ final: ">" }, function() {
                  return g4.keypadNumericMode();
                }), g4._parser.registerEscHandler({ final: "c" }, function() {
                  return g4.fullReset();
                }), g4._parser.registerEscHandler({ final: "n" }, function() {
                  return g4.setgLevel(2);
                }), g4._parser.registerEscHandler({ final: "o" }, function() {
                  return g4.setgLevel(3);
                }), g4._parser.registerEscHandler({ final: "|" }, function() {
                  return g4.setgLevel(3);
                }), g4._parser.registerEscHandler({ final: "}" }, function() {
                  return g4.setgLevel(2);
                }), g4._parser.registerEscHandler({ final: "~" }, function() {
                  return g4.setgLevel(1);
                }), g4._parser.registerEscHandler({ intermediates: "%", final: "@" }, function() {
                  return g4.selectDefaultCharset();
                }), g4._parser.registerEscHandler({ intermediates: "%", final: "G" }, function() {
                  return g4.selectDefaultCharset();
                });
                var m3 = function(e6) {
                  S3._parser.registerEscHandler({ intermediates: "(", final: e6 }, function() {
                    return g4.selectCharset("(" + e6);
                  }), S3._parser.registerEscHandler({ intermediates: ")", final: e6 }, function() {
                    return g4.selectCharset(")" + e6);
                  }), S3._parser.registerEscHandler({ intermediates: "*", final: e6 }, function() {
                    return g4.selectCharset("*" + e6);
                  }), S3._parser.registerEscHandler({ intermediates: "+", final: e6 }, function() {
                    return g4.selectCharset("+" + e6);
                  }), S3._parser.registerEscHandler({ intermediates: "-", final: e6 }, function() {
                    return g4.selectCharset("-" + e6);
                  }), S3._parser.registerEscHandler({ intermediates: ".", final: e6 }, function() {
                    return g4.selectCharset("." + e6);
                  }), S3._parser.registerEscHandler({ intermediates: "/", final: e6 }, function() {
                    return g4.selectCharset("/" + e6);
                  });
                }, S3 = this;
                for (var C3 in a3.CHARSETS)
                  m3(C3);
                return g4._parser.registerEscHandler({ intermediates: "#", final: "8" }, function() {
                  return g4.screenAlignmentPattern();
                }), g4._parser.setErrorHandler(function(e6) {
                  return g4._logService.error("Parsing error: ", e6), e6;
                }), g4._parser.registerDcsHandler({ intermediates: "$", final: "q" }, new L2(g4._bufferService, g4._coreService, g4._logService, g4._optionsService)), g4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "onRequestBell", { get: function() {
                return this._onRequestBell.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRequestRefreshRows", { get: function() {
                return this._onRequestRefreshRows.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRequestReset", { get: function() {
                return this._onRequestReset.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRequestSendFocus", { get: function() {
                return this._onRequestSendFocus.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRequestSyncScrollBar", { get: function() {
                return this._onRequestSyncScrollBar.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onRequestWindowsOptionsReport", { get: function() {
                return this._onRequestWindowsOptionsReport.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onA11yChar", { get: function() {
                return this._onA11yChar.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onA11yTab", { get: function() {
                return this._onA11yTab.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onCursorMove", { get: function() {
                return this._onCursorMove.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onLineFeed", { get: function() {
                return this._onLineFeed.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onScroll", { get: function() {
                return this._onScroll.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onTitleChange", { get: function() {
                return this._onTitleChange.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onColor", { get: function() {
                return this._onColor.event;
              }, enumerable: false, configurable: true }), t5.prototype.dispose = function() {
                e5.prototype.dispose.call(this);
              }, t5.prototype._preserveStack = function(e6, t6, r4, i4) {
                this._parseStack.paused = true, this._parseStack.cursorStartX = e6, this._parseStack.cursorStartY = t6, this._parseStack.decodedLength = r4, this._parseStack.position = i4;
              }, t5.prototype._logSlowResolvingAsync = function(e6) {
                this._logService.logLevel <= g3.LogLevelEnum.WARN && Promise.race([e6, new Promise(function(e7, t6) {
                  return setTimeout(function() {
                    return t6("#SLOW_TIMEOUT");
                  }, 5e3);
                })]).catch(function(e7) {
                  if (e7 !== "#SLOW_TIMEOUT")
                    throw e7;
                  console.warn("async parser handler taking longer than 5000 ms");
                });
              }, t5.prototype.parse = function(e6, t6) {
                var r4, i4 = this._activeBuffer.x, n4 = this._activeBuffer.y, o4 = 0, s4 = this._parseStack.paused;
                if (s4) {
                  if (r4 = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, t6))
                    return this._logSlowResolvingAsync(r4), r4;
                  i4 = this._parseStack.cursorStartX, n4 = this._parseStack.cursorStartY, this._parseStack.paused = false, e6.length > b3 && (o4 = this._parseStack.position + b3);
                }
                if (this._logService.logLevel <= g3.LogLevelEnum.DEBUG && this._logService.debug("parsing data" + (typeof e6 == "string" ? ' "' + e6 + '"' : ' "' + Array.prototype.map.call(e6, function(e7) {
                  return String.fromCharCode(e7);
                }).join("") + '"'), typeof e6 == "string" ? e6.split("").map(function(e7) {
                  return e7.charCodeAt(0);
                }) : e6), this._parseBuffer.length < e6.length && this._parseBuffer.length < b3 && (this._parseBuffer = new Uint32Array(Math.min(e6.length, b3))), s4 || this._dirtyRowService.clearRange(), e6.length > b3)
                  for (var a4 = o4; a4 < e6.length; a4 += b3) {
                    var c4 = a4 + b3 < e6.length ? a4 + b3 : e6.length, l4 = typeof e6 == "string" ? this._stringDecoder.decode(e6.substring(a4, c4), this._parseBuffer) : this._utf8Decoder.decode(e6.subarray(a4, c4), this._parseBuffer);
                    if (r4 = this._parser.parse(this._parseBuffer, l4))
                      return this._preserveStack(i4, n4, l4, a4), this._logSlowResolvingAsync(r4), r4;
                  }
                else if (!s4 && (l4 = typeof e6 == "string" ? this._stringDecoder.decode(e6, this._parseBuffer) : this._utf8Decoder.decode(e6, this._parseBuffer), r4 = this._parser.parse(this._parseBuffer, l4)))
                  return this._preserveStack(i4, n4, l4, 0), this._logSlowResolvingAsync(r4), r4;
                this._activeBuffer.x === i4 && this._activeBuffer.y === n4 || this._onCursorMove.fire(), this._onRequestRefreshRows.fire(this._dirtyRowService.start, this._dirtyRowService.end);
              }, t5.prototype.print = function(e6, t6, r4) {
                var i4, n4, o4 = this._charsetService.charset, s4 = this._optionsService.rawOptions.screenReaderMode, a4 = this._bufferService.cols, c4 = this._coreService.decPrivateModes.wraparound, l4 = this._coreService.modes.insertMode, h4 = this._curAttrData, f4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                this._dirtyRowService.markDirty(this._activeBuffer.y), this._activeBuffer.x && r4 - t6 > 0 && f4.getWidth(this._activeBuffer.x - 1) === 2 && f4.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, h4.fg, h4.bg, h4.extended);
                for (var _4 = t6; _4 < r4; ++_4) {
                  if (i4 = e6[_4], n4 = this._unicodeService.wcwidth(i4), i4 < 127 && o4) {
                    var p4 = o4[String.fromCharCode(i4)];
                    p4 && (i4 = p4.charCodeAt(0));
                  }
                  if (s4 && this._onA11yChar.fire((0, u3.stringFromCodePoint)(i4)), n4 || !this._activeBuffer.x) {
                    if (this._activeBuffer.x + n4 - 1 >= a4) {
                      if (c4) {
                        for (; this._activeBuffer.x < a4; )
                          f4.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, h4.fg, h4.bg, h4.extended);
                        this._activeBuffer.x = 0, this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData(), true)) : (this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = true), f4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                      } else if (this._activeBuffer.x = a4 - 1, n4 === 2)
                        continue;
                    }
                    if (l4 && (f4.insertCells(this._activeBuffer.x, n4, this._activeBuffer.getNullCell(h4), h4), f4.getWidth(a4 - 1) === 2 && f4.setCellFromCodePoint(a4 - 1, d3.NULL_CELL_CODE, d3.NULL_CELL_WIDTH, h4.fg, h4.bg, h4.extended)), f4.setCellFromCodePoint(this._activeBuffer.x++, i4, n4, h4.fg, h4.bg, h4.extended), n4 > 0)
                      for (; --n4; )
                        f4.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, h4.fg, h4.bg, h4.extended);
                  } else
                    f4.getWidth(this._activeBuffer.x - 1) ? f4.addCodepointToCell(this._activeBuffer.x - 1, i4) : f4.addCodepointToCell(this._activeBuffer.x - 2, i4);
                }
                r4 - t6 > 0 && (f4.loadCell(this._activeBuffer.x - 1, this._workCell), this._workCell.getWidth() === 2 || this._workCell.getCode() > 65535 ? this._parser.precedingCodepoint = 0 : this._workCell.isCombined() ? this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0) : this._parser.precedingCodepoint = this._workCell.content), this._activeBuffer.x < a4 && r4 - t6 > 0 && f4.getWidth(this._activeBuffer.x) === 0 && !f4.hasContent(this._activeBuffer.x) && f4.setCellFromCodePoint(this._activeBuffer.x, 0, 1, h4.fg, h4.bg, h4.extended), this._dirtyRowService.markDirty(this._activeBuffer.y);
              }, t5.prototype.registerCsiHandler = function(e6, t6) {
                var r4 = this;
                return e6.final !== "t" || e6.prefix || e6.intermediates ? this._parser.registerCsiHandler(e6, t6) : this._parser.registerCsiHandler(e6, function(e7) {
                  return !w3(e7.params[0], r4._optionsService.rawOptions.windowOptions) || t6(e7);
                });
              }, t5.prototype.registerDcsHandler = function(e6, t6) {
                return this._parser.registerDcsHandler(e6, new m2.DcsHandler(t6));
              }, t5.prototype.registerEscHandler = function(e6, t6) {
                return this._parser.registerEscHandler(e6, t6);
              }, t5.prototype.registerOscHandler = function(e6, t6) {
                return this._parser.registerOscHandler(e6, new y3.OscHandler(t6));
              }, t5.prototype.bell = function() {
                return this._onRequestBell.fire(), true;
              }, t5.prototype.lineFeed = function() {
                return this._dirtyRowService.markDirty(this._activeBuffer.y), this._optionsService.rawOptions.convertEol && (this._activeBuffer.x = 0), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._activeBuffer.x >= this._bufferService.cols && this._activeBuffer.x--, this._dirtyRowService.markDirty(this._activeBuffer.y), this._onLineFeed.fire(), true;
              }, t5.prototype.carriageReturn = function() {
                return this._activeBuffer.x = 0, true;
              }, t5.prototype.backspace = function() {
                var e6;
                if (!this._coreService.decPrivateModes.reverseWraparound)
                  return this._restrictCursor(), this._activeBuffer.x > 0 && this._activeBuffer.x--, true;
                if (this._restrictCursor(this._bufferService.cols), this._activeBuffer.x > 0)
                  this._activeBuffer.x--;
                else if (this._activeBuffer.x === 0 && this._activeBuffer.y > this._activeBuffer.scrollTop && this._activeBuffer.y <= this._activeBuffer.scrollBottom && ((e6 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)) === null || e6 === void 0 ? void 0 : e6.isWrapped)) {
                  this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = false, this._activeBuffer.y--, this._activeBuffer.x = this._bufferService.cols - 1;
                  var t6 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                  t6.hasWidth(this._activeBuffer.x) && !t6.hasContent(this._activeBuffer.x) && this._activeBuffer.x--;
                }
                return this._restrictCursor(), true;
              }, t5.prototype.tab = function() {
                if (this._activeBuffer.x >= this._bufferService.cols)
                  return true;
                var e6 = this._activeBuffer.x;
                return this._activeBuffer.x = this._activeBuffer.nextStop(), this._optionsService.rawOptions.screenReaderMode && this._onA11yTab.fire(this._activeBuffer.x - e6), true;
              }, t5.prototype.shiftOut = function() {
                return this._charsetService.setgLevel(1), true;
              }, t5.prototype.shiftIn = function() {
                return this._charsetService.setgLevel(0), true;
              }, t5.prototype._restrictCursor = function(e6) {
                e6 === void 0 && (e6 = this._bufferService.cols - 1), this._activeBuffer.x = Math.min(e6, Math.max(0, this._activeBuffer.x)), this._activeBuffer.y = this._coreService.decPrivateModes.origin ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y)) : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y)), this._dirtyRowService.markDirty(this._activeBuffer.y);
              }, t5.prototype._setCursor = function(e6, t6) {
                this._dirtyRowService.markDirty(this._activeBuffer.y), this._coreService.decPrivateModes.origin ? (this._activeBuffer.x = e6, this._activeBuffer.y = this._activeBuffer.scrollTop + t6) : (this._activeBuffer.x = e6, this._activeBuffer.y = t6), this._restrictCursor(), this._dirtyRowService.markDirty(this._activeBuffer.y);
              }, t5.prototype._moveCursor = function(e6, t6) {
                this._restrictCursor(), this._setCursor(this._activeBuffer.x + e6, this._activeBuffer.y + t6);
              }, t5.prototype.cursorUp = function(e6) {
                var t6 = this._activeBuffer.y - this._activeBuffer.scrollTop;
                return t6 >= 0 ? this._moveCursor(0, -Math.min(t6, e6.params[0] || 1)) : this._moveCursor(0, -(e6.params[0] || 1)), true;
              }, t5.prototype.cursorDown = function(e6) {
                var t6 = this._activeBuffer.scrollBottom - this._activeBuffer.y;
                return t6 >= 0 ? this._moveCursor(0, Math.min(t6, e6.params[0] || 1)) : this._moveCursor(0, e6.params[0] || 1), true;
              }, t5.prototype.cursorForward = function(e6) {
                return this._moveCursor(e6.params[0] || 1, 0), true;
              }, t5.prototype.cursorBackward = function(e6) {
                return this._moveCursor(-(e6.params[0] || 1), 0), true;
              }, t5.prototype.cursorNextLine = function(e6) {
                return this.cursorDown(e6), this._activeBuffer.x = 0, true;
              }, t5.prototype.cursorPrecedingLine = function(e6) {
                return this.cursorUp(e6), this._activeBuffer.x = 0, true;
              }, t5.prototype.cursorCharAbsolute = function(e6) {
                return this._setCursor((e6.params[0] || 1) - 1, this._activeBuffer.y), true;
              }, t5.prototype.cursorPosition = function(e6) {
                return this._setCursor(e6.length >= 2 ? (e6.params[1] || 1) - 1 : 0, (e6.params[0] || 1) - 1), true;
              }, t5.prototype.charPosAbsolute = function(e6) {
                return this._setCursor((e6.params[0] || 1) - 1, this._activeBuffer.y), true;
              }, t5.prototype.hPositionRelative = function(e6) {
                return this._moveCursor(e6.params[0] || 1, 0), true;
              }, t5.prototype.linePosAbsolute = function(e6) {
                return this._setCursor(this._activeBuffer.x, (e6.params[0] || 1) - 1), true;
              }, t5.prototype.vPositionRelative = function(e6) {
                return this._moveCursor(0, e6.params[0] || 1), true;
              }, t5.prototype.hVPosition = function(e6) {
                return this.cursorPosition(e6), true;
              }, t5.prototype.tabClear = function(e6) {
                var t6 = e6.params[0];
                return t6 === 0 ? delete this._activeBuffer.tabs[this._activeBuffer.x] : t6 === 3 && (this._activeBuffer.tabs = {}), true;
              }, t5.prototype.cursorForwardTab = function(e6) {
                if (this._activeBuffer.x >= this._bufferService.cols)
                  return true;
                for (var t6 = e6.params[0] || 1; t6--; )
                  this._activeBuffer.x = this._activeBuffer.nextStop();
                return true;
              }, t5.prototype.cursorBackwardTab = function(e6) {
                if (this._activeBuffer.x >= this._bufferService.cols)
                  return true;
                for (var t6 = e6.params[0] || 1; t6--; )
                  this._activeBuffer.x = this._activeBuffer.prevStop();
                return true;
              }, t5.prototype._eraseInBufferLine = function(e6, t6, r4, i4) {
                i4 === void 0 && (i4 = false);
                var n4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e6);
                n4.replaceCells(t6, r4, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i4 && (n4.isWrapped = false);
              }, t5.prototype._resetBufferLine = function(e6) {
                var t6 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e6);
                t6.fill(this._activeBuffer.getNullCell(this._eraseAttrData())), this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + e6), t6.isWrapped = false;
              }, t5.prototype.eraseInDisplay = function(e6) {
                var t6;
                switch (this._restrictCursor(this._bufferService.cols), e6.params[0]) {
                  case 0:
                    for (t6 = this._activeBuffer.y, this._dirtyRowService.markDirty(t6), this._eraseInBufferLine(t6++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0); t6 < this._bufferService.rows; t6++)
                      this._resetBufferLine(t6);
                    this._dirtyRowService.markDirty(t6);
                    break;
                  case 1:
                    for (t6 = this._activeBuffer.y, this._dirtyRowService.markDirty(t6), this._eraseInBufferLine(t6, 0, this._activeBuffer.x + 1, true), this._activeBuffer.x + 1 >= this._bufferService.cols && (this._activeBuffer.lines.get(t6 + 1).isWrapped = false); t6--; )
                      this._resetBufferLine(t6);
                    this._dirtyRowService.markDirty(0);
                    break;
                  case 2:
                    for (t6 = this._bufferService.rows, this._dirtyRowService.markDirty(t6 - 1); t6--; )
                      this._resetBufferLine(t6);
                    this._dirtyRowService.markDirty(0);
                    break;
                  case 3:
                    var r4 = this._activeBuffer.lines.length - this._bufferService.rows;
                    r4 > 0 && (this._activeBuffer.lines.trimStart(r4), this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - r4, 0), this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - r4, 0), this._onScroll.fire(0));
                }
                return true;
              }, t5.prototype.eraseInLine = function(e6) {
                switch (this._restrictCursor(this._bufferService.cols), e6.params[0]) {
                  case 0:
                    this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0);
                    break;
                  case 1:
                    this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false);
                    break;
                  case 2:
                    this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true);
                }
                return this._dirtyRowService.markDirty(this._activeBuffer.y), true;
              }, t5.prototype.insertLines = function(e6) {
                this._restrictCursor();
                var t6 = e6.params[0] || 1;
                if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop)
                  return true;
                for (var r4 = this._activeBuffer.ybase + this._activeBuffer.y, i4 = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, n4 = this._bufferService.rows - 1 + this._activeBuffer.ybase - i4 + 1; t6--; )
                  this._activeBuffer.lines.splice(n4 - 1, 1), this._activeBuffer.lines.splice(r4, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
                return this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, true;
              }, t5.prototype.deleteLines = function(e6) {
                this._restrictCursor();
                var t6 = e6.params[0] || 1;
                if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop)
                  return true;
                var r4, i4 = this._activeBuffer.ybase + this._activeBuffer.y;
                for (r4 = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, r4 = this._bufferService.rows - 1 + this._activeBuffer.ybase - r4; t6--; )
                  this._activeBuffer.lines.splice(i4, 1), this._activeBuffer.lines.splice(r4, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
                return this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, true;
              }, t5.prototype.insertChars = function(e6) {
                this._restrictCursor();
                var t6 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                return t6 && (t6.insertCells(this._activeBuffer.x, e6.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowService.markDirty(this._activeBuffer.y)), true;
              }, t5.prototype.deleteChars = function(e6) {
                this._restrictCursor();
                var t6 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                return t6 && (t6.deleteCells(this._activeBuffer.x, e6.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowService.markDirty(this._activeBuffer.y)), true;
              }, t5.prototype.scrollUp = function(e6) {
                for (var t6 = e6.params[0] || 1; t6--; )
                  this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
                return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
              }, t5.prototype.scrollDown = function(e6) {
                for (var t6 = e6.params[0] || 1; t6--; )
                  this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(f3.DEFAULT_ATTR_DATA));
                return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
              }, t5.prototype.scrollLeft = function(e6) {
                if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop)
                  return true;
                for (var t6 = e6.params[0] || 1, r4 = this._activeBuffer.scrollTop; r4 <= this._activeBuffer.scrollBottom; ++r4) {
                  var i4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + r4);
                  i4.deleteCells(0, t6, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i4.isWrapped = false;
                }
                return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
              }, t5.prototype.scrollRight = function(e6) {
                if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop)
                  return true;
                for (var t6 = e6.params[0] || 1, r4 = this._activeBuffer.scrollTop; r4 <= this._activeBuffer.scrollBottom; ++r4) {
                  var i4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + r4);
                  i4.insertCells(0, t6, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i4.isWrapped = false;
                }
                return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
              }, t5.prototype.insertColumns = function(e6) {
                if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop)
                  return true;
                for (var t6 = e6.params[0] || 1, r4 = this._activeBuffer.scrollTop; r4 <= this._activeBuffer.scrollBottom; ++r4) {
                  var i4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + r4);
                  i4.insertCells(this._activeBuffer.x, t6, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i4.isWrapped = false;
                }
                return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
              }, t5.prototype.deleteColumns = function(e6) {
                if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop)
                  return true;
                for (var t6 = e6.params[0] || 1, r4 = this._activeBuffer.scrollTop; r4 <= this._activeBuffer.scrollBottom; ++r4) {
                  var i4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + r4);
                  i4.deleteCells(this._activeBuffer.x, t6, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i4.isWrapped = false;
                }
                return this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
              }, t5.prototype.eraseChars = function(e6) {
                this._restrictCursor();
                var t6 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                return t6 && (t6.replaceCells(this._activeBuffer.x, this._activeBuffer.x + (e6.params[0] || 1), this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowService.markDirty(this._activeBuffer.y)), true;
              }, t5.prototype.repeatPrecedingCharacter = function(e6) {
                if (!this._parser.precedingCodepoint)
                  return true;
                for (var t6 = e6.params[0] || 1, r4 = new Uint32Array(t6), i4 = 0; i4 < t6; ++i4)
                  r4[i4] = this._parser.precedingCodepoint;
                return this.print(r4, 0, r4.length), true;
              }, t5.prototype.sendDeviceAttributesPrimary = function(e6) {
                return e6.params[0] > 0 || (this._is("xterm") || this._is("rxvt-unicode") || this._is("screen") ? this._coreService.triggerDataEvent(s3.C0.ESC + "[?1;2c") : this._is("linux") && this._coreService.triggerDataEvent(s3.C0.ESC + "[?6c")), true;
              }, t5.prototype.sendDeviceAttributesSecondary = function(e6) {
                return e6.params[0] > 0 || (this._is("xterm") ? this._coreService.triggerDataEvent(s3.C0.ESC + "[>0;276;0c") : this._is("rxvt-unicode") ? this._coreService.triggerDataEvent(s3.C0.ESC + "[>85;95;0c") : this._is("linux") ? this._coreService.triggerDataEvent(e6.params[0] + "c") : this._is("screen") && this._coreService.triggerDataEvent(s3.C0.ESC + "[>83;40003;0c")), true;
              }, t5.prototype._is = function(e6) {
                return (this._optionsService.rawOptions.termName + "").indexOf(e6) === 0;
              }, t5.prototype.setMode = function(e6) {
                for (var t6 = 0; t6 < e6.length; t6++)
                  e6.params[t6] === 4 && (this._coreService.modes.insertMode = true);
                return true;
              }, t5.prototype.setModePrivate = function(e6) {
                for (var t6 = 0; t6 < e6.length; t6++)
                  switch (e6.params[t6]) {
                    case 1:
                      this._coreService.decPrivateModes.applicationCursorKeys = true;
                      break;
                    case 2:
                      this._charsetService.setgCharset(0, a3.DEFAULT_CHARSET), this._charsetService.setgCharset(1, a3.DEFAULT_CHARSET), this._charsetService.setgCharset(2, a3.DEFAULT_CHARSET), this._charsetService.setgCharset(3, a3.DEFAULT_CHARSET);
                      break;
                    case 3:
                      this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(132, this._bufferService.rows), this._onRequestReset.fire());
                      break;
                    case 6:
                      this._coreService.decPrivateModes.origin = true, this._setCursor(0, 0);
                      break;
                    case 7:
                      this._coreService.decPrivateModes.wraparound = true;
                      break;
                    case 12:
                      break;
                    case 45:
                      this._coreService.decPrivateModes.reverseWraparound = true;
                      break;
                    case 66:
                      this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = true, this._onRequestSyncScrollBar.fire();
                      break;
                    case 9:
                      this._coreMouseService.activeProtocol = "X10";
                      break;
                    case 1e3:
                      this._coreMouseService.activeProtocol = "VT200";
                      break;
                    case 1002:
                      this._coreMouseService.activeProtocol = "DRAG";
                      break;
                    case 1003:
                      this._coreMouseService.activeProtocol = "ANY";
                      break;
                    case 1004:
                      this._coreService.decPrivateModes.sendFocus = true, this._onRequestSendFocus.fire();
                      break;
                    case 1005:
                      this._logService.debug("DECSET 1005 not supported (see #2507)");
                      break;
                    case 1006:
                      this._coreMouseService.activeEncoding = "SGR";
                      break;
                    case 1015:
                      this._logService.debug("DECSET 1015 not supported (see #2507)");
                      break;
                    case 25:
                      this._coreService.isCursorHidden = false;
                      break;
                    case 1048:
                      this.saveCursor();
                      break;
                    case 1049:
                      this.saveCursor();
                    case 47:
                    case 1047:
                      this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()), this._coreService.isCursorInitialized = true, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();
                      break;
                    case 2004:
                      this._coreService.decPrivateModes.bracketedPasteMode = true;
                  }
                return true;
              }, t5.prototype.resetMode = function(e6) {
                for (var t6 = 0; t6 < e6.length; t6++)
                  e6.params[t6] === 4 && (this._coreService.modes.insertMode = false);
                return true;
              }, t5.prototype.resetModePrivate = function(e6) {
                for (var t6 = 0; t6 < e6.length; t6++)
                  switch (e6.params[t6]) {
                    case 1:
                      this._coreService.decPrivateModes.applicationCursorKeys = false;
                      break;
                    case 3:
                      this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(80, this._bufferService.rows), this._onRequestReset.fire());
                      break;
                    case 6:
                      this._coreService.decPrivateModes.origin = false, this._setCursor(0, 0);
                      break;
                    case 7:
                      this._coreService.decPrivateModes.wraparound = false;
                      break;
                    case 12:
                      break;
                    case 45:
                      this._coreService.decPrivateModes.reverseWraparound = false;
                      break;
                    case 66:
                      this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = false, this._onRequestSyncScrollBar.fire();
                      break;
                    case 9:
                    case 1e3:
                    case 1002:
                    case 1003:
                      this._coreMouseService.activeProtocol = "NONE";
                      break;
                    case 1004:
                      this._coreService.decPrivateModes.sendFocus = false;
                      break;
                    case 1005:
                      this._logService.debug("DECRST 1005 not supported (see #2507)");
                      break;
                    case 1006:
                      this._coreMouseService.activeEncoding = "DEFAULT";
                      break;
                    case 1015:
                      this._logService.debug("DECRST 1015 not supported (see #2507)");
                      break;
                    case 25:
                      this._coreService.isCursorHidden = true;
                      break;
                    case 1048:
                      this.restoreCursor();
                      break;
                    case 1049:
                    case 47:
                    case 1047:
                      this._bufferService.buffers.activateNormalBuffer(), e6.params[t6] === 1049 && this.restoreCursor(), this._coreService.isCursorInitialized = true, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();
                      break;
                    case 2004:
                      this._coreService.decPrivateModes.bracketedPasteMode = false;
                  }
                return true;
              }, t5.prototype._updateAttrColor = function(e6, t6, r4, i4, n4) {
                return t6 === 2 ? (e6 |= 50331648, e6 &= -16777216, e6 |= v2.AttributeData.fromColorRGB([r4, i4, n4])) : t6 === 5 && (e6 &= -50331904, e6 |= 33554432 | 255 & r4), e6;
              }, t5.prototype._extractColor = function(e6, t6, r4) {
                var i4 = [0, 0, -1, 0, 0, 0], n4 = 0, o4 = 0;
                do {
                  if (i4[o4 + n4] = e6.params[t6 + o4], e6.hasSubParams(t6 + o4)) {
                    var s4 = e6.getSubParams(t6 + o4), a4 = 0;
                    do {
                      i4[1] === 5 && (n4 = 1), i4[o4 + a4 + 1 + n4] = s4[a4];
                    } while (++a4 < s4.length && a4 + o4 + 1 + n4 < i4.length);
                    break;
                  }
                  if (i4[1] === 5 && o4 + n4 >= 2 || i4[1] === 2 && o4 + n4 >= 5)
                    break;
                  i4[1] && (n4 = 1);
                } while (++o4 + t6 < e6.length && o4 + n4 < i4.length);
                for (a4 = 2; a4 < i4.length; ++a4)
                  i4[a4] === -1 && (i4[a4] = 0);
                switch (i4[0]) {
                  case 38:
                    r4.fg = this._updateAttrColor(r4.fg, i4[1], i4[3], i4[4], i4[5]);
                    break;
                  case 48:
                    r4.bg = this._updateAttrColor(r4.bg, i4[1], i4[3], i4[4], i4[5]);
                    break;
                  case 58:
                    r4.extended = r4.extended.clone(), r4.extended.underlineColor = this._updateAttrColor(r4.extended.underlineColor, i4[1], i4[3], i4[4], i4[5]);
                }
                return o4;
              }, t5.prototype._processUnderline = function(e6, t6) {
                t6.extended = t6.extended.clone(), (!~e6 || e6 > 5) && (e6 = 1), t6.extended.underlineStyle = e6, t6.fg |= 268435456, e6 === 0 && (t6.fg &= -268435457), t6.updateExtended();
              }, t5.prototype.charAttributes = function(e6) {
                if (e6.length === 1 && e6.params[0] === 0)
                  return this._curAttrData.fg = f3.DEFAULT_ATTR_DATA.fg, this._curAttrData.bg = f3.DEFAULT_ATTR_DATA.bg, true;
                for (var t6, r4 = e6.length, i4 = this._curAttrData, n4 = 0; n4 < r4; n4++)
                  (t6 = e6.params[n4]) >= 30 && t6 <= 37 ? (i4.fg &= -50331904, i4.fg |= 16777216 | t6 - 30) : t6 >= 40 && t6 <= 47 ? (i4.bg &= -50331904, i4.bg |= 16777216 | t6 - 40) : t6 >= 90 && t6 <= 97 ? (i4.fg &= -50331904, i4.fg |= 16777224 | t6 - 90) : t6 >= 100 && t6 <= 107 ? (i4.bg &= -50331904, i4.bg |= 16777224 | t6 - 100) : t6 === 0 ? (i4.fg = f3.DEFAULT_ATTR_DATA.fg, i4.bg = f3.DEFAULT_ATTR_DATA.bg) : t6 === 1 ? i4.fg |= 134217728 : t6 === 3 ? i4.bg |= 67108864 : t6 === 4 ? (i4.fg |= 268435456, this._processUnderline(e6.hasSubParams(n4) ? e6.getSubParams(n4)[0] : 1, i4)) : t6 === 5 ? i4.fg |= 536870912 : t6 === 7 ? i4.fg |= 67108864 : t6 === 8 ? i4.fg |= 1073741824 : t6 === 9 ? i4.fg |= 2147483648 : t6 === 2 ? i4.bg |= 134217728 : t6 === 21 ? this._processUnderline(2, i4) : t6 === 22 ? (i4.fg &= -134217729, i4.bg &= -134217729) : t6 === 23 ? i4.bg &= -67108865 : t6 === 24 ? i4.fg &= -268435457 : t6 === 25 ? i4.fg &= -536870913 : t6 === 27 ? i4.fg &= -67108865 : t6 === 28 ? i4.fg &= -1073741825 : t6 === 29 ? i4.fg &= 2147483647 : t6 === 39 ? (i4.fg &= -67108864, i4.fg |= 16777215 & f3.DEFAULT_ATTR_DATA.fg) : t6 === 49 ? (i4.bg &= -67108864, i4.bg |= 16777215 & f3.DEFAULT_ATTR_DATA.bg) : t6 === 38 || t6 === 48 || t6 === 58 ? n4 += this._extractColor(e6, n4, i4) : t6 === 59 ? (i4.extended = i4.extended.clone(), i4.extended.underlineColor = -1, i4.updateExtended()) : t6 === 100 ? (i4.fg &= -67108864, i4.fg |= 16777215 & f3.DEFAULT_ATTR_DATA.fg, i4.bg &= -67108864, i4.bg |= 16777215 & f3.DEFAULT_ATTR_DATA.bg) : this._logService.debug("Unknown SGR attribute: %d.", t6);
                return true;
              }, t5.prototype.deviceStatus = function(e6) {
                switch (e6.params[0]) {
                  case 5:
                    this._coreService.triggerDataEvent(s3.C0.ESC + "[0n");
                    break;
                  case 6:
                    var t6 = this._activeBuffer.y + 1, r4 = this._activeBuffer.x + 1;
                    this._coreService.triggerDataEvent(s3.C0.ESC + "[" + t6 + ";" + r4 + "R");
                }
                return true;
              }, t5.prototype.deviceStatusPrivate = function(e6) {
                if (e6.params[0] === 6) {
                  var t6 = this._activeBuffer.y + 1, r4 = this._activeBuffer.x + 1;
                  this._coreService.triggerDataEvent(s3.C0.ESC + "[?" + t6 + ";" + r4 + "R");
                }
                return true;
              }, t5.prototype.softReset = function(e6) {
                return this._coreService.isCursorHidden = false, this._onRequestSyncScrollBar.fire(), this._activeBuffer.scrollTop = 0, this._activeBuffer.scrollBottom = this._bufferService.rows - 1, this._curAttrData = f3.DEFAULT_ATTR_DATA.clone(), this._coreService.reset(), this._charsetService.reset(), this._activeBuffer.savedX = 0, this._activeBuffer.savedY = this._activeBuffer.ybase, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, this._coreService.decPrivateModes.origin = false, true;
              }, t5.prototype.setCursorStyle = function(e6) {
                var t6 = e6.params[0] || 1;
                switch (t6) {
                  case 1:
                  case 2:
                    this._optionsService.options.cursorStyle = "block";
                    break;
                  case 3:
                  case 4:
                    this._optionsService.options.cursorStyle = "underline";
                    break;
                  case 5:
                  case 6:
                    this._optionsService.options.cursorStyle = "bar";
                }
                var r4 = t6 % 2 == 1;
                return this._optionsService.options.cursorBlink = r4, true;
              }, t5.prototype.setScrollRegion = function(e6) {
                var t6, r4 = e6.params[0] || 1;
                return (e6.length < 2 || (t6 = e6.params[1]) > this._bufferService.rows || t6 === 0) && (t6 = this._bufferService.rows), t6 > r4 && (this._activeBuffer.scrollTop = r4 - 1, this._activeBuffer.scrollBottom = t6 - 1, this._setCursor(0, 0)), true;
              }, t5.prototype.windowOptions = function(e6) {
                if (!w3(e6.params[0], this._optionsService.rawOptions.windowOptions))
                  return true;
                var t6 = e6.length > 1 ? e6.params[1] : 0;
                switch (e6.params[0]) {
                  case 14:
                    t6 !== 2 && this._onRequestWindowsOptionsReport.fire(o3.GET_WIN_SIZE_PIXELS);
                    break;
                  case 16:
                    this._onRequestWindowsOptionsReport.fire(o3.GET_CELL_SIZE_PIXELS);
                    break;
                  case 18:
                    this._bufferService && this._coreService.triggerDataEvent(s3.C0.ESC + "[8;" + this._bufferService.rows + ";" + this._bufferService.cols + "t");
                    break;
                  case 22:
                    t6 !== 0 && t6 !== 2 || (this._windowTitleStack.push(this._windowTitle), this._windowTitleStack.length > 10 && this._windowTitleStack.shift()), t6 !== 0 && t6 !== 1 || (this._iconNameStack.push(this._iconName), this._iconNameStack.length > 10 && this._iconNameStack.shift());
                    break;
                  case 23:
                    t6 !== 0 && t6 !== 2 || this._windowTitleStack.length && this.setTitle(this._windowTitleStack.pop()), t6 !== 0 && t6 !== 1 || this._iconNameStack.length && this.setIconName(this._iconNameStack.pop());
                }
                return true;
              }, t5.prototype.saveCursor = function(e6) {
                return this._activeBuffer.savedX = this._activeBuffer.x, this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, true;
              }, t5.prototype.restoreCursor = function(e6) {
                return this._activeBuffer.x = this._activeBuffer.savedX || 0, this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0), this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg, this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg, this._charsetService.charset = this._savedCharset, this._activeBuffer.savedCharset && (this._charsetService.charset = this._activeBuffer.savedCharset), this._restrictCursor(), true;
              }, t5.prototype.setTitle = function(e6) {
                return this._windowTitle = e6, this._onTitleChange.fire(e6), true;
              }, t5.prototype.setIconName = function(e6) {
                return this._iconName = e6, true;
              }, t5.prototype.setOrReportIndexedColor = function(e6) {
                for (var t6 = [], r4 = e6.split(";"); r4.length > 1; ) {
                  var i4 = r4.shift(), n4 = r4.shift();
                  if (/^\d+$/.exec(i4)) {
                    var o4 = parseInt(i4);
                    if (0 <= o4 && o4 < 256)
                      if (n4 === "?")
                        t6.push({ type: 0, index: o4 });
                      else {
                        var s4 = (0, S2.parseColor)(n4);
                        s4 && t6.push({ type: 1, index: o4, color: s4 });
                      }
                  }
                }
                return t6.length && this._onColor.fire(t6), true;
              }, t5.prototype._setOrReportSpecialColor = function(e6, t6) {
                for (var r4 = e6.split(";"), i4 = 0; i4 < r4.length && !(t6 >= this._specialColors.length); ++i4, ++t6)
                  if (r4[i4] === "?")
                    this._onColor.fire([{ type: 0, index: this._specialColors[t6] }]);
                  else {
                    var n4 = (0, S2.parseColor)(r4[i4]);
                    n4 && this._onColor.fire([{ type: 1, index: this._specialColors[t6], color: n4 }]);
                  }
                return true;
              }, t5.prototype.setOrReportFgColor = function(e6) {
                return this._setOrReportSpecialColor(e6, 0);
              }, t5.prototype.setOrReportBgColor = function(e6) {
                return this._setOrReportSpecialColor(e6, 1);
              }, t5.prototype.setOrReportCursorColor = function(e6) {
                return this._setOrReportSpecialColor(e6, 2);
              }, t5.prototype.restoreIndexedColor = function(e6) {
                if (!e6)
                  return this._onColor.fire([{ type: 2 }]), true;
                for (var t6 = [], r4 = e6.split(";"), i4 = 0; i4 < r4.length; ++i4)
                  if (/^\d+$/.exec(r4[i4])) {
                    var n4 = parseInt(r4[i4]);
                    0 <= n4 && n4 < 256 && t6.push({ type: 2, index: n4 });
                  }
                return t6.length && this._onColor.fire(t6), true;
              }, t5.prototype.restoreFgColor = function(e6) {
                return this._onColor.fire([{ type: 2, index: 256 }]), true;
              }, t5.prototype.restoreBgColor = function(e6) {
                return this._onColor.fire([{ type: 2, index: 257 }]), true;
              }, t5.prototype.restoreCursorColor = function(e6) {
                return this._onColor.fire([{ type: 2, index: 258 }]), true;
              }, t5.prototype.nextLine = function() {
                return this._activeBuffer.x = 0, this.index(), true;
              }, t5.prototype.keypadApplicationMode = function() {
                return this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = true, this._onRequestSyncScrollBar.fire(), true;
              }, t5.prototype.keypadNumericMode = function() {
                return this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = false, this._onRequestSyncScrollBar.fire(), true;
              }, t5.prototype.selectDefaultCharset = function() {
                return this._charsetService.setgLevel(0), this._charsetService.setgCharset(0, a3.DEFAULT_CHARSET), true;
              }, t5.prototype.selectCharset = function(e6) {
                return e6.length !== 2 ? (this.selectDefaultCharset(), true) : (e6[0] === "/" || this._charsetService.setgCharset(C2[e6[0]], a3.CHARSETS[e6[1]] || a3.DEFAULT_CHARSET), true);
              }, t5.prototype.index = function() {
                return this._restrictCursor(), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._restrictCursor(), true;
              }, t5.prototype.tabSet = function() {
                return this._activeBuffer.tabs[this._activeBuffer.x] = true, true;
              }, t5.prototype.reverseIndex = function() {
                if (this._restrictCursor(), this._activeBuffer.y === this._activeBuffer.scrollTop) {
                  var e6 = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;
                  this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, e6, 1), this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData())), this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);
                } else
                  this._activeBuffer.y--, this._restrictCursor();
                return true;
              }, t5.prototype.fullReset = function() {
                return this._parser.reset(), this._onRequestReset.fire(), true;
              }, t5.prototype.reset = function() {
                this._curAttrData = f3.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = f3.DEFAULT_ATTR_DATA.clone();
              }, t5.prototype._eraseAttrData = function() {
                return this._eraseAttrDataInternal.bg &= -67108864, this._eraseAttrDataInternal.bg |= 67108863 & this._curAttrData.bg, this._eraseAttrDataInternal;
              }, t5.prototype.setgLevel = function(e6) {
                return this._charsetService.setgLevel(e6), true;
              }, t5.prototype.screenAlignmentPattern = function() {
                var e6 = new p3.CellData();
                e6.content = 1 << 22 | "E".charCodeAt(0), e6.fg = this._curAttrData.fg, e6.bg = this._curAttrData.bg, this._setCursor(0, 0);
                for (var t6 = 0; t6 < this._bufferService.rows; ++t6) {
                  var r4 = this._activeBuffer.ybase + this._activeBuffer.y + t6, i4 = this._activeBuffer.lines.get(r4);
                  i4 && (i4.fill(e6), i4.isWrapped = false);
                }
                return this._dirtyRowService.markAllDirty(), this._setCursor(0, 0), true;
              }, t5;
            }(l3.Disposable);
            t4.InputHandler = E2;
          }, 844: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.getDisposeArrayDisposable = t4.disposeArray = t4.Disposable = void 0;
            var r3 = function() {
              function e5() {
                this._disposables = [], this._isDisposed = false;
              }
              return e5.prototype.dispose = function() {
                this._isDisposed = true;
                for (var e6 = 0, t5 = this._disposables; e6 < t5.length; e6++)
                  t5[e6].dispose();
                this._disposables.length = 0;
              }, e5.prototype.register = function(e6) {
                return this._disposables.push(e6), e6;
              }, e5.prototype.unregister = function(e6) {
                var t5 = this._disposables.indexOf(e6);
                t5 !== -1 && this._disposables.splice(t5, 1);
              }, e5;
            }();
            function i3(e5) {
              for (var t5 = 0, r4 = e5; t5 < r4.length; t5++)
                r4[t5].dispose();
              e5.length = 0;
            }
            t4.Disposable = r3, t4.disposeArray = i3, t4.getDisposeArrayDisposable = function(e5) {
              return { dispose: function() {
                return i3(e5);
              } };
            };
          }, 6114: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.isLinux = t4.isWindows = t4.isIphone = t4.isIpad = t4.isMac = t4.isSafari = t4.isLegacyEdge = t4.isFirefox = void 0;
            var r3 = typeof navigator == "undefined", i3 = r3 ? "node" : navigator.userAgent, n3 = r3 ? "node" : navigator.platform;
            t4.isFirefox = i3.includes("Firefox"), t4.isLegacyEdge = i3.includes("Edge"), t4.isSafari = /^((?!chrome|android).)*safari/i.test(i3), t4.isMac = ["Macintosh", "MacIntel", "MacPPC", "Mac68K"].includes(n3), t4.isIpad = n3 === "iPad", t4.isIphone = n3 === "iPhone", t4.isWindows = ["Windows", "Win16", "Win32", "WinCE"].includes(n3), t4.isLinux = n3.indexOf("Linux") >= 0;
          }, 8273: (e4, t4) => {
            function r3(e5, t5, r4, i3) {
              if (r4 === void 0 && (r4 = 0), i3 === void 0 && (i3 = e5.length), r4 >= e5.length)
                return e5;
              r4 = (e5.length + r4) % e5.length, i3 = i3 >= e5.length ? e5.length : (e5.length + i3) % e5.length;
              for (var n3 = r4; n3 < i3; ++n3)
                e5[n3] = t5;
              return e5;
            }
            Object.defineProperty(t4, "__esModule", { value: true }), t4.concat = t4.fillFallback = t4.fill = void 0, t4.fill = function(e5, t5, i3, n3) {
              return e5.fill ? e5.fill(t5, i3, n3) : r3(e5, t5, i3, n3);
            }, t4.fillFallback = r3, t4.concat = function(e5, t5) {
              var r4 = new e5.constructor(e5.length + t5.length);
              return r4.set(e5), r4.set(t5, e5.length), r4;
            };
          }, 9282: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.updateWindowsModeWrappedState = void 0;
            var i3 = r3(643);
            t4.updateWindowsModeWrappedState = function(e5) {
              var t5 = e5.buffer.lines.get(e5.buffer.ybase + e5.buffer.y - 1), r4 = t5 == null ? void 0 : t5.get(e5.cols - 1), n3 = e5.buffer.lines.get(e5.buffer.ybase + e5.buffer.y);
              n3 && r4 && (n3.isWrapped = r4[i3.CHAR_DATA_CODE_INDEX] !== i3.NULL_CELL_CODE && r4[i3.CHAR_DATA_CODE_INDEX] !== i3.WHITESPACE_CELL_CODE);
            };
          }, 3734: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.ExtendedAttrs = t4.AttributeData = void 0;
            var r3 = function() {
              function e5() {
                this.fg = 0, this.bg = 0, this.extended = new i3();
              }
              return e5.toColorRGB = function(e6) {
                return [e6 >>> 16 & 255, e6 >>> 8 & 255, 255 & e6];
              }, e5.fromColorRGB = function(e6) {
                return (255 & e6[0]) << 16 | (255 & e6[1]) << 8 | 255 & e6[2];
              }, e5.prototype.clone = function() {
                var t5 = new e5();
                return t5.fg = this.fg, t5.bg = this.bg, t5.extended = this.extended.clone(), t5;
              }, e5.prototype.isInverse = function() {
                return 67108864 & this.fg;
              }, e5.prototype.isBold = function() {
                return 134217728 & this.fg;
              }, e5.prototype.isUnderline = function() {
                return 268435456 & this.fg;
              }, e5.prototype.isBlink = function() {
                return 536870912 & this.fg;
              }, e5.prototype.isInvisible = function() {
                return 1073741824 & this.fg;
              }, e5.prototype.isItalic = function() {
                return 67108864 & this.bg;
              }, e5.prototype.isDim = function() {
                return 134217728 & this.bg;
              }, e5.prototype.isStrikethrough = function() {
                return 2147483648 & this.fg;
              }, e5.prototype.getFgColorMode = function() {
                return 50331648 & this.fg;
              }, e5.prototype.getBgColorMode = function() {
                return 50331648 & this.bg;
              }, e5.prototype.isFgRGB = function() {
                return (50331648 & this.fg) == 50331648;
              }, e5.prototype.isBgRGB = function() {
                return (50331648 & this.bg) == 50331648;
              }, e5.prototype.isFgPalette = function() {
                return (50331648 & this.fg) == 16777216 || (50331648 & this.fg) == 33554432;
              }, e5.prototype.isBgPalette = function() {
                return (50331648 & this.bg) == 16777216 || (50331648 & this.bg) == 33554432;
              }, e5.prototype.isFgDefault = function() {
                return (50331648 & this.fg) == 0;
              }, e5.prototype.isBgDefault = function() {
                return (50331648 & this.bg) == 0;
              }, e5.prototype.isAttributeDefault = function() {
                return this.fg === 0 && this.bg === 0;
              }, e5.prototype.getFgColor = function() {
                switch (50331648 & this.fg) {
                  case 16777216:
                  case 33554432:
                    return 255 & this.fg;
                  case 50331648:
                    return 16777215 & this.fg;
                  default:
                    return -1;
                }
              }, e5.prototype.getBgColor = function() {
                switch (50331648 & this.bg) {
                  case 16777216:
                  case 33554432:
                    return 255 & this.bg;
                  case 50331648:
                    return 16777215 & this.bg;
                  default:
                    return -1;
                }
              }, e5.prototype.hasExtendedAttrs = function() {
                return 268435456 & this.bg;
              }, e5.prototype.updateExtended = function() {
                this.extended.isEmpty() ? this.bg &= -268435457 : this.bg |= 268435456;
              }, e5.prototype.getUnderlineColor = function() {
                if (268435456 & this.bg && ~this.extended.underlineColor)
                  switch (50331648 & this.extended.underlineColor) {
                    case 16777216:
                    case 33554432:
                      return 255 & this.extended.underlineColor;
                    case 50331648:
                      return 16777215 & this.extended.underlineColor;
                    default:
                      return this.getFgColor();
                  }
                return this.getFgColor();
              }, e5.prototype.getUnderlineColorMode = function() {
                return 268435456 & this.bg && ~this.extended.underlineColor ? 50331648 & this.extended.underlineColor : this.getFgColorMode();
              }, e5.prototype.isUnderlineColorRGB = function() {
                return 268435456 & this.bg && ~this.extended.underlineColor ? (50331648 & this.extended.underlineColor) == 50331648 : this.isFgRGB();
              }, e5.prototype.isUnderlineColorPalette = function() {
                return 268435456 & this.bg && ~this.extended.underlineColor ? (50331648 & this.extended.underlineColor) == 16777216 || (50331648 & this.extended.underlineColor) == 33554432 : this.isFgPalette();
              }, e5.prototype.isUnderlineColorDefault = function() {
                return 268435456 & this.bg && ~this.extended.underlineColor ? (50331648 & this.extended.underlineColor) == 0 : this.isFgDefault();
              }, e5.prototype.getUnderlineStyle = function() {
                return 268435456 & this.fg ? 268435456 & this.bg ? this.extended.underlineStyle : 1 : 0;
              }, e5;
            }();
            t4.AttributeData = r3;
            var i3 = function() {
              function e5(e6, t5) {
                e6 === void 0 && (e6 = 0), t5 === void 0 && (t5 = -1), this.underlineStyle = e6, this.underlineColor = t5;
              }
              return e5.prototype.clone = function() {
                return new e5(this.underlineStyle, this.underlineColor);
              }, e5.prototype.isEmpty = function() {
                return this.underlineStyle === 0;
              }, e5;
            }();
            t4.ExtendedAttrs = i3;
          }, 9092: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.BufferStringIterator = t4.Buffer = t4.MAX_BUFFER_SIZE = void 0;
            var i3 = r3(6349), n3 = r3(8437), o3 = r3(511), s3 = r3(643), a3 = r3(4634), c3 = r3(4863), l3 = r3(7116), h3 = r3(3734);
            t4.MAX_BUFFER_SIZE = 4294967295;
            var u3 = function() {
              function e5(e6, t5, r4) {
                this._hasScrollback = e6, this._optionsService = t5, this._bufferService = r4, this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.savedY = 0, this.savedX = 0, this.savedCurAttrData = n3.DEFAULT_ATTR_DATA.clone(), this.savedCharset = l3.DEFAULT_CHARSET, this.markers = [], this._nullCell = o3.CellData.fromCharData([0, s3.NULL_CELL_CHAR, s3.NULL_CELL_WIDTH, s3.NULL_CELL_CODE]), this._whitespaceCell = o3.CellData.fromCharData([0, s3.WHITESPACE_CELL_CHAR, s3.WHITESPACE_CELL_WIDTH, s3.WHITESPACE_CELL_CODE]), this._isClearing = false, this._cols = this._bufferService.cols, this._rows = this._bufferService.rows, this.lines = new i3.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
              }
              return e5.prototype.getNullCell = function(e6) {
                return e6 ? (this._nullCell.fg = e6.fg, this._nullCell.bg = e6.bg, this._nullCell.extended = e6.extended) : (this._nullCell.fg = 0, this._nullCell.bg = 0, this._nullCell.extended = new h3.ExtendedAttrs()), this._nullCell;
              }, e5.prototype.getWhitespaceCell = function(e6) {
                return e6 ? (this._whitespaceCell.fg = e6.fg, this._whitespaceCell.bg = e6.bg, this._whitespaceCell.extended = e6.extended) : (this._whitespaceCell.fg = 0, this._whitespaceCell.bg = 0, this._whitespaceCell.extended = new h3.ExtendedAttrs()), this._whitespaceCell;
              }, e5.prototype.getBlankLine = function(e6, t5) {
                return new n3.BufferLine(this._bufferService.cols, this.getNullCell(e6), t5);
              }, Object.defineProperty(e5.prototype, "hasScrollback", { get: function() {
                return this._hasScrollback && this.lines.maxLength > this._rows;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "isCursorInViewport", { get: function() {
                var e6 = this.ybase + this.y - this.ydisp;
                return e6 >= 0 && e6 < this._rows;
              }, enumerable: false, configurable: true }), e5.prototype._getCorrectBufferLength = function(e6) {
                if (!this._hasScrollback)
                  return e6;
                var r4 = e6 + this._optionsService.rawOptions.scrollback;
                return r4 > t4.MAX_BUFFER_SIZE ? t4.MAX_BUFFER_SIZE : r4;
              }, e5.prototype.fillViewportRows = function(e6) {
                if (this.lines.length === 0) {
                  e6 === void 0 && (e6 = n3.DEFAULT_ATTR_DATA);
                  for (var t5 = this._rows; t5--; )
                    this.lines.push(this.getBlankLine(e6));
                }
              }, e5.prototype.clear = function() {
                this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.lines = new i3.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
              }, e5.prototype.resize = function(e6, t5) {
                var r4 = this.getNullCell(n3.DEFAULT_ATTR_DATA), i4 = this._getCorrectBufferLength(t5);
                if (i4 > this.lines.maxLength && (this.lines.maxLength = i4), this.lines.length > 0) {
                  if (this._cols < e6)
                    for (var o4 = 0; o4 < this.lines.length; o4++)
                      this.lines.get(o4).resize(e6, r4);
                  var s4 = 0;
                  if (this._rows < t5)
                    for (var a4 = this._rows; a4 < t5; a4++)
                      this.lines.length < t5 + this.ybase && (this._optionsService.rawOptions.windowsMode ? this.lines.push(new n3.BufferLine(e6, r4)) : this.ybase > 0 && this.lines.length <= this.ybase + this.y + s4 + 1 ? (this.ybase--, s4++, this.ydisp > 0 && this.ydisp--) : this.lines.push(new n3.BufferLine(e6, r4)));
                  else
                    for (a4 = this._rows; a4 > t5; a4--)
                      this.lines.length > t5 + this.ybase && (this.lines.length > this.ybase + this.y + 1 ? this.lines.pop() : (this.ybase++, this.ydisp++));
                  if (i4 < this.lines.maxLength) {
                    var c4 = this.lines.length - i4;
                    c4 > 0 && (this.lines.trimStart(c4), this.ybase = Math.max(this.ybase - c4, 0), this.ydisp = Math.max(this.ydisp - c4, 0), this.savedY = Math.max(this.savedY - c4, 0)), this.lines.maxLength = i4;
                  }
                  this.x = Math.min(this.x, e6 - 1), this.y = Math.min(this.y, t5 - 1), s4 && (this.y += s4), this.savedX = Math.min(this.savedX, e6 - 1), this.scrollTop = 0;
                }
                if (this.scrollBottom = t5 - 1, this._isReflowEnabled && (this._reflow(e6, t5), this._cols > e6))
                  for (o4 = 0; o4 < this.lines.length; o4++)
                    this.lines.get(o4).resize(e6, r4);
                this._cols = e6, this._rows = t5;
              }, Object.defineProperty(e5.prototype, "_isReflowEnabled", { get: function() {
                return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;
              }, enumerable: false, configurable: true }), e5.prototype._reflow = function(e6, t5) {
                this._cols !== e6 && (e6 > this._cols ? this._reflowLarger(e6, t5) : this._reflowSmaller(e6, t5));
              }, e5.prototype._reflowLarger = function(e6, t5) {
                var r4 = (0, a3.reflowLargerGetLinesToRemove)(this.lines, this._cols, e6, this.ybase + this.y, this.getNullCell(n3.DEFAULT_ATTR_DATA));
                if (r4.length > 0) {
                  var i4 = (0, a3.reflowLargerCreateNewLayout)(this.lines, r4);
                  (0, a3.reflowLargerApplyNewLayout)(this.lines, i4.layout), this._reflowLargerAdjustViewport(e6, t5, i4.countRemoved);
                }
              }, e5.prototype._reflowLargerAdjustViewport = function(e6, t5, r4) {
                for (var i4 = this.getNullCell(n3.DEFAULT_ATTR_DATA), o4 = r4; o4-- > 0; )
                  this.ybase === 0 ? (this.y > 0 && this.y--, this.lines.length < t5 && this.lines.push(new n3.BufferLine(e6, i4))) : (this.ydisp === this.ybase && this.ydisp--, this.ybase--);
                this.savedY = Math.max(this.savedY - r4, 0);
              }, e5.prototype._reflowSmaller = function(e6, t5) {
                for (var r4 = this.getNullCell(n3.DEFAULT_ATTR_DATA), i4 = [], o4 = 0, s4 = this.lines.length - 1; s4 >= 0; s4--) {
                  var c4 = this.lines.get(s4);
                  if (!(!c4 || !c4.isWrapped && c4.getTrimmedLength() <= e6)) {
                    for (var l4 = [c4]; c4.isWrapped && s4 > 0; )
                      c4 = this.lines.get(--s4), l4.unshift(c4);
                    var h4 = this.ybase + this.y;
                    if (!(h4 >= s4 && h4 < s4 + l4.length)) {
                      var u4, f4 = l4[l4.length - 1].getTrimmedLength(), _3 = (0, a3.reflowSmallerGetNewLineLengths)(l4, this._cols, e6), d3 = _3.length - l4.length;
                      u4 = this.ybase === 0 && this.y !== this.lines.length - 1 ? Math.max(0, this.y - this.lines.maxLength + d3) : Math.max(0, this.lines.length - this.lines.maxLength + d3);
                      for (var p3 = [], v2 = 0; v2 < d3; v2++) {
                        var g3 = this.getBlankLine(n3.DEFAULT_ATTR_DATA, true);
                        p3.push(g3);
                      }
                      p3.length > 0 && (i4.push({ start: s4 + l4.length + o4, newLines: p3 }), o4 += p3.length), l4.push.apply(l4, p3);
                      var y3 = _3.length - 1, m2 = _3[y3];
                      m2 === 0 && (m2 = _3[--y3]);
                      for (var S2 = l4.length - d3 - 1, C2 = f4; S2 >= 0; ) {
                        var b3 = Math.min(C2, m2);
                        if (l4[y3] === void 0)
                          break;
                        if (l4[y3].copyCellsFrom(l4[S2], C2 - b3, m2 - b3, b3, true), (m2 -= b3) == 0 && (m2 = _3[--y3]), (C2 -= b3) == 0) {
                          S2--;
                          var w3 = Math.max(S2, 0);
                          C2 = (0, a3.getWrappedLineTrimmedLength)(l4, w3, this._cols);
                        }
                      }
                      for (v2 = 0; v2 < l4.length; v2++)
                        _3[v2] < e6 && l4[v2].setCell(_3[v2], r4);
                      for (var L2 = d3 - u4; L2-- > 0; )
                        this.ybase === 0 ? this.y < t5 - 1 ? (this.y++, this.lines.pop()) : (this.ybase++, this.ydisp++) : this.ybase < Math.min(this.lines.maxLength, this.lines.length + o4) - t5 && (this.ybase === this.ydisp && this.ydisp++, this.ybase++);
                      this.savedY = Math.min(this.savedY + d3, this.ybase + t5 - 1);
                    }
                  }
                }
                if (i4.length > 0) {
                  var E2 = [], x2 = [];
                  for (v2 = 0; v2 < this.lines.length; v2++)
                    x2.push(this.lines.get(v2));
                  var k2 = this.lines.length, M2 = k2 - 1, A2 = 0, R2 = i4[A2];
                  this.lines.length = Math.min(this.lines.maxLength, this.lines.length + o4);
                  var O2 = 0;
                  for (v2 = Math.min(this.lines.maxLength - 1, k2 + o4 - 1); v2 >= 0; v2--)
                    if (R2 && R2.start > M2 + O2) {
                      for (var T = R2.newLines.length - 1; T >= 0; T--)
                        this.lines.set(v2--, R2.newLines[T]);
                      v2++, E2.push({ index: M2 + 1, amount: R2.newLines.length }), O2 += R2.newLines.length, R2 = i4[++A2];
                    } else
                      this.lines.set(v2, x2[M2--]);
                  var D2 = 0;
                  for (v2 = E2.length - 1; v2 >= 0; v2--)
                    E2[v2].index += D2, this.lines.onInsertEmitter.fire(E2[v2]), D2 += E2[v2].amount;
                  var B2 = Math.max(0, k2 + o4 - this.lines.maxLength);
                  B2 > 0 && this.lines.onTrimEmitter.fire(B2);
                }
              }, e5.prototype.stringIndexToBufferIndex = function(e6, t5, r4) {
                for (r4 === void 0 && (r4 = false); t5; ) {
                  var i4 = this.lines.get(e6);
                  if (!i4)
                    return [-1, -1];
                  for (var n4 = r4 ? i4.getTrimmedLength() : i4.length, o4 = 0; o4 < n4; ++o4)
                    if (i4.get(o4)[s3.CHAR_DATA_WIDTH_INDEX] && (t5 -= i4.get(o4)[s3.CHAR_DATA_CHAR_INDEX].length || 1), t5 < 0)
                      return [e6, o4];
                  e6++;
                }
                return [e6, 0];
              }, e5.prototype.translateBufferLineToString = function(e6, t5, r4, i4) {
                r4 === void 0 && (r4 = 0);
                var n4 = this.lines.get(e6);
                return n4 ? n4.translateToString(t5, r4, i4) : "";
              }, e5.prototype.getWrappedRangeForLine = function(e6) {
                for (var t5 = e6, r4 = e6; t5 > 0 && this.lines.get(t5).isWrapped; )
                  t5--;
                for (; r4 + 1 < this.lines.length && this.lines.get(r4 + 1).isWrapped; )
                  r4++;
                return { first: t5, last: r4 };
              }, e5.prototype.setupTabStops = function(e6) {
                for (e6 != null ? this.tabs[e6] || (e6 = this.prevStop(e6)) : (this.tabs = {}, e6 = 0); e6 < this._cols; e6 += this._optionsService.rawOptions.tabStopWidth)
                  this.tabs[e6] = true;
              }, e5.prototype.prevStop = function(e6) {
                for (e6 == null && (e6 = this.x); !this.tabs[--e6] && e6 > 0; )
                  ;
                return e6 >= this._cols ? this._cols - 1 : e6 < 0 ? 0 : e6;
              }, e5.prototype.nextStop = function(e6) {
                for (e6 == null && (e6 = this.x); !this.tabs[++e6] && e6 < this._cols; )
                  ;
                return e6 >= this._cols ? this._cols - 1 : e6 < 0 ? 0 : e6;
              }, e5.prototype.clearMarkers = function(e6) {
                if (this._isClearing = true, e6 !== void 0)
                  for (var t5 = 0; t5 < this.markers.length; t5++)
                    this.markers[t5].line === e6 && (this.markers[t5].dispose(), this.markers.splice(t5--, 1));
                else {
                  for (var r4 = 0, i4 = this.markers; r4 < i4.length; r4++)
                    i4[r4].dispose();
                  this.markers = [];
                }
                this._isClearing = false;
              }, e5.prototype.addMarker = function(e6) {
                var t5 = this, r4 = new c3.Marker(e6);
                return this.markers.push(r4), r4.register(this.lines.onTrim(function(e7) {
                  r4.line -= e7, r4.line < 0 && r4.dispose();
                })), r4.register(this.lines.onInsert(function(e7) {
                  r4.line >= e7.index && (r4.line += e7.amount);
                })), r4.register(this.lines.onDelete(function(e7) {
                  r4.line >= e7.index && r4.line < e7.index + e7.amount && r4.dispose(), r4.line > e7.index && (r4.line -= e7.amount);
                })), r4.register(r4.onDispose(function() {
                  return t5._removeMarker(r4);
                })), r4;
              }, e5.prototype._removeMarker = function(e6) {
                this._isClearing || this.markers.splice(this.markers.indexOf(e6), 1);
              }, e5.prototype.iterator = function(e6, t5, r4, i4, n4) {
                return new f3(this, e6, t5, r4, i4, n4);
              }, e5;
            }();
            t4.Buffer = u3;
            var f3 = function() {
              function e5(e6, t5, r4, i4, n4, o4) {
                r4 === void 0 && (r4 = 0), i4 === void 0 && (i4 = e6.lines.length), n4 === void 0 && (n4 = 0), o4 === void 0 && (o4 = 0), this._buffer = e6, this._trimRight = t5, this._startIndex = r4, this._endIndex = i4, this._startOverscan = n4, this._endOverscan = o4, this._startIndex < 0 && (this._startIndex = 0), this._endIndex > this._buffer.lines.length && (this._endIndex = this._buffer.lines.length), this._current = this._startIndex;
              }
              return e5.prototype.hasNext = function() {
                return this._current < this._endIndex;
              }, e5.prototype.next = function() {
                var e6 = this._buffer.getWrappedRangeForLine(this._current);
                e6.first < this._startIndex - this._startOverscan && (e6.first = this._startIndex - this._startOverscan), e6.last > this._endIndex + this._endOverscan && (e6.last = this._endIndex + this._endOverscan), e6.first = Math.max(e6.first, 0), e6.last = Math.min(e6.last, this._buffer.lines.length);
                for (var t5 = "", r4 = e6.first; r4 <= e6.last; ++r4)
                  t5 += this._buffer.translateBufferLineToString(r4, this._trimRight);
                return this._current = e6.last + 1, { range: e6, content: t5 };
              }, e5;
            }();
            t4.BufferStringIterator = f3;
          }, 8437: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.BufferLine = t4.DEFAULT_ATTR_DATA = void 0;
            var i3 = r3(482), n3 = r3(643), o3 = r3(511), s3 = r3(3734);
            t4.DEFAULT_ATTR_DATA = Object.freeze(new s3.AttributeData());
            var a3 = function() {
              function e5(e6, t5, r4) {
                r4 === void 0 && (r4 = false), this.isWrapped = r4, this._combined = {}, this._extendedAttrs = {}, this._data = new Uint32Array(3 * e6);
                for (var i4 = t5 || o3.CellData.fromCharData([0, n3.NULL_CELL_CHAR, n3.NULL_CELL_WIDTH, n3.NULL_CELL_CODE]), s4 = 0; s4 < e6; ++s4)
                  this.setCell(s4, i4);
                this.length = e6;
              }
              return e5.prototype.get = function(e6) {
                var t5 = this._data[3 * e6 + 0], r4 = 2097151 & t5;
                return [this._data[3 * e6 + 1], 2097152 & t5 ? this._combined[e6] : r4 ? (0, i3.stringFromCodePoint)(r4) : "", t5 >> 22, 2097152 & t5 ? this._combined[e6].charCodeAt(this._combined[e6].length - 1) : r4];
              }, e5.prototype.set = function(e6, t5) {
                this._data[3 * e6 + 1] = t5[n3.CHAR_DATA_ATTR_INDEX], t5[n3.CHAR_DATA_CHAR_INDEX].length > 1 ? (this._combined[e6] = t5[1], this._data[3 * e6 + 0] = 2097152 | e6 | t5[n3.CHAR_DATA_WIDTH_INDEX] << 22) : this._data[3 * e6 + 0] = t5[n3.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | t5[n3.CHAR_DATA_WIDTH_INDEX] << 22;
              }, e5.prototype.getWidth = function(e6) {
                return this._data[3 * e6 + 0] >> 22;
              }, e5.prototype.hasWidth = function(e6) {
                return 12582912 & this._data[3 * e6 + 0];
              }, e5.prototype.getFg = function(e6) {
                return this._data[3 * e6 + 1];
              }, e5.prototype.getBg = function(e6) {
                return this._data[3 * e6 + 2];
              }, e5.prototype.hasContent = function(e6) {
                return 4194303 & this._data[3 * e6 + 0];
              }, e5.prototype.getCodePoint = function(e6) {
                var t5 = this._data[3 * e6 + 0];
                return 2097152 & t5 ? this._combined[e6].charCodeAt(this._combined[e6].length - 1) : 2097151 & t5;
              }, e5.prototype.isCombined = function(e6) {
                return 2097152 & this._data[3 * e6 + 0];
              }, e5.prototype.getString = function(e6) {
                var t5 = this._data[3 * e6 + 0];
                return 2097152 & t5 ? this._combined[e6] : 2097151 & t5 ? (0, i3.stringFromCodePoint)(2097151 & t5) : "";
              }, e5.prototype.loadCell = function(e6, t5) {
                var r4 = 3 * e6;
                return t5.content = this._data[r4 + 0], t5.fg = this._data[r4 + 1], t5.bg = this._data[r4 + 2], 2097152 & t5.content && (t5.combinedData = this._combined[e6]), 268435456 & t5.bg && (t5.extended = this._extendedAttrs[e6]), t5;
              }, e5.prototype.setCell = function(e6, t5) {
                2097152 & t5.content && (this._combined[e6] = t5.combinedData), 268435456 & t5.bg && (this._extendedAttrs[e6] = t5.extended), this._data[3 * e6 + 0] = t5.content, this._data[3 * e6 + 1] = t5.fg, this._data[3 * e6 + 2] = t5.bg;
              }, e5.prototype.setCellFromCodePoint = function(e6, t5, r4, i4, n4, o4) {
                268435456 & n4 && (this._extendedAttrs[e6] = o4), this._data[3 * e6 + 0] = t5 | r4 << 22, this._data[3 * e6 + 1] = i4, this._data[3 * e6 + 2] = n4;
              }, e5.prototype.addCodepointToCell = function(e6, t5) {
                var r4 = this._data[3 * e6 + 0];
                2097152 & r4 ? this._combined[e6] += (0, i3.stringFromCodePoint)(t5) : (2097151 & r4 ? (this._combined[e6] = (0, i3.stringFromCodePoint)(2097151 & r4) + (0, i3.stringFromCodePoint)(t5), r4 &= -2097152, r4 |= 2097152) : r4 = t5 | 1 << 22, this._data[3 * e6 + 0] = r4);
              }, e5.prototype.insertCells = function(e6, t5, r4, i4) {
                if ((e6 %= this.length) && this.getWidth(e6 - 1) === 2 && this.setCellFromCodePoint(e6 - 1, 0, 1, (i4 == null ? void 0 : i4.fg) || 0, (i4 == null ? void 0 : i4.bg) || 0, (i4 == null ? void 0 : i4.extended) || new s3.ExtendedAttrs()), t5 < this.length - e6) {
                  for (var n4 = new o3.CellData(), a4 = this.length - e6 - t5 - 1; a4 >= 0; --a4)
                    this.setCell(e6 + t5 + a4, this.loadCell(e6 + a4, n4));
                  for (a4 = 0; a4 < t5; ++a4)
                    this.setCell(e6 + a4, r4);
                } else
                  for (a4 = e6; a4 < this.length; ++a4)
                    this.setCell(a4, r4);
                this.getWidth(this.length - 1) === 2 && this.setCellFromCodePoint(this.length - 1, 0, 1, (i4 == null ? void 0 : i4.fg) || 0, (i4 == null ? void 0 : i4.bg) || 0, (i4 == null ? void 0 : i4.extended) || new s3.ExtendedAttrs());
              }, e5.prototype.deleteCells = function(e6, t5, r4, i4) {
                if (e6 %= this.length, t5 < this.length - e6) {
                  for (var n4 = new o3.CellData(), a4 = 0; a4 < this.length - e6 - t5; ++a4)
                    this.setCell(e6 + a4, this.loadCell(e6 + t5 + a4, n4));
                  for (a4 = this.length - t5; a4 < this.length; ++a4)
                    this.setCell(a4, r4);
                } else
                  for (a4 = e6; a4 < this.length; ++a4)
                    this.setCell(a4, r4);
                e6 && this.getWidth(e6 - 1) === 2 && this.setCellFromCodePoint(e6 - 1, 0, 1, (i4 == null ? void 0 : i4.fg) || 0, (i4 == null ? void 0 : i4.bg) || 0, (i4 == null ? void 0 : i4.extended) || new s3.ExtendedAttrs()), this.getWidth(e6) !== 0 || this.hasContent(e6) || this.setCellFromCodePoint(e6, 0, 1, (i4 == null ? void 0 : i4.fg) || 0, (i4 == null ? void 0 : i4.bg) || 0, (i4 == null ? void 0 : i4.extended) || new s3.ExtendedAttrs());
              }, e5.prototype.replaceCells = function(e6, t5, r4, i4) {
                for (e6 && this.getWidth(e6 - 1) === 2 && this.setCellFromCodePoint(e6 - 1, 0, 1, (i4 == null ? void 0 : i4.fg) || 0, (i4 == null ? void 0 : i4.bg) || 0, (i4 == null ? void 0 : i4.extended) || new s3.ExtendedAttrs()), t5 < this.length && this.getWidth(t5 - 1) === 2 && this.setCellFromCodePoint(t5, 0, 1, (i4 == null ? void 0 : i4.fg) || 0, (i4 == null ? void 0 : i4.bg) || 0, (i4 == null ? void 0 : i4.extended) || new s3.ExtendedAttrs()); e6 < t5 && e6 < this.length; )
                  this.setCell(e6++, r4);
              }, e5.prototype.resize = function(e6, t5) {
                if (e6 !== this.length) {
                  if (e6 > this.length) {
                    var r4 = new Uint32Array(3 * e6);
                    this.length && (3 * e6 < this._data.length ? r4.set(this._data.subarray(0, 3 * e6)) : r4.set(this._data)), this._data = r4;
                    for (var i4 = this.length; i4 < e6; ++i4)
                      this.setCell(i4, t5);
                  } else if (e6) {
                    (r4 = new Uint32Array(3 * e6)).set(this._data.subarray(0, 3 * e6)), this._data = r4;
                    var n4 = Object.keys(this._combined);
                    for (i4 = 0; i4 < n4.length; i4++) {
                      var o4 = parseInt(n4[i4], 10);
                      o4 >= e6 && delete this._combined[o4];
                    }
                  } else
                    this._data = new Uint32Array(0), this._combined = {};
                  this.length = e6;
                }
              }, e5.prototype.fill = function(e6) {
                this._combined = {}, this._extendedAttrs = {};
                for (var t5 = 0; t5 < this.length; ++t5)
                  this.setCell(t5, e6);
              }, e5.prototype.copyFrom = function(e6) {
                for (var t5 in this.length !== e6.length ? this._data = new Uint32Array(e6._data) : this._data.set(e6._data), this.length = e6.length, this._combined = {}, e6._combined)
                  this._combined[t5] = e6._combined[t5];
                for (var t5 in this._extendedAttrs = {}, e6._extendedAttrs)
                  this._extendedAttrs[t5] = e6._extendedAttrs[t5];
                this.isWrapped = e6.isWrapped;
              }, e5.prototype.clone = function() {
                var t5 = new e5(0);
                for (var r4 in t5._data = new Uint32Array(this._data), t5.length = this.length, this._combined)
                  t5._combined[r4] = this._combined[r4];
                for (var r4 in this._extendedAttrs)
                  t5._extendedAttrs[r4] = this._extendedAttrs[r4];
                return t5.isWrapped = this.isWrapped, t5;
              }, e5.prototype.getTrimmedLength = function() {
                for (var e6 = this.length - 1; e6 >= 0; --e6)
                  if (4194303 & this._data[3 * e6 + 0])
                    return e6 + (this._data[3 * e6 + 0] >> 22);
                return 0;
              }, e5.prototype.copyCellsFrom = function(e6, t5, r4, i4, n4) {
                var o4 = e6._data;
                if (n4)
                  for (var s4 = i4 - 1; s4 >= 0; s4--)
                    for (var a4 = 0; a4 < 3; a4++)
                      this._data[3 * (r4 + s4) + a4] = o4[3 * (t5 + s4) + a4];
                else
                  for (s4 = 0; s4 < i4; s4++)
                    for (a4 = 0; a4 < 3; a4++)
                      this._data[3 * (r4 + s4) + a4] = o4[3 * (t5 + s4) + a4];
                var c3 = Object.keys(e6._combined);
                for (a4 = 0; a4 < c3.length; a4++) {
                  var l3 = parseInt(c3[a4], 10);
                  l3 >= t5 && (this._combined[l3 - t5 + r4] = e6._combined[l3]);
                }
              }, e5.prototype.translateToString = function(e6, t5, r4) {
                e6 === void 0 && (e6 = false), t5 === void 0 && (t5 = 0), r4 === void 0 && (r4 = this.length), e6 && (r4 = Math.min(r4, this.getTrimmedLength()));
                for (var o4 = ""; t5 < r4; ) {
                  var s4 = this._data[3 * t5 + 0], a4 = 2097151 & s4;
                  o4 += 2097152 & s4 ? this._combined[t5] : a4 ? (0, i3.stringFromCodePoint)(a4) : n3.WHITESPACE_CELL_CHAR, t5 += s4 >> 22 || 1;
                }
                return o4;
              }, e5;
            }();
            t4.BufferLine = a3;
          }, 4841: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.getRangeLength = void 0, t4.getRangeLength = function(e5, t5) {
              if (e5.start.y > e5.end.y)
                throw new Error("Buffer range end (" + e5.end.x + ", " + e5.end.y + ") cannot be before start (" + e5.start.x + ", " + e5.start.y + ")");
              return t5 * (e5.end.y - e5.start.y) + (e5.end.x - e5.start.x + 1);
            };
          }, 4634: (e4, t4) => {
            function r3(e5, t5, r4) {
              if (t5 === e5.length - 1)
                return e5[t5].getTrimmedLength();
              var i3 = !e5[t5].hasContent(r4 - 1) && e5[t5].getWidth(r4 - 1) === 1, n3 = e5[t5 + 1].getWidth(0) === 2;
              return i3 && n3 ? r4 - 1 : r4;
            }
            Object.defineProperty(t4, "__esModule", { value: true }), t4.getWrappedLineTrimmedLength = t4.reflowSmallerGetNewLineLengths = t4.reflowLargerApplyNewLayout = t4.reflowLargerCreateNewLayout = t4.reflowLargerGetLinesToRemove = void 0, t4.reflowLargerGetLinesToRemove = function(e5, t5, i3, n3, o3) {
              for (var s3 = [], a3 = 0; a3 < e5.length - 1; a3++) {
                var c3 = a3, l3 = e5.get(++c3);
                if (l3.isWrapped) {
                  for (var h3 = [e5.get(a3)]; c3 < e5.length && l3.isWrapped; )
                    h3.push(l3), l3 = e5.get(++c3);
                  if (n3 >= a3 && n3 < c3)
                    a3 += h3.length - 1;
                  else {
                    for (var u3 = 0, f3 = r3(h3, u3, t5), _3 = 1, d3 = 0; _3 < h3.length; ) {
                      var p3 = r3(h3, _3, t5), v2 = p3 - d3, g3 = i3 - f3, y3 = Math.min(v2, g3);
                      h3[u3].copyCellsFrom(h3[_3], d3, f3, y3, false), (f3 += y3) === i3 && (u3++, f3 = 0), (d3 += y3) === p3 && (_3++, d3 = 0), f3 === 0 && u3 !== 0 && h3[u3 - 1].getWidth(i3 - 1) === 2 && (h3[u3].copyCellsFrom(h3[u3 - 1], i3 - 1, f3++, 1, false), h3[u3 - 1].setCell(i3 - 1, o3));
                    }
                    h3[u3].replaceCells(f3, i3, o3);
                    for (var m2 = 0, S2 = h3.length - 1; S2 > 0 && (S2 > u3 || h3[S2].getTrimmedLength() === 0); S2--)
                      m2++;
                    m2 > 0 && (s3.push(a3 + h3.length - m2), s3.push(m2)), a3 += h3.length - 1;
                  }
                }
              }
              return s3;
            }, t4.reflowLargerCreateNewLayout = function(e5, t5) {
              for (var r4 = [], i3 = 0, n3 = t5[i3], o3 = 0, s3 = 0; s3 < e5.length; s3++)
                if (n3 === s3) {
                  var a3 = t5[++i3];
                  e5.onDeleteEmitter.fire({ index: s3 - o3, amount: a3 }), s3 += a3 - 1, o3 += a3, n3 = t5[++i3];
                } else
                  r4.push(s3);
              return { layout: r4, countRemoved: o3 };
            }, t4.reflowLargerApplyNewLayout = function(e5, t5) {
              for (var r4 = [], i3 = 0; i3 < t5.length; i3++)
                r4.push(e5.get(t5[i3]));
              for (i3 = 0; i3 < r4.length; i3++)
                e5.set(i3, r4[i3]);
              e5.length = t5.length;
            }, t4.reflowSmallerGetNewLineLengths = function(e5, t5, i3) {
              for (var n3 = [], o3 = e5.map(function(i4, n4) {
                return r3(e5, n4, t5);
              }).reduce(function(e6, t6) {
                return e6 + t6;
              }), s3 = 0, a3 = 0, c3 = 0; c3 < o3; ) {
                if (o3 - c3 < i3) {
                  n3.push(o3 - c3);
                  break;
                }
                s3 += i3;
                var l3 = r3(e5, a3, t5);
                s3 > l3 && (s3 -= l3, a3++);
                var h3 = e5[a3].getWidth(s3 - 1) === 2;
                h3 && s3--;
                var u3 = h3 ? i3 - 1 : i3;
                n3.push(u3), c3 += u3;
              }
              return n3;
            }, t4.getWrappedLineTrimmedLength = r3;
          }, 5295: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.BufferSet = void 0;
            var o3 = r3(9092), s3 = r3(8460), a3 = function(e5) {
              function t5(t6, r4) {
                var i4 = e5.call(this) || this;
                return i4._optionsService = t6, i4._bufferService = r4, i4._onBufferActivate = i4.register(new s3.EventEmitter()), i4.reset(), i4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "onBufferActivate", { get: function() {
                return this._onBufferActivate.event;
              }, enumerable: false, configurable: true }), t5.prototype.reset = function() {
                this._normal = new o3.Buffer(true, this._optionsService, this._bufferService), this._normal.fillViewportRows(), this._alt = new o3.Buffer(false, this._optionsService, this._bufferService), this._activeBuffer = this._normal, this._onBufferActivate.fire({ activeBuffer: this._normal, inactiveBuffer: this._alt }), this.setupTabStops();
              }, Object.defineProperty(t5.prototype, "alt", { get: function() {
                return this._alt;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "active", { get: function() {
                return this._activeBuffer;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "normal", { get: function() {
                return this._normal;
              }, enumerable: false, configurable: true }), t5.prototype.activateNormalBuffer = function() {
                this._activeBuffer !== this._normal && (this._normal.x = this._alt.x, this._normal.y = this._alt.y, this._alt.clear(), this._activeBuffer = this._normal, this._onBufferActivate.fire({ activeBuffer: this._normal, inactiveBuffer: this._alt }));
              }, t5.prototype.activateAltBuffer = function(e6) {
                this._activeBuffer !== this._alt && (this._alt.fillViewportRows(e6), this._alt.x = this._normal.x, this._alt.y = this._normal.y, this._activeBuffer = this._alt, this._onBufferActivate.fire({ activeBuffer: this._alt, inactiveBuffer: this._normal }));
              }, t5.prototype.resize = function(e6, t6) {
                this._normal.resize(e6, t6), this._alt.resize(e6, t6);
              }, t5.prototype.setupTabStops = function(e6) {
                this._normal.setupTabStops(e6), this._alt.setupTabStops(e6);
              }, t5;
            }(r3(844).Disposable);
            t4.BufferSet = a3;
          }, 511: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CellData = void 0;
            var o3 = r3(482), s3 = r3(643), a3 = r3(3734), c3 = function(e5) {
              function t5() {
                var t6 = e5 !== null && e5.apply(this, arguments) || this;
                return t6.content = 0, t6.fg = 0, t6.bg = 0, t6.extended = new a3.ExtendedAttrs(), t6.combinedData = "", t6;
              }
              return n3(t5, e5), t5.fromCharData = function(e6) {
                var r4 = new t5();
                return r4.setFromCharData(e6), r4;
              }, t5.prototype.isCombined = function() {
                return 2097152 & this.content;
              }, t5.prototype.getWidth = function() {
                return this.content >> 22;
              }, t5.prototype.getChars = function() {
                return 2097152 & this.content ? this.combinedData : 2097151 & this.content ? (0, o3.stringFromCodePoint)(2097151 & this.content) : "";
              }, t5.prototype.getCode = function() {
                return this.isCombined() ? this.combinedData.charCodeAt(this.combinedData.length - 1) : 2097151 & this.content;
              }, t5.prototype.setFromCharData = function(e6) {
                this.fg = e6[s3.CHAR_DATA_ATTR_INDEX], this.bg = 0;
                var t6 = false;
                if (e6[s3.CHAR_DATA_CHAR_INDEX].length > 2)
                  t6 = true;
                else if (e6[s3.CHAR_DATA_CHAR_INDEX].length === 2) {
                  var r4 = e6[s3.CHAR_DATA_CHAR_INDEX].charCodeAt(0);
                  if (55296 <= r4 && r4 <= 56319) {
                    var i4 = e6[s3.CHAR_DATA_CHAR_INDEX].charCodeAt(1);
                    56320 <= i4 && i4 <= 57343 ? this.content = 1024 * (r4 - 55296) + i4 - 56320 + 65536 | e6[s3.CHAR_DATA_WIDTH_INDEX] << 22 : t6 = true;
                  } else
                    t6 = true;
                } else
                  this.content = e6[s3.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | e6[s3.CHAR_DATA_WIDTH_INDEX] << 22;
                t6 && (this.combinedData = e6[s3.CHAR_DATA_CHAR_INDEX], this.content = 2097152 | e6[s3.CHAR_DATA_WIDTH_INDEX] << 22);
              }, t5.prototype.getAsCharData = function() {
                return [this.fg, this.getChars(), this.getWidth(), this.getCode()];
              }, t5;
            }(a3.AttributeData);
            t4.CellData = c3;
          }, 643: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.WHITESPACE_CELL_CODE = t4.WHITESPACE_CELL_WIDTH = t4.WHITESPACE_CELL_CHAR = t4.NULL_CELL_CODE = t4.NULL_CELL_WIDTH = t4.NULL_CELL_CHAR = t4.CHAR_DATA_CODE_INDEX = t4.CHAR_DATA_WIDTH_INDEX = t4.CHAR_DATA_CHAR_INDEX = t4.CHAR_DATA_ATTR_INDEX = t4.DEFAULT_ATTR = t4.DEFAULT_COLOR = void 0, t4.DEFAULT_COLOR = 256, t4.DEFAULT_ATTR = 256 | t4.DEFAULT_COLOR << 9, t4.CHAR_DATA_ATTR_INDEX = 0, t4.CHAR_DATA_CHAR_INDEX = 1, t4.CHAR_DATA_WIDTH_INDEX = 2, t4.CHAR_DATA_CODE_INDEX = 3, t4.NULL_CELL_CHAR = "", t4.NULL_CELL_WIDTH = 1, t4.NULL_CELL_CODE = 0, t4.WHITESPACE_CELL_CHAR = " ", t4.WHITESPACE_CELL_WIDTH = 1, t4.WHITESPACE_CELL_CODE = 32;
          }, 4863: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.Marker = void 0;
            var o3 = r3(8460), s3 = function(e5) {
              function t5(r4) {
                var i4 = e5.call(this) || this;
                return i4.line = r4, i4._id = t5._nextId++, i4.isDisposed = false, i4._onDispose = new o3.EventEmitter(), i4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "id", { get: function() {
                return this._id;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onDispose", { get: function() {
                return this._onDispose.event;
              }, enumerable: false, configurable: true }), t5.prototype.dispose = function() {
                this.isDisposed || (this.isDisposed = true, this.line = -1, this._onDispose.fire(), e5.prototype.dispose.call(this));
              }, t5._nextId = 1, t5;
            }(r3(844).Disposable);
            t4.Marker = s3;
          }, 7116: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.DEFAULT_CHARSET = t4.CHARSETS = void 0, t4.CHARSETS = {}, t4.DEFAULT_CHARSET = t4.CHARSETS.B, t4.CHARSETS[0] = { "`": "\u25C6", a: "\u2592", b: "\u2409", c: "\u240C", d: "\u240D", e: "\u240A", f: "\xB0", g: "\xB1", h: "\u2424", i: "\u240B", j: "\u2518", k: "\u2510", l: "\u250C", m: "\u2514", n: "\u253C", o: "\u23BA", p: "\u23BB", q: "\u2500", r: "\u23BC", s: "\u23BD", t: "\u251C", u: "\u2524", v: "\u2534", w: "\u252C", x: "\u2502", y: "\u2264", z: "\u2265", "{": "\u03C0", "|": "\u2260", "}": "\xA3", "~": "\xB7" }, t4.CHARSETS.A = { "#": "\xA3" }, t4.CHARSETS.B = void 0, t4.CHARSETS[4] = { "#": "\xA3", "@": "\xBE", "[": "ij", "\\": "\xBD", "]": "|", "{": "\xA8", "|": "f", "}": "\xBC", "~": "\xB4" }, t4.CHARSETS.C = t4.CHARSETS[5] = { "[": "\xC4", "\\": "\xD6", "]": "\xC5", "^": "\xDC", "`": "\xE9", "{": "\xE4", "|": "\xF6", "}": "\xE5", "~": "\xFC" }, t4.CHARSETS.R = { "#": "\xA3", "@": "\xE0", "[": "\xB0", "\\": "\xE7", "]": "\xA7", "{": "\xE9", "|": "\xF9", "}": "\xE8", "~": "\xA8" }, t4.CHARSETS.Q = { "@": "\xE0", "[": "\xE2", "\\": "\xE7", "]": "\xEA", "^": "\xEE", "`": "\xF4", "{": "\xE9", "|": "\xF9", "}": "\xE8", "~": "\xFB" }, t4.CHARSETS.K = { "@": "\xA7", "[": "\xC4", "\\": "\xD6", "]": "\xDC", "{": "\xE4", "|": "\xF6", "}": "\xFC", "~": "\xDF" }, t4.CHARSETS.Y = { "#": "\xA3", "@": "\xA7", "[": "\xB0", "\\": "\xE7", "]": "\xE9", "`": "\xF9", "{": "\xE0", "|": "\xF2", "}": "\xE8", "~": "\xEC" }, t4.CHARSETS.E = t4.CHARSETS[6] = { "@": "\xC4", "[": "\xC6", "\\": "\xD8", "]": "\xC5", "^": "\xDC", "`": "\xE4", "{": "\xE6", "|": "\xF8", "}": "\xE5", "~": "\xFC" }, t4.CHARSETS.Z = { "#": "\xA3", "@": "\xA7", "[": "\xA1", "\\": "\xD1", "]": "\xBF", "{": "\xB0", "|": "\xF1", "}": "\xE7" }, t4.CHARSETS.H = t4.CHARSETS[7] = { "@": "\xC9", "[": "\xC4", "\\": "\xD6", "]": "\xC5", "^": "\xDC", "`": "\xE9", "{": "\xE4", "|": "\xF6", "}": "\xE5", "~": "\xFC" }, t4.CHARSETS["="] = { "#": "\xF9", "@": "\xE0", "[": "\xE9", "\\": "\xE7", "]": "\xEA", "^": "\xEE", _: "\xE8", "`": "\xF4", "{": "\xE4", "|": "\xF6", "}": "\xFC", "~": "\xFB" };
          }, 2584: (e4, t4) => {
            var r3, i3;
            Object.defineProperty(t4, "__esModule", { value: true }), t4.C1 = t4.C0 = void 0, (i3 = t4.C0 || (t4.C0 = {})).NUL = "\0", i3.SOH = "", i3.STX = "", i3.ETX = "", i3.EOT = "", i3.ENQ = "", i3.ACK = "", i3.BEL = "\x07", i3.BS = "\b", i3.HT = "	", i3.LF = "\n", i3.VT = "\v", i3.FF = "\f", i3.CR = "\r", i3.SO = "", i3.SI = "", i3.DLE = "", i3.DC1 = "", i3.DC2 = "", i3.DC3 = "", i3.DC4 = "", i3.NAK = "", i3.SYN = "", i3.ETB = "", i3.CAN = "", i3.EM = "", i3.SUB = "", i3.ESC = "\x1B", i3.FS = "", i3.GS = "", i3.RS = "", i3.US = "", i3.SP = " ", i3.DEL = "\x7F", (r3 = t4.C1 || (t4.C1 = {})).PAD = "\x80", r3.HOP = "\x81", r3.BPH = "\x82", r3.NBH = "\x83", r3.IND = "\x84", r3.NEL = "\x85", r3.SSA = "\x86", r3.ESA = "\x87", r3.HTS = "\x88", r3.HTJ = "\x89", r3.VTS = "\x8A", r3.PLD = "\x8B", r3.PLU = "\x8C", r3.RI = "\x8D", r3.SS2 = "\x8E", r3.SS3 = "\x8F", r3.DCS = "\x90", r3.PU1 = "\x91", r3.PU2 = "\x92", r3.STS = "\x93", r3.CCH = "\x94", r3.MW = "\x95", r3.SPA = "\x96", r3.EPA = "\x97", r3.SOS = "\x98", r3.SGCI = "\x99", r3.SCI = "\x9A", r3.CSI = "\x9B", r3.ST = "\x9C", r3.OSC = "\x9D", r3.PM = "\x9E", r3.APC = "\x9F";
          }, 7399: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.evaluateKeyboardEvent = void 0;
            var i3 = r3(2584), n3 = { 48: ["0", ")"], 49: ["1", "!"], 50: ["2", "@"], 51: ["3", "#"], 52: ["4", "$"], 53: ["5", "%"], 54: ["6", "^"], 55: ["7", "&"], 56: ["8", "*"], 57: ["9", "("], 186: [";", ":"], 187: ["=", "+"], 188: [",", "<"], 189: ["-", "_"], 190: [".", ">"], 191: ["/", "?"], 192: ["`", "~"], 219: ["[", "{"], 220: ["\\", "|"], 221: ["]", "}"], 222: ["'", '"'] };
            t4.evaluateKeyboardEvent = function(e5, t5, r4, o3) {
              var s3 = { type: 0, cancel: false, key: void 0 }, a3 = (e5.shiftKey ? 1 : 0) | (e5.altKey ? 2 : 0) | (e5.ctrlKey ? 4 : 0) | (e5.metaKey ? 8 : 0);
              switch (e5.keyCode) {
                case 0:
                  e5.key === "UIKeyInputUpArrow" ? s3.key = t5 ? i3.C0.ESC + "OA" : i3.C0.ESC + "[A" : e5.key === "UIKeyInputLeftArrow" ? s3.key = t5 ? i3.C0.ESC + "OD" : i3.C0.ESC + "[D" : e5.key === "UIKeyInputRightArrow" ? s3.key = t5 ? i3.C0.ESC + "OC" : i3.C0.ESC + "[C" : e5.key === "UIKeyInputDownArrow" && (s3.key = t5 ? i3.C0.ESC + "OB" : i3.C0.ESC + "[B");
                  break;
                case 8:
                  if (e5.shiftKey) {
                    s3.key = i3.C0.BS;
                    break;
                  }
                  if (e5.altKey) {
                    s3.key = i3.C0.ESC + i3.C0.DEL;
                    break;
                  }
                  s3.key = i3.C0.DEL;
                  break;
                case 9:
                  if (e5.shiftKey) {
                    s3.key = i3.C0.ESC + "[Z";
                    break;
                  }
                  s3.key = i3.C0.HT, s3.cancel = true;
                  break;
                case 13:
                  s3.key = e5.altKey ? i3.C0.ESC + i3.C0.CR : i3.C0.CR, s3.cancel = true;
                  break;
                case 27:
                  s3.key = i3.C0.ESC, e5.altKey && (s3.key = i3.C0.ESC + i3.C0.ESC), s3.cancel = true;
                  break;
                case 37:
                  if (e5.metaKey)
                    break;
                  a3 ? (s3.key = i3.C0.ESC + "[1;" + (a3 + 1) + "D", s3.key === i3.C0.ESC + "[1;3D" && (s3.key = i3.C0.ESC + (r4 ? "b" : "[1;5D"))) : s3.key = t5 ? i3.C0.ESC + "OD" : i3.C0.ESC + "[D";
                  break;
                case 39:
                  if (e5.metaKey)
                    break;
                  a3 ? (s3.key = i3.C0.ESC + "[1;" + (a3 + 1) + "C", s3.key === i3.C0.ESC + "[1;3C" && (s3.key = i3.C0.ESC + (r4 ? "f" : "[1;5C"))) : s3.key = t5 ? i3.C0.ESC + "OC" : i3.C0.ESC + "[C";
                  break;
                case 38:
                  if (e5.metaKey)
                    break;
                  a3 ? (s3.key = i3.C0.ESC + "[1;" + (a3 + 1) + "A", r4 || s3.key !== i3.C0.ESC + "[1;3A" || (s3.key = i3.C0.ESC + "[1;5A")) : s3.key = t5 ? i3.C0.ESC + "OA" : i3.C0.ESC + "[A";
                  break;
                case 40:
                  if (e5.metaKey)
                    break;
                  a3 ? (s3.key = i3.C0.ESC + "[1;" + (a3 + 1) + "B", r4 || s3.key !== i3.C0.ESC + "[1;3B" || (s3.key = i3.C0.ESC + "[1;5B")) : s3.key = t5 ? i3.C0.ESC + "OB" : i3.C0.ESC + "[B";
                  break;
                case 45:
                  e5.shiftKey || e5.ctrlKey || (s3.key = i3.C0.ESC + "[2~");
                  break;
                case 46:
                  s3.key = a3 ? i3.C0.ESC + "[3;" + (a3 + 1) + "~" : i3.C0.ESC + "[3~";
                  break;
                case 36:
                  s3.key = a3 ? i3.C0.ESC + "[1;" + (a3 + 1) + "H" : t5 ? i3.C0.ESC + "OH" : i3.C0.ESC + "[H";
                  break;
                case 35:
                  s3.key = a3 ? i3.C0.ESC + "[1;" + (a3 + 1) + "F" : t5 ? i3.C0.ESC + "OF" : i3.C0.ESC + "[F";
                  break;
                case 33:
                  e5.shiftKey ? s3.type = 2 : s3.key = i3.C0.ESC + "[5~";
                  break;
                case 34:
                  e5.shiftKey ? s3.type = 3 : s3.key = i3.C0.ESC + "[6~";
                  break;
                case 112:
                  s3.key = a3 ? i3.C0.ESC + "[1;" + (a3 + 1) + "P" : i3.C0.ESC + "OP";
                  break;
                case 113:
                  s3.key = a3 ? i3.C0.ESC + "[1;" + (a3 + 1) + "Q" : i3.C0.ESC + "OQ";
                  break;
                case 114:
                  s3.key = a3 ? i3.C0.ESC + "[1;" + (a3 + 1) + "R" : i3.C0.ESC + "OR";
                  break;
                case 115:
                  s3.key = a3 ? i3.C0.ESC + "[1;" + (a3 + 1) + "S" : i3.C0.ESC + "OS";
                  break;
                case 116:
                  s3.key = a3 ? i3.C0.ESC + "[15;" + (a3 + 1) + "~" : i3.C0.ESC + "[15~";
                  break;
                case 117:
                  s3.key = a3 ? i3.C0.ESC + "[17;" + (a3 + 1) + "~" : i3.C0.ESC + "[17~";
                  break;
                case 118:
                  s3.key = a3 ? i3.C0.ESC + "[18;" + (a3 + 1) + "~" : i3.C0.ESC + "[18~";
                  break;
                case 119:
                  s3.key = a3 ? i3.C0.ESC + "[19;" + (a3 + 1) + "~" : i3.C0.ESC + "[19~";
                  break;
                case 120:
                  s3.key = a3 ? i3.C0.ESC + "[20;" + (a3 + 1) + "~" : i3.C0.ESC + "[20~";
                  break;
                case 121:
                  s3.key = a3 ? i3.C0.ESC + "[21;" + (a3 + 1) + "~" : i3.C0.ESC + "[21~";
                  break;
                case 122:
                  s3.key = a3 ? i3.C0.ESC + "[23;" + (a3 + 1) + "~" : i3.C0.ESC + "[23~";
                  break;
                case 123:
                  s3.key = a3 ? i3.C0.ESC + "[24;" + (a3 + 1) + "~" : i3.C0.ESC + "[24~";
                  break;
                default:
                  if (!e5.ctrlKey || e5.shiftKey || e5.altKey || e5.metaKey)
                    if (r4 && !o3 || !e5.altKey || e5.metaKey)
                      !r4 || e5.altKey || e5.ctrlKey || e5.shiftKey || !e5.metaKey ? e5.key && !e5.ctrlKey && !e5.altKey && !e5.metaKey && e5.keyCode >= 48 && e5.key.length === 1 ? s3.key = e5.key : e5.key && e5.ctrlKey && e5.key === "_" && (s3.key = i3.C0.US) : e5.keyCode === 65 && (s3.type = 1);
                    else {
                      var c3 = n3[e5.keyCode], l3 = c3 == null ? void 0 : c3[e5.shiftKey ? 1 : 0];
                      if (l3)
                        s3.key = i3.C0.ESC + l3;
                      else if (e5.keyCode >= 65 && e5.keyCode <= 90) {
                        var h3 = e5.ctrlKey ? e5.keyCode - 64 : e5.keyCode + 32;
                        s3.key = i3.C0.ESC + String.fromCharCode(h3);
                      }
                    }
                  else
                    e5.keyCode >= 65 && e5.keyCode <= 90 ? s3.key = String.fromCharCode(e5.keyCode - 64) : e5.keyCode === 32 ? s3.key = i3.C0.NUL : e5.keyCode >= 51 && e5.keyCode <= 55 ? s3.key = String.fromCharCode(e5.keyCode - 51 + 27) : e5.keyCode === 56 ? s3.key = i3.C0.DEL : e5.keyCode === 219 ? s3.key = i3.C0.ESC : e5.keyCode === 220 ? s3.key = i3.C0.FS : e5.keyCode === 221 && (s3.key = i3.C0.GS);
              }
              return s3;
            };
          }, 482: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.Utf8ToUtf32 = t4.StringToUtf32 = t4.utf32ToString = t4.stringFromCodePoint = void 0, t4.stringFromCodePoint = function(e5) {
              return e5 > 65535 ? (e5 -= 65536, String.fromCharCode(55296 + (e5 >> 10)) + String.fromCharCode(e5 % 1024 + 56320)) : String.fromCharCode(e5);
            }, t4.utf32ToString = function(e5, t5, r4) {
              t5 === void 0 && (t5 = 0), r4 === void 0 && (r4 = e5.length);
              for (var i4 = "", n3 = t5; n3 < r4; ++n3) {
                var o3 = e5[n3];
                o3 > 65535 ? (o3 -= 65536, i4 += String.fromCharCode(55296 + (o3 >> 10)) + String.fromCharCode(o3 % 1024 + 56320)) : i4 += String.fromCharCode(o3);
              }
              return i4;
            };
            var r3 = function() {
              function e5() {
                this._interim = 0;
              }
              return e5.prototype.clear = function() {
                this._interim = 0;
              }, e5.prototype.decode = function(e6, t5) {
                var r4 = e6.length;
                if (!r4)
                  return 0;
                var i4 = 0, n3 = 0;
                this._interim && (56320 <= (a3 = e6.charCodeAt(n3++)) && a3 <= 57343 ? t5[i4++] = 1024 * (this._interim - 55296) + a3 - 56320 + 65536 : (t5[i4++] = this._interim, t5[i4++] = a3), this._interim = 0);
                for (var o3 = n3; o3 < r4; ++o3) {
                  var s3 = e6.charCodeAt(o3);
                  if (55296 <= s3 && s3 <= 56319) {
                    if (++o3 >= r4)
                      return this._interim = s3, i4;
                    var a3;
                    56320 <= (a3 = e6.charCodeAt(o3)) && a3 <= 57343 ? t5[i4++] = 1024 * (s3 - 55296) + a3 - 56320 + 65536 : (t5[i4++] = s3, t5[i4++] = a3);
                  } else
                    s3 !== 65279 && (t5[i4++] = s3);
                }
                return i4;
              }, e5;
            }();
            t4.StringToUtf32 = r3;
            var i3 = function() {
              function e5() {
                this.interim = new Uint8Array(3);
              }
              return e5.prototype.clear = function() {
                this.interim.fill(0);
              }, e5.prototype.decode = function(e6, t5) {
                var r4 = e6.length;
                if (!r4)
                  return 0;
                var i4, n3, o3, s3, a3 = 0, c3 = 0, l3 = 0;
                if (this.interim[0]) {
                  var h3 = false, u3 = this.interim[0];
                  u3 &= (224 & u3) == 192 ? 31 : (240 & u3) == 224 ? 15 : 7;
                  for (var f3 = 0, _3 = void 0; (_3 = 63 & this.interim[++f3]) && f3 < 4; )
                    u3 <<= 6, u3 |= _3;
                  for (var d3 = (224 & this.interim[0]) == 192 ? 2 : (240 & this.interim[0]) == 224 ? 3 : 4, p3 = d3 - f3; l3 < p3; ) {
                    if (l3 >= r4)
                      return 0;
                    if ((192 & (_3 = e6[l3++])) != 128) {
                      l3--, h3 = true;
                      break;
                    }
                    this.interim[f3++] = _3, u3 <<= 6, u3 |= 63 & _3;
                  }
                  h3 || (d3 === 2 ? u3 < 128 ? l3-- : t5[a3++] = u3 : d3 === 3 ? u3 < 2048 || u3 >= 55296 && u3 <= 57343 || u3 === 65279 || (t5[a3++] = u3) : u3 < 65536 || u3 > 1114111 || (t5[a3++] = u3)), this.interim.fill(0);
                }
                for (var v2 = r4 - 4, g3 = l3; g3 < r4; ) {
                  for (; !(!(g3 < v2) || 128 & (i4 = e6[g3]) || 128 & (n3 = e6[g3 + 1]) || 128 & (o3 = e6[g3 + 2]) || 128 & (s3 = e6[g3 + 3])); )
                    t5[a3++] = i4, t5[a3++] = n3, t5[a3++] = o3, t5[a3++] = s3, g3 += 4;
                  if ((i4 = e6[g3++]) < 128)
                    t5[a3++] = i4;
                  else if ((224 & i4) == 192) {
                    if (g3 >= r4)
                      return this.interim[0] = i4, a3;
                    if ((192 & (n3 = e6[g3++])) != 128) {
                      g3--;
                      continue;
                    }
                    if ((c3 = (31 & i4) << 6 | 63 & n3) < 128) {
                      g3--;
                      continue;
                    }
                    t5[a3++] = c3;
                  } else if ((240 & i4) == 224) {
                    if (g3 >= r4)
                      return this.interim[0] = i4, a3;
                    if ((192 & (n3 = e6[g3++])) != 128) {
                      g3--;
                      continue;
                    }
                    if (g3 >= r4)
                      return this.interim[0] = i4, this.interim[1] = n3, a3;
                    if ((192 & (o3 = e6[g3++])) != 128) {
                      g3--;
                      continue;
                    }
                    if ((c3 = (15 & i4) << 12 | (63 & n3) << 6 | 63 & o3) < 2048 || c3 >= 55296 && c3 <= 57343 || c3 === 65279)
                      continue;
                    t5[a3++] = c3;
                  } else if ((248 & i4) == 240) {
                    if (g3 >= r4)
                      return this.interim[0] = i4, a3;
                    if ((192 & (n3 = e6[g3++])) != 128) {
                      g3--;
                      continue;
                    }
                    if (g3 >= r4)
                      return this.interim[0] = i4, this.interim[1] = n3, a3;
                    if ((192 & (o3 = e6[g3++])) != 128) {
                      g3--;
                      continue;
                    }
                    if (g3 >= r4)
                      return this.interim[0] = i4, this.interim[1] = n3, this.interim[2] = o3, a3;
                    if ((192 & (s3 = e6[g3++])) != 128) {
                      g3--;
                      continue;
                    }
                    if ((c3 = (7 & i4) << 18 | (63 & n3) << 12 | (63 & o3) << 6 | 63 & s3) < 65536 || c3 > 1114111)
                      continue;
                    t5[a3++] = c3;
                  }
                }
                return a3;
              }, e5;
            }();
            t4.Utf8ToUtf32 = i3;
          }, 225: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.UnicodeV6 = void 0;
            var i3, n3 = r3(8273), o3 = [[768, 879], [1155, 1158], [1160, 1161], [1425, 1469], [1471, 1471], [1473, 1474], [1476, 1477], [1479, 1479], [1536, 1539], [1552, 1557], [1611, 1630], [1648, 1648], [1750, 1764], [1767, 1768], [1770, 1773], [1807, 1807], [1809, 1809], [1840, 1866], [1958, 1968], [2027, 2035], [2305, 2306], [2364, 2364], [2369, 2376], [2381, 2381], [2385, 2388], [2402, 2403], [2433, 2433], [2492, 2492], [2497, 2500], [2509, 2509], [2530, 2531], [2561, 2562], [2620, 2620], [2625, 2626], [2631, 2632], [2635, 2637], [2672, 2673], [2689, 2690], [2748, 2748], [2753, 2757], [2759, 2760], [2765, 2765], [2786, 2787], [2817, 2817], [2876, 2876], [2879, 2879], [2881, 2883], [2893, 2893], [2902, 2902], [2946, 2946], [3008, 3008], [3021, 3021], [3134, 3136], [3142, 3144], [3146, 3149], [3157, 3158], [3260, 3260], [3263, 3263], [3270, 3270], [3276, 3277], [3298, 3299], [3393, 3395], [3405, 3405], [3530, 3530], [3538, 3540], [3542, 3542], [3633, 3633], [3636, 3642], [3655, 3662], [3761, 3761], [3764, 3769], [3771, 3772], [3784, 3789], [3864, 3865], [3893, 3893], [3895, 3895], [3897, 3897], [3953, 3966], [3968, 3972], [3974, 3975], [3984, 3991], [3993, 4028], [4038, 4038], [4141, 4144], [4146, 4146], [4150, 4151], [4153, 4153], [4184, 4185], [4448, 4607], [4959, 4959], [5906, 5908], [5938, 5940], [5970, 5971], [6002, 6003], [6068, 6069], [6071, 6077], [6086, 6086], [6089, 6099], [6109, 6109], [6155, 6157], [6313, 6313], [6432, 6434], [6439, 6440], [6450, 6450], [6457, 6459], [6679, 6680], [6912, 6915], [6964, 6964], [6966, 6970], [6972, 6972], [6978, 6978], [7019, 7027], [7616, 7626], [7678, 7679], [8203, 8207], [8234, 8238], [8288, 8291], [8298, 8303], [8400, 8431], [12330, 12335], [12441, 12442], [43014, 43014], [43019, 43019], [43045, 43046], [64286, 64286], [65024, 65039], [65056, 65059], [65279, 65279], [65529, 65531]], s3 = [[68097, 68099], [68101, 68102], [68108, 68111], [68152, 68154], [68159, 68159], [119143, 119145], [119155, 119170], [119173, 119179], [119210, 119213], [119362, 119364], [917505, 917505], [917536, 917631], [917760, 917999]], a3 = function() {
              function e5() {
                if (this.version = "6", !i3) {
                  i3 = new Uint8Array(65536), (0, n3.fill)(i3, 1), i3[0] = 0, (0, n3.fill)(i3, 0, 1, 32), (0, n3.fill)(i3, 0, 127, 160), (0, n3.fill)(i3, 2, 4352, 4448), i3[9001] = 2, i3[9002] = 2, (0, n3.fill)(i3, 2, 11904, 42192), i3[12351] = 1, (0, n3.fill)(i3, 2, 44032, 55204), (0, n3.fill)(i3, 2, 63744, 64256), (0, n3.fill)(i3, 2, 65040, 65050), (0, n3.fill)(i3, 2, 65072, 65136), (0, n3.fill)(i3, 2, 65280, 65377), (0, n3.fill)(i3, 2, 65504, 65511);
                  for (var e6 = 0; e6 < o3.length; ++e6)
                    (0, n3.fill)(i3, 0, o3[e6][0], o3[e6][1] + 1);
                }
              }
              return e5.prototype.wcwidth = function(e6) {
                return e6 < 32 ? 0 : e6 < 127 ? 1 : e6 < 65536 ? i3[e6] : function(e7, t5) {
                  var r4, i4 = 0, n4 = t5.length - 1;
                  if (e7 < t5[0][0] || e7 > t5[n4][1])
                    return false;
                  for (; n4 >= i4; )
                    if (e7 > t5[r4 = i4 + n4 >> 1][1])
                      i4 = r4 + 1;
                    else {
                      if (!(e7 < t5[r4][0]))
                        return true;
                      n4 = r4 - 1;
                    }
                  return false;
                }(e6, s3) ? 0 : e6 >= 131072 && e6 <= 196605 || e6 >= 196608 && e6 <= 262141 ? 2 : 1;
              }, e5;
            }();
            t4.UnicodeV6 = a3;
          }, 5981: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.WriteBuffer = void 0;
            var r3 = typeof queueMicrotask == "undefined" ? function(e5) {
              Promise.resolve().then(e5);
            } : queueMicrotask, i3 = function() {
              function e5(e6) {
                this._action = e6, this._writeBuffer = [], this._callbacks = [], this._pendingData = 0, this._bufferOffset = 0, this._isSyncWriting = false, this._syncCalls = 0;
              }
              return e5.prototype.writeSync = function(e6, t5) {
                if (t5 !== void 0 && this._syncCalls > t5)
                  this._syncCalls = 0;
                else if (this._pendingData += e6.length, this._writeBuffer.push(e6), this._callbacks.push(void 0), this._syncCalls++, !this._isSyncWriting) {
                  var r4;
                  for (this._isSyncWriting = true; r4 = this._writeBuffer.shift(); ) {
                    this._action(r4);
                    var i4 = this._callbacks.shift();
                    i4 && i4();
                  }
                  this._pendingData = 0, this._bufferOffset = 2147483647, this._isSyncWriting = false, this._syncCalls = 0;
                }
              }, e5.prototype.write = function(e6, t5) {
                var r4 = this;
                if (this._pendingData > 5e7)
                  throw new Error("write data discarded, use flow control to avoid losing data");
                this._writeBuffer.length || (this._bufferOffset = 0, setTimeout(function() {
                  return r4._innerWrite();
                })), this._pendingData += e6.length, this._writeBuffer.push(e6), this._callbacks.push(t5);
              }, e5.prototype._innerWrite = function(e6, t5) {
                var i4 = this;
                e6 === void 0 && (e6 = 0), t5 === void 0 && (t5 = true);
                for (var n3 = e6 || Date.now(); this._writeBuffer.length > this._bufferOffset; ) {
                  var o3 = this._writeBuffer[this._bufferOffset], s3 = this._action(o3, t5);
                  if (s3)
                    return void s3.catch(function(e7) {
                      return r3(function() {
                        throw e7;
                      }), Promise.resolve(false);
                    }).then(function(e7) {
                      return Date.now() - n3 >= 12 ? setTimeout(function() {
                        return i4._innerWrite(0, e7);
                      }) : i4._innerWrite(n3, e7);
                    });
                  var a3 = this._callbacks[this._bufferOffset];
                  if (a3 && a3(), this._bufferOffset++, this._pendingData -= o3.length, Date.now() - n3 >= 12)
                    break;
                }
                this._writeBuffer.length > this._bufferOffset ? (this._bufferOffset > 50 && (this._writeBuffer = this._writeBuffer.slice(this._bufferOffset), this._callbacks = this._callbacks.slice(this._bufferOffset), this._bufferOffset = 0), setTimeout(function() {
                  return i4._innerWrite();
                })) : (this._writeBuffer.length = 0, this._callbacks.length = 0, this._pendingData = 0, this._bufferOffset = 0);
              }, e5;
            }();
            t4.WriteBuffer = i3;
          }, 5941: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.toRgbString = t4.parseColor = void 0;
            var r3 = /^([\da-f]{1})\/([\da-f]{1})\/([\da-f]{1})$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/, i3 = /^[\da-f]+$/;
            function n3(e5, t5) {
              var r4 = e5.toString(16), i4 = r4.length < 2 ? "0" + r4 : r4;
              switch (t5) {
                case 4:
                  return r4[0];
                case 8:
                  return i4;
                case 12:
                  return (i4 + i4).slice(0, 3);
                default:
                  return i4 + i4;
              }
            }
            t4.parseColor = function(e5) {
              if (e5) {
                var t5 = e5.toLowerCase();
                if (t5.indexOf("rgb:") === 0) {
                  t5 = t5.slice(4);
                  var n4 = r3.exec(t5);
                  if (n4) {
                    var o3 = n4[1] ? 15 : n4[4] ? 255 : n4[7] ? 4095 : 65535;
                    return [Math.round(parseInt(n4[1] || n4[4] || n4[7] || n4[10], 16) / o3 * 255), Math.round(parseInt(n4[2] || n4[5] || n4[8] || n4[11], 16) / o3 * 255), Math.round(parseInt(n4[3] || n4[6] || n4[9] || n4[12], 16) / o3 * 255)];
                  }
                } else if (t5.indexOf("#") === 0 && (t5 = t5.slice(1), i3.exec(t5) && [3, 6, 9, 12].includes(t5.length))) {
                  for (var s3 = t5.length / 3, a3 = [0, 0, 0], c3 = 0; c3 < 3; ++c3) {
                    var l3 = parseInt(t5.slice(s3 * c3, s3 * c3 + s3), 16);
                    a3[c3] = s3 === 1 ? l3 << 4 : s3 === 2 ? l3 : s3 === 3 ? l3 >> 4 : l3 >> 8;
                  }
                  return a3;
                }
              }
            }, t4.toRgbString = function(e5, t5) {
              t5 === void 0 && (t5 = 16);
              var r4 = e5[0], i4 = e5[1], o3 = e5[2];
              return "rgb:" + n3(r4, t5) + "/" + n3(i4, t5) + "/" + n3(o3, t5);
            };
          }, 5770: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.PAYLOAD_LIMIT = void 0, t4.PAYLOAD_LIMIT = 1e7;
          }, 6351: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.DcsHandler = t4.DcsParser = void 0;
            var i3 = r3(482), n3 = r3(8742), o3 = r3(5770), s3 = [], a3 = function() {
              function e5() {
                this._handlers = /* @__PURE__ */ Object.create(null), this._active = s3, this._ident = 0, this._handlerFb = function() {
                }, this._stack = { paused: false, loopPosition: 0, fallThrough: false };
              }
              return e5.prototype.dispose = function() {
                this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = function() {
                }, this._active = s3;
              }, e5.prototype.registerHandler = function(e6, t5) {
                this._handlers[e6] === void 0 && (this._handlers[e6] = []);
                var r4 = this._handlers[e6];
                return r4.push(t5), { dispose: function() {
                  var e7 = r4.indexOf(t5);
                  e7 !== -1 && r4.splice(e7, 1);
                } };
              }, e5.prototype.clearHandler = function(e6) {
                this._handlers[e6] && delete this._handlers[e6];
              }, e5.prototype.setHandlerFallback = function(e6) {
                this._handlerFb = e6;
              }, e5.prototype.reset = function() {
                if (this._active.length)
                  for (var e6 = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e6 >= 0; --e6)
                    this._active[e6].unhook(false);
                this._stack.paused = false, this._active = s3, this._ident = 0;
              }, e5.prototype.hook = function(e6, t5) {
                if (this.reset(), this._ident = e6, this._active = this._handlers[e6] || s3, this._active.length)
                  for (var r4 = this._active.length - 1; r4 >= 0; r4--)
                    this._active[r4].hook(t5);
                else
                  this._handlerFb(this._ident, "HOOK", t5);
              }, e5.prototype.put = function(e6, t5, r4) {
                if (this._active.length)
                  for (var n4 = this._active.length - 1; n4 >= 0; n4--)
                    this._active[n4].put(e6, t5, r4);
                else
                  this._handlerFb(this._ident, "PUT", (0, i3.utf32ToString)(e6, t5, r4));
              }, e5.prototype.unhook = function(e6, t5) {
                if (t5 === void 0 && (t5 = true), this._active.length) {
                  var r4 = false, i4 = this._active.length - 1, n4 = false;
                  if (this._stack.paused && (i4 = this._stack.loopPosition - 1, r4 = t5, n4 = this._stack.fallThrough, this._stack.paused = false), !n4 && r4 === false) {
                    for (; i4 >= 0 && (r4 = this._active[i4].unhook(e6)) !== true; i4--)
                      if (r4 instanceof Promise)
                        return this._stack.paused = true, this._stack.loopPosition = i4, this._stack.fallThrough = false, r4;
                    i4--;
                  }
                  for (; i4 >= 0; i4--)
                    if ((r4 = this._active[i4].unhook(false)) instanceof Promise)
                      return this._stack.paused = true, this._stack.loopPosition = i4, this._stack.fallThrough = true, r4;
                } else
                  this._handlerFb(this._ident, "UNHOOK", e6);
                this._active = s3, this._ident = 0;
              }, e5;
            }();
            t4.DcsParser = a3;
            var c3 = new n3.Params();
            c3.addParam(0);
            var l3 = function() {
              function e5(e6) {
                this._handler = e6, this._data = "", this._params = c3, this._hitLimit = false;
              }
              return e5.prototype.hook = function(e6) {
                this._params = e6.length > 1 || e6.params[0] ? e6.clone() : c3, this._data = "", this._hitLimit = false;
              }, e5.prototype.put = function(e6, t5, r4) {
                this._hitLimit || (this._data += (0, i3.utf32ToString)(e6, t5, r4), this._data.length > o3.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = true));
              }, e5.prototype.unhook = function(e6) {
                var t5 = this, r4 = false;
                if (this._hitLimit)
                  r4 = false;
                else if (e6 && (r4 = this._handler(this._data, this._params)) instanceof Promise)
                  return r4.then(function(e7) {
                    return t5._params = c3, t5._data = "", t5._hitLimit = false, e7;
                  });
                return this._params = c3, this._data = "", this._hitLimit = false, r4;
              }, e5;
            }();
            t4.DcsHandler = l3;
          }, 2015: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            });
            Object.defineProperty(t4, "__esModule", { value: true }), t4.EscapeSequenceParser = t4.VT500_TRANSITION_TABLE = t4.TransitionTable = void 0;
            var o3 = r3(844), s3 = r3(8273), a3 = r3(8742), c3 = r3(6242), l3 = r3(6351), h3 = function() {
              function e5(e6) {
                this.table = new Uint8Array(e6);
              }
              return e5.prototype.setDefault = function(e6, t5) {
                (0, s3.fill)(this.table, e6 << 4 | t5);
              }, e5.prototype.add = function(e6, t5, r4, i4) {
                this.table[t5 << 8 | e6] = r4 << 4 | i4;
              }, e5.prototype.addMany = function(e6, t5, r4, i4) {
                for (var n4 = 0; n4 < e6.length; n4++)
                  this.table[t5 << 8 | e6[n4]] = r4 << 4 | i4;
              }, e5;
            }();
            t4.TransitionTable = h3;
            var u3 = 160;
            t4.VT500_TRANSITION_TABLE = function() {
              var e5 = new h3(4095), t5 = Array.apply(null, Array(256)).map(function(e6, t6) {
                return t6;
              }), r4 = function(e6, r5) {
                return t5.slice(e6, r5);
              }, i4 = r4(32, 127), n4 = r4(0, 24);
              n4.push(25), n4.push.apply(n4, r4(28, 32));
              var o4, s4 = r4(0, 14);
              for (o4 in e5.setDefault(1, 0), e5.addMany(i4, 0, 2, 0), s4)
                e5.addMany([24, 26, 153, 154], o4, 3, 0), e5.addMany(r4(128, 144), o4, 3, 0), e5.addMany(r4(144, 152), o4, 3, 0), e5.add(156, o4, 0, 0), e5.add(27, o4, 11, 1), e5.add(157, o4, 4, 8), e5.addMany([152, 158, 159], o4, 0, 7), e5.add(155, o4, 11, 3), e5.add(144, o4, 11, 9);
              return e5.addMany(n4, 0, 3, 0), e5.addMany(n4, 1, 3, 1), e5.add(127, 1, 0, 1), e5.addMany(n4, 8, 0, 8), e5.addMany(n4, 3, 3, 3), e5.add(127, 3, 0, 3), e5.addMany(n4, 4, 3, 4), e5.add(127, 4, 0, 4), e5.addMany(n4, 6, 3, 6), e5.addMany(n4, 5, 3, 5), e5.add(127, 5, 0, 5), e5.addMany(n4, 2, 3, 2), e5.add(127, 2, 0, 2), e5.add(93, 1, 4, 8), e5.addMany(i4, 8, 5, 8), e5.add(127, 8, 5, 8), e5.addMany([156, 27, 24, 26, 7], 8, 6, 0), e5.addMany(r4(28, 32), 8, 0, 8), e5.addMany([88, 94, 95], 1, 0, 7), e5.addMany(i4, 7, 0, 7), e5.addMany(n4, 7, 0, 7), e5.add(156, 7, 0, 0), e5.add(127, 7, 0, 7), e5.add(91, 1, 11, 3), e5.addMany(r4(64, 127), 3, 7, 0), e5.addMany(r4(48, 60), 3, 8, 4), e5.addMany([60, 61, 62, 63], 3, 9, 4), e5.addMany(r4(48, 60), 4, 8, 4), e5.addMany(r4(64, 127), 4, 7, 0), e5.addMany([60, 61, 62, 63], 4, 0, 6), e5.addMany(r4(32, 64), 6, 0, 6), e5.add(127, 6, 0, 6), e5.addMany(r4(64, 127), 6, 0, 0), e5.addMany(r4(32, 48), 3, 9, 5), e5.addMany(r4(32, 48), 5, 9, 5), e5.addMany(r4(48, 64), 5, 0, 6), e5.addMany(r4(64, 127), 5, 7, 0), e5.addMany(r4(32, 48), 4, 9, 5), e5.addMany(r4(32, 48), 1, 9, 2), e5.addMany(r4(32, 48), 2, 9, 2), e5.addMany(r4(48, 127), 2, 10, 0), e5.addMany(r4(48, 80), 1, 10, 0), e5.addMany(r4(81, 88), 1, 10, 0), e5.addMany([89, 90, 92], 1, 10, 0), e5.addMany(r4(96, 127), 1, 10, 0), e5.add(80, 1, 11, 9), e5.addMany(n4, 9, 0, 9), e5.add(127, 9, 0, 9), e5.addMany(r4(28, 32), 9, 0, 9), e5.addMany(r4(32, 48), 9, 9, 12), e5.addMany(r4(48, 60), 9, 8, 10), e5.addMany([60, 61, 62, 63], 9, 9, 10), e5.addMany(n4, 11, 0, 11), e5.addMany(r4(32, 128), 11, 0, 11), e5.addMany(r4(28, 32), 11, 0, 11), e5.addMany(n4, 10, 0, 10), e5.add(127, 10, 0, 10), e5.addMany(r4(28, 32), 10, 0, 10), e5.addMany(r4(48, 60), 10, 8, 10), e5.addMany([60, 61, 62, 63], 10, 0, 11), e5.addMany(r4(32, 48), 10, 9, 12), e5.addMany(n4, 12, 0, 12), e5.add(127, 12, 0, 12), e5.addMany(r4(28, 32), 12, 0, 12), e5.addMany(r4(32, 48), 12, 9, 12), e5.addMany(r4(48, 64), 12, 0, 11), e5.addMany(r4(64, 127), 12, 12, 13), e5.addMany(r4(64, 127), 10, 12, 13), e5.addMany(r4(64, 127), 9, 12, 13), e5.addMany(n4, 13, 13, 13), e5.addMany(i4, 13, 13, 13), e5.add(127, 13, 0, 13), e5.addMany([27, 156, 24, 26], 13, 14, 0), e5.add(u3, 0, 2, 0), e5.add(u3, 8, 5, 8), e5.add(u3, 6, 0, 6), e5.add(u3, 11, 0, 11), e5.add(u3, 13, 13, 13), e5;
            }();
            var f3 = function(e5) {
              function r4(r5) {
                r5 === void 0 && (r5 = t4.VT500_TRANSITION_TABLE);
                var i4 = e5.call(this) || this;
                return i4._transitions = r5, i4._parseStack = { state: 0, handlers: [], handlerPos: 0, transition: 0, chunkPos: 0 }, i4.initialState = 0, i4.currentState = i4.initialState, i4._params = new a3.Params(), i4._params.addParam(0), i4._collect = 0, i4.precedingCodepoint = 0, i4._printHandlerFb = function(e6, t5, r6) {
                }, i4._executeHandlerFb = function(e6) {
                }, i4._csiHandlerFb = function(e6, t5) {
                }, i4._escHandlerFb = function(e6) {
                }, i4._errorHandlerFb = function(e6) {
                  return e6;
                }, i4._printHandler = i4._printHandlerFb, i4._executeHandlers = /* @__PURE__ */ Object.create(null), i4._csiHandlers = /* @__PURE__ */ Object.create(null), i4._escHandlers = /* @__PURE__ */ Object.create(null), i4._oscParser = new c3.OscParser(), i4._dcsParser = new l3.DcsParser(), i4._errorHandler = i4._errorHandlerFb, i4.registerEscHandler({ final: "\\" }, function() {
                  return true;
                }), i4;
              }
              return n3(r4, e5), r4.prototype._identifier = function(e6, t5) {
                t5 === void 0 && (t5 = [64, 126]);
                var r5 = 0;
                if (e6.prefix) {
                  if (e6.prefix.length > 1)
                    throw new Error("only one byte as prefix supported");
                  if ((r5 = e6.prefix.charCodeAt(0)) && 60 > r5 || r5 > 63)
                    throw new Error("prefix must be in range 0x3c .. 0x3f");
                }
                if (e6.intermediates) {
                  if (e6.intermediates.length > 2)
                    throw new Error("only two bytes as intermediates are supported");
                  for (var i4 = 0; i4 < e6.intermediates.length; ++i4) {
                    var n4 = e6.intermediates.charCodeAt(i4);
                    if (32 > n4 || n4 > 47)
                      throw new Error("intermediate must be in range 0x20 .. 0x2f");
                    r5 <<= 8, r5 |= n4;
                  }
                }
                if (e6.final.length !== 1)
                  throw new Error("final must be a single byte");
                var o4 = e6.final.charCodeAt(0);
                if (t5[0] > o4 || o4 > t5[1])
                  throw new Error("final must be in range " + t5[0] + " .. " + t5[1]);
                return (r5 <<= 8) | o4;
              }, r4.prototype.identToString = function(e6) {
                for (var t5 = []; e6; )
                  t5.push(String.fromCharCode(255 & e6)), e6 >>= 8;
                return t5.reverse().join("");
              }, r4.prototype.dispose = function() {
                this._csiHandlers = /* @__PURE__ */ Object.create(null), this._executeHandlers = /* @__PURE__ */ Object.create(null), this._escHandlers = /* @__PURE__ */ Object.create(null), this._oscParser.dispose(), this._dcsParser.dispose();
              }, r4.prototype.setPrintHandler = function(e6) {
                this._printHandler = e6;
              }, r4.prototype.clearPrintHandler = function() {
                this._printHandler = this._printHandlerFb;
              }, r4.prototype.registerEscHandler = function(e6, t5) {
                var r5 = this._identifier(e6, [48, 126]);
                this._escHandlers[r5] === void 0 && (this._escHandlers[r5] = []);
                var i4 = this._escHandlers[r5];
                return i4.push(t5), { dispose: function() {
                  var e7 = i4.indexOf(t5);
                  e7 !== -1 && i4.splice(e7, 1);
                } };
              }, r4.prototype.clearEscHandler = function(e6) {
                this._escHandlers[this._identifier(e6, [48, 126])] && delete this._escHandlers[this._identifier(e6, [48, 126])];
              }, r4.prototype.setEscHandlerFallback = function(e6) {
                this._escHandlerFb = e6;
              }, r4.prototype.setExecuteHandler = function(e6, t5) {
                this._executeHandlers[e6.charCodeAt(0)] = t5;
              }, r4.prototype.clearExecuteHandler = function(e6) {
                this._executeHandlers[e6.charCodeAt(0)] && delete this._executeHandlers[e6.charCodeAt(0)];
              }, r4.prototype.setExecuteHandlerFallback = function(e6) {
                this._executeHandlerFb = e6;
              }, r4.prototype.registerCsiHandler = function(e6, t5) {
                var r5 = this._identifier(e6);
                this._csiHandlers[r5] === void 0 && (this._csiHandlers[r5] = []);
                var i4 = this._csiHandlers[r5];
                return i4.push(t5), { dispose: function() {
                  var e7 = i4.indexOf(t5);
                  e7 !== -1 && i4.splice(e7, 1);
                } };
              }, r4.prototype.clearCsiHandler = function(e6) {
                this._csiHandlers[this._identifier(e6)] && delete this._csiHandlers[this._identifier(e6)];
              }, r4.prototype.setCsiHandlerFallback = function(e6) {
                this._csiHandlerFb = e6;
              }, r4.prototype.registerDcsHandler = function(e6, t5) {
                return this._dcsParser.registerHandler(this._identifier(e6), t5);
              }, r4.prototype.clearDcsHandler = function(e6) {
                this._dcsParser.clearHandler(this._identifier(e6));
              }, r4.prototype.setDcsHandlerFallback = function(e6) {
                this._dcsParser.setHandlerFallback(e6);
              }, r4.prototype.registerOscHandler = function(e6, t5) {
                return this._oscParser.registerHandler(e6, t5);
              }, r4.prototype.clearOscHandler = function(e6) {
                this._oscParser.clearHandler(e6);
              }, r4.prototype.setOscHandlerFallback = function(e6) {
                this._oscParser.setHandlerFallback(e6);
              }, r4.prototype.setErrorHandler = function(e6) {
                this._errorHandler = e6;
              }, r4.prototype.clearErrorHandler = function() {
                this._errorHandler = this._errorHandlerFb;
              }, r4.prototype.reset = function() {
                this.currentState = this.initialState, this._oscParser.reset(), this._dcsParser.reset(), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0, this._parseStack.state !== 0 && (this._parseStack.state = 2, this._parseStack.handlers = []);
              }, r4.prototype._preserveStack = function(e6, t5, r5, i4, n4) {
                this._parseStack.state = e6, this._parseStack.handlers = t5, this._parseStack.handlerPos = r5, this._parseStack.transition = i4, this._parseStack.chunkPos = n4;
              }, r4.prototype.parse = function(e6, t5, r5) {
                var i4, n4 = 0, o4 = 0, s4 = 0;
                if (this._parseStack.state)
                  if (this._parseStack.state === 2)
                    this._parseStack.state = 0, s4 = this._parseStack.chunkPos + 1;
                  else {
                    if (r5 === void 0 || this._parseStack.state === 1)
                      throw this._parseStack.state = 1, new Error("improper continuation due to previous async handler, giving up parsing");
                    var a4 = this._parseStack.handlers, c4 = this._parseStack.handlerPos - 1;
                    switch (this._parseStack.state) {
                      case 3:
                        if (r5 === false && c4 > -1) {
                          for (; c4 >= 0 && (i4 = a4[c4](this._params)) !== true; c4--)
                            if (i4 instanceof Promise)
                              return this._parseStack.handlerPos = c4, i4;
                        }
                        this._parseStack.handlers = [];
                        break;
                      case 4:
                        if (r5 === false && c4 > -1) {
                          for (; c4 >= 0 && (i4 = a4[c4]()) !== true; c4--)
                            if (i4 instanceof Promise)
                              return this._parseStack.handlerPos = c4, i4;
                        }
                        this._parseStack.handlers = [];
                        break;
                      case 6:
                        if (n4 = e6[this._parseStack.chunkPos], i4 = this._dcsParser.unhook(n4 !== 24 && n4 !== 26, r5))
                          return i4;
                        n4 === 27 && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;
                        break;
                      case 5:
                        if (n4 = e6[this._parseStack.chunkPos], i4 = this._oscParser.end(n4 !== 24 && n4 !== 26, r5))
                          return i4;
                        n4 === 27 && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;
                    }
                    this._parseStack.state = 0, s4 = this._parseStack.chunkPos + 1, this.precedingCodepoint = 0, this.currentState = 15 & this._parseStack.transition;
                  }
                for (var l4 = s4; l4 < t5; ++l4) {
                  switch (n4 = e6[l4], (o4 = this._transitions.table[this.currentState << 8 | (n4 < 160 ? n4 : u3)]) >> 4) {
                    case 2:
                      for (var h4 = l4 + 1; ; ++h4) {
                        if (h4 >= t5 || (n4 = e6[h4]) < 32 || n4 > 126 && n4 < u3) {
                          this._printHandler(e6, l4, h4), l4 = h4 - 1;
                          break;
                        }
                        if (++h4 >= t5 || (n4 = e6[h4]) < 32 || n4 > 126 && n4 < u3) {
                          this._printHandler(e6, l4, h4), l4 = h4 - 1;
                          break;
                        }
                        if (++h4 >= t5 || (n4 = e6[h4]) < 32 || n4 > 126 && n4 < u3) {
                          this._printHandler(e6, l4, h4), l4 = h4 - 1;
                          break;
                        }
                        if (++h4 >= t5 || (n4 = e6[h4]) < 32 || n4 > 126 && n4 < u3) {
                          this._printHandler(e6, l4, h4), l4 = h4 - 1;
                          break;
                        }
                      }
                      break;
                    case 3:
                      this._executeHandlers[n4] ? this._executeHandlers[n4]() : this._executeHandlerFb(n4), this.precedingCodepoint = 0;
                      break;
                    case 0:
                      break;
                    case 1:
                      if (this._errorHandler({ position: l4, code: n4, currentState: this.currentState, collect: this._collect, params: this._params, abort: false }).abort)
                        return;
                      break;
                    case 7:
                      for (var f4 = (a4 = this._csiHandlers[this._collect << 8 | n4]) ? a4.length - 1 : -1; f4 >= 0 && (i4 = a4[f4](this._params)) !== true; f4--)
                        if (i4 instanceof Promise)
                          return this._preserveStack(3, a4, f4, o4, l4), i4;
                      f4 < 0 && this._csiHandlerFb(this._collect << 8 | n4, this._params), this.precedingCodepoint = 0;
                      break;
                    case 8:
                      do {
                        switch (n4) {
                          case 59:
                            this._params.addParam(0);
                            break;
                          case 58:
                            this._params.addSubParam(-1);
                            break;
                          default:
                            this._params.addDigit(n4 - 48);
                        }
                      } while (++l4 < t5 && (n4 = e6[l4]) > 47 && n4 < 60);
                      l4--;
                      break;
                    case 9:
                      this._collect <<= 8, this._collect |= n4;
                      break;
                    case 10:
                      for (var _3 = this._escHandlers[this._collect << 8 | n4], d3 = _3 ? _3.length - 1 : -1; d3 >= 0 && (i4 = _3[d3]()) !== true; d3--)
                        if (i4 instanceof Promise)
                          return this._preserveStack(4, _3, d3, o4, l4), i4;
                      d3 < 0 && this._escHandlerFb(this._collect << 8 | n4), this.precedingCodepoint = 0;
                      break;
                    case 11:
                      this._params.reset(), this._params.addParam(0), this._collect = 0;
                      break;
                    case 12:
                      this._dcsParser.hook(this._collect << 8 | n4, this._params);
                      break;
                    case 13:
                      for (var p3 = l4 + 1; ; ++p3)
                        if (p3 >= t5 || (n4 = e6[p3]) === 24 || n4 === 26 || n4 === 27 || n4 > 127 && n4 < u3) {
                          this._dcsParser.put(e6, l4, p3), l4 = p3 - 1;
                          break;
                        }
                      break;
                    case 14:
                      if (i4 = this._dcsParser.unhook(n4 !== 24 && n4 !== 26))
                        return this._preserveStack(6, [], 0, o4, l4), i4;
                      n4 === 27 && (o4 |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0;
                      break;
                    case 4:
                      this._oscParser.start();
                      break;
                    case 5:
                      for (var v2 = l4 + 1; ; v2++)
                        if (v2 >= t5 || (n4 = e6[v2]) < 32 || n4 > 127 && n4 < u3) {
                          this._oscParser.put(e6, l4, v2), l4 = v2 - 1;
                          break;
                        }
                      break;
                    case 6:
                      if (i4 = this._oscParser.end(n4 !== 24 && n4 !== 26))
                        return this._preserveStack(5, [], 0, o4, l4), i4;
                      n4 === 27 && (o4 |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0;
                  }
                  this.currentState = 15 & o4;
                }
              }, r4;
            }(o3.Disposable);
            t4.EscapeSequenceParser = f3;
          }, 6242: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.OscHandler = t4.OscParser = void 0;
            var i3 = r3(5770), n3 = r3(482), o3 = [], s3 = function() {
              function e5() {
                this._state = 0, this._active = o3, this._id = -1, this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = function() {
                }, this._stack = { paused: false, loopPosition: 0, fallThrough: false };
              }
              return e5.prototype.registerHandler = function(e6, t5) {
                this._handlers[e6] === void 0 && (this._handlers[e6] = []);
                var r4 = this._handlers[e6];
                return r4.push(t5), { dispose: function() {
                  var e7 = r4.indexOf(t5);
                  e7 !== -1 && r4.splice(e7, 1);
                } };
              }, e5.prototype.clearHandler = function(e6) {
                this._handlers[e6] && delete this._handlers[e6];
              }, e5.prototype.setHandlerFallback = function(e6) {
                this._handlerFb = e6;
              }, e5.prototype.dispose = function() {
                this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = function() {
                }, this._active = o3;
              }, e5.prototype.reset = function() {
                if (this._state === 2)
                  for (var e6 = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e6 >= 0; --e6)
                    this._active[e6].end(false);
                this._stack.paused = false, this._active = o3, this._id = -1, this._state = 0;
              }, e5.prototype._start = function() {
                if (this._active = this._handlers[this._id] || o3, this._active.length)
                  for (var e6 = this._active.length - 1; e6 >= 0; e6--)
                    this._active[e6].start();
                else
                  this._handlerFb(this._id, "START");
              }, e5.prototype._put = function(e6, t5, r4) {
                if (this._active.length)
                  for (var i4 = this._active.length - 1; i4 >= 0; i4--)
                    this._active[i4].put(e6, t5, r4);
                else
                  this._handlerFb(this._id, "PUT", (0, n3.utf32ToString)(e6, t5, r4));
              }, e5.prototype.start = function() {
                this.reset(), this._state = 1;
              }, e5.prototype.put = function(e6, t5, r4) {
                if (this._state !== 3) {
                  if (this._state === 1)
                    for (; t5 < r4; ) {
                      var i4 = e6[t5++];
                      if (i4 === 59) {
                        this._state = 2, this._start();
                        break;
                      }
                      if (i4 < 48 || 57 < i4)
                        return void (this._state = 3);
                      this._id === -1 && (this._id = 0), this._id = 10 * this._id + i4 - 48;
                    }
                  this._state === 2 && r4 - t5 > 0 && this._put(e6, t5, r4);
                }
              }, e5.prototype.end = function(e6, t5) {
                if (t5 === void 0 && (t5 = true), this._state !== 0) {
                  if (this._state !== 3)
                    if (this._state === 1 && this._start(), this._active.length) {
                      var r4 = false, i4 = this._active.length - 1, n4 = false;
                      if (this._stack.paused && (i4 = this._stack.loopPosition - 1, r4 = t5, n4 = this._stack.fallThrough, this._stack.paused = false), !n4 && r4 === false) {
                        for (; i4 >= 0 && (r4 = this._active[i4].end(e6)) !== true; i4--)
                          if (r4 instanceof Promise)
                            return this._stack.paused = true, this._stack.loopPosition = i4, this._stack.fallThrough = false, r4;
                        i4--;
                      }
                      for (; i4 >= 0; i4--)
                        if ((r4 = this._active[i4].end(false)) instanceof Promise)
                          return this._stack.paused = true, this._stack.loopPosition = i4, this._stack.fallThrough = true, r4;
                    } else
                      this._handlerFb(this._id, "END", e6);
                  this._active = o3, this._id = -1, this._state = 0;
                }
              }, e5;
            }();
            t4.OscParser = s3;
            var a3 = function() {
              function e5(e6) {
                this._handler = e6, this._data = "", this._hitLimit = false;
              }
              return e5.prototype.start = function() {
                this._data = "", this._hitLimit = false;
              }, e5.prototype.put = function(e6, t5, r4) {
                this._hitLimit || (this._data += (0, n3.utf32ToString)(e6, t5, r4), this._data.length > i3.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = true));
              }, e5.prototype.end = function(e6) {
                var t5 = this, r4 = false;
                if (this._hitLimit)
                  r4 = false;
                else if (e6 && (r4 = this._handler(this._data)) instanceof Promise)
                  return r4.then(function(e7) {
                    return t5._data = "", t5._hitLimit = false, e7;
                  });
                return this._data = "", this._hitLimit = false, r4;
              }, e5;
            }();
            t4.OscHandler = a3;
          }, 8742: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.Params = void 0;
            var r3 = 2147483647, i3 = function() {
              function e5(e6, t5) {
                if (e6 === void 0 && (e6 = 32), t5 === void 0 && (t5 = 32), this.maxLength = e6, this.maxSubParamsLength = t5, t5 > 256)
                  throw new Error("maxSubParamsLength must not be greater than 256");
                this.params = new Int32Array(e6), this.length = 0, this._subParams = new Int32Array(t5), this._subParamsLength = 0, this._subParamsIdx = new Uint16Array(e6), this._rejectDigits = false, this._rejectSubDigits = false, this._digitIsSub = false;
              }
              return e5.fromArray = function(t5) {
                var r4 = new e5();
                if (!t5.length)
                  return r4;
                for (var i4 = Array.isArray(t5[0]) ? 1 : 0; i4 < t5.length; ++i4) {
                  var n3 = t5[i4];
                  if (Array.isArray(n3))
                    for (var o3 = 0; o3 < n3.length; ++o3)
                      r4.addSubParam(n3[o3]);
                  else
                    r4.addParam(n3);
                }
                return r4;
              }, e5.prototype.clone = function() {
                var t5 = new e5(this.maxLength, this.maxSubParamsLength);
                return t5.params.set(this.params), t5.length = this.length, t5._subParams.set(this._subParams), t5._subParamsLength = this._subParamsLength, t5._subParamsIdx.set(this._subParamsIdx), t5._rejectDigits = this._rejectDigits, t5._rejectSubDigits = this._rejectSubDigits, t5._digitIsSub = this._digitIsSub, t5;
              }, e5.prototype.toArray = function() {
                for (var e6 = [], t5 = 0; t5 < this.length; ++t5) {
                  e6.push(this.params[t5]);
                  var r4 = this._subParamsIdx[t5] >> 8, i4 = 255 & this._subParamsIdx[t5];
                  i4 - r4 > 0 && e6.push(Array.prototype.slice.call(this._subParams, r4, i4));
                }
                return e6;
              }, e5.prototype.reset = function() {
                this.length = 0, this._subParamsLength = 0, this._rejectDigits = false, this._rejectSubDigits = false, this._digitIsSub = false;
              }, e5.prototype.addParam = function(e6) {
                if (this._digitIsSub = false, this.length >= this.maxLength)
                  this._rejectDigits = true;
                else {
                  if (e6 < -1)
                    throw new Error("values lesser than -1 are not allowed");
                  this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength, this.params[this.length++] = e6 > r3 ? r3 : e6;
                }
              }, e5.prototype.addSubParam = function(e6) {
                if (this._digitIsSub = true, this.length)
                  if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength)
                    this._rejectSubDigits = true;
                  else {
                    if (e6 < -1)
                      throw new Error("values lesser than -1 are not allowed");
                    this._subParams[this._subParamsLength++] = e6 > r3 ? r3 : e6, this._subParamsIdx[this.length - 1]++;
                  }
              }, e5.prototype.hasSubParams = function(e6) {
                return (255 & this._subParamsIdx[e6]) - (this._subParamsIdx[e6] >> 8) > 0;
              }, e5.prototype.getSubParams = function(e6) {
                var t5 = this._subParamsIdx[e6] >> 8, r4 = 255 & this._subParamsIdx[e6];
                return r4 - t5 > 0 ? this._subParams.subarray(t5, r4) : null;
              }, e5.prototype.getSubParamsAll = function() {
                for (var e6 = {}, t5 = 0; t5 < this.length; ++t5) {
                  var r4 = this._subParamsIdx[t5] >> 8, i4 = 255 & this._subParamsIdx[t5];
                  i4 - r4 > 0 && (e6[t5] = this._subParams.slice(r4, i4));
                }
                return e6;
              }, e5.prototype.addDigit = function(e6) {
                var t5;
                if (!(this._rejectDigits || !(t5 = this._digitIsSub ? this._subParamsLength : this.length) || this._digitIsSub && this._rejectSubDigits)) {
                  var i4 = this._digitIsSub ? this._subParams : this.params, n3 = i4[t5 - 1];
                  i4[t5 - 1] = ~n3 ? Math.min(10 * n3 + e6, r3) : e6;
                }
              }, e5;
            }();
            t4.Params = i3;
          }, 5741: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.AddonManager = void 0;
            var r3 = function() {
              function e5() {
                this._addons = [];
              }
              return e5.prototype.dispose = function() {
                for (var e6 = this._addons.length - 1; e6 >= 0; e6--)
                  this._addons[e6].instance.dispose();
              }, e5.prototype.loadAddon = function(e6, t5) {
                var r4 = this, i3 = { instance: t5, dispose: t5.dispose, isDisposed: false };
                this._addons.push(i3), t5.dispose = function() {
                  return r4._wrappedAddonDispose(i3);
                }, t5.activate(e6);
              }, e5.prototype._wrappedAddonDispose = function(e6) {
                if (!e6.isDisposed) {
                  for (var t5 = -1, r4 = 0; r4 < this._addons.length; r4++)
                    if (this._addons[r4] === e6) {
                      t5 = r4;
                      break;
                    }
                  if (t5 === -1)
                    throw new Error("Could not dispose an addon that has not been loaded");
                  e6.isDisposed = true, e6.dispose.apply(e6.instance), this._addons.splice(t5, 1);
                }
              }, e5;
            }();
            t4.AddonManager = r3;
          }, 8771: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.BufferApiView = void 0;
            var i3 = r3(3785), n3 = r3(511), o3 = function() {
              function e5(e6, t5) {
                this._buffer = e6, this.type = t5;
              }
              return e5.prototype.init = function(e6) {
                return this._buffer = e6, this;
              }, Object.defineProperty(e5.prototype, "cursorY", { get: function() {
                return this._buffer.y;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "cursorX", { get: function() {
                return this._buffer.x;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "viewportY", { get: function() {
                return this._buffer.ydisp;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "baseY", { get: function() {
                return this._buffer.ybase;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "length", { get: function() {
                return this._buffer.lines.length;
              }, enumerable: false, configurable: true }), e5.prototype.getLine = function(e6) {
                var t5 = this._buffer.lines.get(e6);
                if (t5)
                  return new i3.BufferLineApiView(t5);
              }, e5.prototype.getNullCell = function() {
                return new n3.CellData();
              }, e5;
            }();
            t4.BufferApiView = o3;
          }, 3785: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.BufferLineApiView = void 0;
            var i3 = r3(511), n3 = function() {
              function e5(e6) {
                this._line = e6;
              }
              return Object.defineProperty(e5.prototype, "isWrapped", { get: function() {
                return this._line.isWrapped;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "length", { get: function() {
                return this._line.length;
              }, enumerable: false, configurable: true }), e5.prototype.getCell = function(e6, t5) {
                if (!(e6 < 0 || e6 >= this._line.length))
                  return t5 ? (this._line.loadCell(e6, t5), t5) : this._line.loadCell(e6, new i3.CellData());
              }, e5.prototype.translateToString = function(e6, t5, r4) {
                return this._line.translateToString(e6, t5, r4);
              }, e5;
            }();
            t4.BufferLineApiView = n3;
          }, 8285: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.BufferNamespaceApi = void 0;
            var i3 = r3(8771), n3 = r3(8460), o3 = function() {
              function e5(e6) {
                var t5 = this;
                this._core = e6, this._onBufferChange = new n3.EventEmitter(), this._normal = new i3.BufferApiView(this._core.buffers.normal, "normal"), this._alternate = new i3.BufferApiView(this._core.buffers.alt, "alternate"), this._core.buffers.onBufferActivate(function() {
                  return t5._onBufferChange.fire(t5.active);
                });
              }
              return Object.defineProperty(e5.prototype, "onBufferChange", { get: function() {
                return this._onBufferChange.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "active", { get: function() {
                if (this._core.buffers.active === this._core.buffers.normal)
                  return this.normal;
                if (this._core.buffers.active === this._core.buffers.alt)
                  return this.alternate;
                throw new Error("Active buffer is neither normal nor alternate");
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "normal", { get: function() {
                return this._normal.init(this._core.buffers.normal);
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "alternate", { get: function() {
                return this._alternate.init(this._core.buffers.alt);
              }, enumerable: false, configurable: true }), e5;
            }();
            t4.BufferNamespaceApi = o3;
          }, 7975: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.ParserApi = void 0;
            var r3 = function() {
              function e5(e6) {
                this._core = e6;
              }
              return e5.prototype.registerCsiHandler = function(e6, t5) {
                return this._core.registerCsiHandler(e6, function(e7) {
                  return t5(e7.toArray());
                });
              }, e5.prototype.addCsiHandler = function(e6, t5) {
                return this.registerCsiHandler(e6, t5);
              }, e5.prototype.registerDcsHandler = function(e6, t5) {
                return this._core.registerDcsHandler(e6, function(e7, r4) {
                  return t5(e7, r4.toArray());
                });
              }, e5.prototype.addDcsHandler = function(e6, t5) {
                return this.registerDcsHandler(e6, t5);
              }, e5.prototype.registerEscHandler = function(e6, t5) {
                return this._core.registerEscHandler(e6, t5);
              }, e5.prototype.addEscHandler = function(e6, t5) {
                return this.registerEscHandler(e6, t5);
              }, e5.prototype.registerOscHandler = function(e6, t5) {
                return this._core.registerOscHandler(e6, t5);
              }, e5.prototype.addOscHandler = function(e6, t5) {
                return this.registerOscHandler(e6, t5);
              }, e5;
            }();
            t4.ParserApi = r3;
          }, 7090: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.UnicodeApi = void 0;
            var r3 = function() {
              function e5(e6) {
                this._core = e6;
              }
              return e5.prototype.register = function(e6) {
                this._core.unicodeService.register(e6);
              }, Object.defineProperty(e5.prototype, "versions", { get: function() {
                return this._core.unicodeService.versions;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "activeVersion", { get: function() {
                return this._core.unicodeService.activeVersion;
              }, set: function(e6) {
                this._core.unicodeService.activeVersion = e6;
              }, enumerable: false, configurable: true }), e5;
            }();
            t4.UnicodeApi = r3;
          }, 744: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.BufferService = t4.MINIMUM_ROWS = t4.MINIMUM_COLS = void 0;
            var a3 = r3(2585), c3 = r3(5295), l3 = r3(8460), h3 = r3(844);
            t4.MINIMUM_COLS = 2, t4.MINIMUM_ROWS = 1;
            var u3 = function(e5) {
              function r4(r5) {
                var i4 = e5.call(this) || this;
                return i4._optionsService = r5, i4.isUserScrolling = false, i4._onResize = new l3.EventEmitter(), i4._onScroll = new l3.EventEmitter(), i4.cols = Math.max(r5.rawOptions.cols || 0, t4.MINIMUM_COLS), i4.rows = Math.max(r5.rawOptions.rows || 0, t4.MINIMUM_ROWS), i4.buffers = new c3.BufferSet(r5, i4), i4;
              }
              return n3(r4, e5), Object.defineProperty(r4.prototype, "onResize", { get: function() {
                return this._onResize.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(r4.prototype, "onScroll", { get: function() {
                return this._onScroll.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(r4.prototype, "buffer", { get: function() {
                return this.buffers.active;
              }, enumerable: false, configurable: true }), r4.prototype.dispose = function() {
                e5.prototype.dispose.call(this), this.buffers.dispose();
              }, r4.prototype.resize = function(e6, t5) {
                this.cols = e6, this.rows = t5, this.buffers.resize(e6, t5), this.buffers.setupTabStops(this.cols), this._onResize.fire({ cols: e6, rows: t5 });
              }, r4.prototype.reset = function() {
                this.buffers.reset(), this.isUserScrolling = false;
              }, r4.prototype.scroll = function(e6, t5) {
                t5 === void 0 && (t5 = false);
                var r5, i4 = this.buffer;
                (r5 = this._cachedBlankLine) && r5.length === this.cols && r5.getFg(0) === e6.fg && r5.getBg(0) === e6.bg || (r5 = i4.getBlankLine(e6, t5), this._cachedBlankLine = r5), r5.isWrapped = t5;
                var n4 = i4.ybase + i4.scrollTop, o4 = i4.ybase + i4.scrollBottom;
                if (i4.scrollTop === 0) {
                  var s4 = i4.lines.isFull;
                  o4 === i4.lines.length - 1 ? s4 ? i4.lines.recycle().copyFrom(r5) : i4.lines.push(r5.clone()) : i4.lines.splice(o4 + 1, 0, r5.clone()), s4 ? this.isUserScrolling && (i4.ydisp = Math.max(i4.ydisp - 1, 0)) : (i4.ybase++, this.isUserScrolling || i4.ydisp++);
                } else {
                  var a4 = o4 - n4 + 1;
                  i4.lines.shiftElements(n4 + 1, a4 - 1, -1), i4.lines.set(o4, r5.clone());
                }
                this.isUserScrolling || (i4.ydisp = i4.ybase), this._onScroll.fire(i4.ydisp);
              }, r4.prototype.scrollLines = function(e6, t5, r5) {
                var i4 = this.buffer;
                if (e6 < 0) {
                  if (i4.ydisp === 0)
                    return;
                  this.isUserScrolling = true;
                } else
                  e6 + i4.ydisp >= i4.ybase && (this.isUserScrolling = false);
                var n4 = i4.ydisp;
                i4.ydisp = Math.max(Math.min(i4.ydisp + e6, i4.ybase), 0), n4 !== i4.ydisp && (t5 || this._onScroll.fire(i4.ydisp));
              }, r4.prototype.scrollPages = function(e6) {
                this.scrollLines(e6 * (this.rows - 1));
              }, r4.prototype.scrollToTop = function() {
                this.scrollLines(-this.buffer.ydisp);
              }, r4.prototype.scrollToBottom = function() {
                this.scrollLines(this.buffer.ybase - this.buffer.ydisp);
              }, r4.prototype.scrollToLine = function(e6) {
                var t5 = e6 - this.buffer.ydisp;
                t5 !== 0 && this.scrollLines(t5);
              }, o3([s3(0, a3.IOptionsService)], r4);
            }(h3.Disposable);
            t4.BufferService = u3;
          }, 7994: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CharsetService = void 0;
            var r3 = function() {
              function e5() {
                this.glevel = 0, this._charsets = [];
              }
              return e5.prototype.reset = function() {
                this.charset = void 0, this._charsets = [], this.glevel = 0;
              }, e5.prototype.setgLevel = function(e6) {
                this.glevel = e6, this.charset = this._charsets[e6];
              }, e5.prototype.setgCharset = function(e6, t5) {
                this._charsets[e6] = t5, this.glevel === e6 && (this.charset = t5);
              }, e5;
            }();
            t4.CharsetService = r3;
          }, 1753: function(e4, t4, r3) {
            var i3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, n3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CoreMouseService = void 0;
            var o3 = r3(2585), s3 = r3(8460), a3 = { NONE: { events: 0, restrict: function() {
              return false;
            } }, X10: { events: 1, restrict: function(e5) {
              return e5.button !== 4 && e5.action === 1 && (e5.ctrl = false, e5.alt = false, e5.shift = false, true);
            } }, VT200: { events: 19, restrict: function(e5) {
              return e5.action !== 32;
            } }, DRAG: { events: 23, restrict: function(e5) {
              return e5.action !== 32 || e5.button !== 3;
            } }, ANY: { events: 31, restrict: function(e5) {
              return true;
            } } };
            function c3(e5, t5) {
              var r4 = (e5.ctrl ? 16 : 0) | (e5.shift ? 4 : 0) | (e5.alt ? 8 : 0);
              return e5.button === 4 ? (r4 |= 64, r4 |= e5.action) : (r4 |= 3 & e5.button, 4 & e5.button && (r4 |= 64), 8 & e5.button && (r4 |= 128), e5.action === 32 ? r4 |= 32 : e5.action !== 0 || t5 || (r4 |= 3)), r4;
            }
            var l3 = String.fromCharCode, h3 = { DEFAULT: function(e5) {
              var t5 = [c3(e5, false) + 32, e5.col + 32, e5.row + 32];
              return t5[0] > 255 || t5[1] > 255 || t5[2] > 255 ? "" : "\x1B[M" + l3(t5[0]) + l3(t5[1]) + l3(t5[2]);
            }, SGR: function(e5) {
              var t5 = e5.action === 0 && e5.button !== 4 ? "m" : "M";
              return "\x1B[<" + c3(e5, true) + ";" + e5.col + ";" + e5.row + t5;
            } }, u3 = function() {
              function e5(e6, t5) {
                this._bufferService = e6, this._coreService = t5, this._protocols = {}, this._encodings = {}, this._activeProtocol = "", this._activeEncoding = "", this._onProtocolChange = new s3.EventEmitter(), this._lastEvent = null;
                for (var r4 = 0, i4 = Object.keys(a3); r4 < i4.length; r4++) {
                  var n4 = i4[r4];
                  this.addProtocol(n4, a3[n4]);
                }
                for (var o4 = 0, c4 = Object.keys(h3); o4 < c4.length; o4++) {
                  var l4 = c4[o4];
                  this.addEncoding(l4, h3[l4]);
                }
                this.reset();
              }
              return e5.prototype.addProtocol = function(e6, t5) {
                this._protocols[e6] = t5;
              }, e5.prototype.addEncoding = function(e6, t5) {
                this._encodings[e6] = t5;
              }, Object.defineProperty(e5.prototype, "activeProtocol", { get: function() {
                return this._activeProtocol;
              }, set: function(e6) {
                if (!this._protocols[e6])
                  throw new Error('unknown protocol "' + e6 + '"');
                this._activeProtocol = e6, this._onProtocolChange.fire(this._protocols[e6].events);
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "areMouseEventsActive", { get: function() {
                return this._protocols[this._activeProtocol].events !== 0;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "activeEncoding", { get: function() {
                return this._activeEncoding;
              }, set: function(e6) {
                if (!this._encodings[e6])
                  throw new Error('unknown encoding "' + e6 + '"');
                this._activeEncoding = e6;
              }, enumerable: false, configurable: true }), e5.prototype.reset = function() {
                this.activeProtocol = "NONE", this.activeEncoding = "DEFAULT", this._lastEvent = null;
              }, Object.defineProperty(e5.prototype, "onProtocolChange", { get: function() {
                return this._onProtocolChange.event;
              }, enumerable: false, configurable: true }), e5.prototype.triggerMouseEvent = function(e6) {
                if (e6.col < 0 || e6.col >= this._bufferService.cols || e6.row < 0 || e6.row >= this._bufferService.rows)
                  return false;
                if (e6.button === 4 && e6.action === 32)
                  return false;
                if (e6.button === 3 && e6.action !== 32)
                  return false;
                if (e6.button !== 4 && (e6.action === 2 || e6.action === 3))
                  return false;
                if (e6.col++, e6.row++, e6.action === 32 && this._lastEvent && this._compareEvents(this._lastEvent, e6))
                  return false;
                if (!this._protocols[this._activeProtocol].restrict(e6))
                  return false;
                var t5 = this._encodings[this._activeEncoding](e6);
                return t5 && (this._activeEncoding === "DEFAULT" ? this._coreService.triggerBinaryEvent(t5) : this._coreService.triggerDataEvent(t5, true)), this._lastEvent = e6, true;
              }, e5.prototype.explainEvents = function(e6) {
                return { down: !!(1 & e6), up: !!(2 & e6), drag: !!(4 & e6), move: !!(8 & e6), wheel: !!(16 & e6) };
              }, e5.prototype._compareEvents = function(e6, t5) {
                return e6.col === t5.col && e6.row === t5.row && e6.button === t5.button && e6.action === t5.action && e6.ctrl === t5.ctrl && e6.alt === t5.alt && e6.shift === t5.shift;
              }, i3([n3(0, o3.IBufferService), n3(1, o3.ICoreService)], e5);
            }();
            t4.CoreMouseService = u3;
          }, 6975: function(e4, t4, r3) {
            var i3, n3 = this && this.__extends || (i3 = function(e5, t5) {
              return i3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e6, t6) {
                e6.__proto__ = t6;
              } || function(e6, t6) {
                for (var r4 in t6)
                  Object.prototype.hasOwnProperty.call(t6, r4) && (e6[r4] = t6[r4]);
              }, i3(e5, t5);
            }, function(e5, t5) {
              if (typeof t5 != "function" && t5 !== null)
                throw new TypeError("Class extends value " + String(t5) + " is not a constructor or null");
              function r4() {
                this.constructor = e5;
              }
              i3(e5, t5), e5.prototype = t5 === null ? Object.create(t5) : (r4.prototype = t5.prototype, new r4());
            }), o3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, s3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.CoreService = void 0;
            var a3 = r3(2585), c3 = r3(8460), l3 = r3(1439), h3 = r3(844), u3 = Object.freeze({ insertMode: false }), f3 = Object.freeze({ applicationCursorKeys: false, applicationKeypad: false, bracketedPasteMode: false, origin: false, reverseWraparound: false, sendFocus: false, wraparound: true }), _3 = function(e5) {
              function t5(t6, r4, i4, n4) {
                var o4 = e5.call(this) || this;
                return o4._bufferService = r4, o4._logService = i4, o4._optionsService = n4, o4.isCursorInitialized = false, o4.isCursorHidden = false, o4._onData = o4.register(new c3.EventEmitter()), o4._onUserInput = o4.register(new c3.EventEmitter()), o4._onBinary = o4.register(new c3.EventEmitter()), o4._scrollToBottom = t6, o4.register({ dispose: function() {
                  return o4._scrollToBottom = void 0;
                } }), o4.modes = (0, l3.clone)(u3), o4.decPrivateModes = (0, l3.clone)(f3), o4;
              }
              return n3(t5, e5), Object.defineProperty(t5.prototype, "onData", { get: function() {
                return this._onData.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onUserInput", { get: function() {
                return this._onUserInput.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(t5.prototype, "onBinary", { get: function() {
                return this._onBinary.event;
              }, enumerable: false, configurable: true }), t5.prototype.reset = function() {
                this.modes = (0, l3.clone)(u3), this.decPrivateModes = (0, l3.clone)(f3);
              }, t5.prototype.triggerDataEvent = function(e6, t6) {
                if (t6 === void 0 && (t6 = false), !this._optionsService.rawOptions.disableStdin) {
                  var r4 = this._bufferService.buffer;
                  r4.ybase !== r4.ydisp && this._scrollToBottom(), t6 && this._onUserInput.fire(), this._logService.debug('sending data "' + e6 + '"', function() {
                    return e6.split("").map(function(e7) {
                      return e7.charCodeAt(0);
                    });
                  }), this._onData.fire(e6);
                }
              }, t5.prototype.triggerBinaryEvent = function(e6) {
                this._optionsService.rawOptions.disableStdin || (this._logService.debug('sending binary "' + e6 + '"', function() {
                  return e6.split("").map(function(e7) {
                    return e7.charCodeAt(0);
                  });
                }), this._onBinary.fire(e6));
              }, o3([s3(1, a3.IBufferService), s3(2, a3.ILogService), s3(3, a3.IOptionsService)], t5);
            }(h3.Disposable);
            t4.CoreService = _3;
          }, 3730: function(e4, t4, r3) {
            var i3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a3 = e5.length - 1; a3 >= 0; a3--)
                  (n4 = e5[a3]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, n3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.DirtyRowService = void 0;
            var o3 = r3(2585), s3 = function() {
              function e5(e6) {
                this._bufferService = e6, this.clearRange();
              }
              return Object.defineProperty(e5.prototype, "start", { get: function() {
                return this._start;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "end", { get: function() {
                return this._end;
              }, enumerable: false, configurable: true }), e5.prototype.clearRange = function() {
                this._start = this._bufferService.buffer.y, this._end = this._bufferService.buffer.y;
              }, e5.prototype.markDirty = function(e6) {
                e6 < this._start ? this._start = e6 : e6 > this._end && (this._end = e6);
              }, e5.prototype.markRangeDirty = function(e6, t5) {
                if (e6 > t5) {
                  var r4 = e6;
                  e6 = t5, t5 = r4;
                }
                e6 < this._start && (this._start = e6), t5 > this._end && (this._end = t5);
              }, e5.prototype.markAllDirty = function() {
                this.markRangeDirty(0, this._bufferService.rows - 1);
              }, i3([n3(0, o3.IBufferService)], e5);
            }();
            t4.DirtyRowService = s3;
          }, 4348: function(e4, t4, r3) {
            var i3 = this && this.__spreadArray || function(e5, t5, r4) {
              if (r4 || arguments.length === 2)
                for (var i4, n4 = 0, o4 = t5.length; n4 < o4; n4++)
                  !i4 && n4 in t5 || (i4 || (i4 = Array.prototype.slice.call(t5, 0, n4)), i4[n4] = t5[n4]);
              return e5.concat(i4 || Array.prototype.slice.call(t5));
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.InstantiationService = t4.ServiceCollection = void 0;
            var n3 = r3(2585), o3 = r3(8343), s3 = function() {
              function e5() {
                for (var e6 = [], t5 = 0; t5 < arguments.length; t5++)
                  e6[t5] = arguments[t5];
                this._entries = /* @__PURE__ */ new Map();
                for (var r4 = 0, i4 = e6; r4 < i4.length; r4++) {
                  var n4 = i4[r4], o4 = n4[0], s4 = n4[1];
                  this.set(o4, s4);
                }
              }
              return e5.prototype.set = function(e6, t5) {
                var r4 = this._entries.get(e6);
                return this._entries.set(e6, t5), r4;
              }, e5.prototype.forEach = function(e6) {
                this._entries.forEach(function(t5, r4) {
                  return e6(r4, t5);
                });
              }, e5.prototype.has = function(e6) {
                return this._entries.has(e6);
              }, e5.prototype.get = function(e6) {
                return this._entries.get(e6);
              }, e5;
            }();
            t4.ServiceCollection = s3;
            var a3 = function() {
              function e5() {
                this._services = new s3(), this._services.set(n3.IInstantiationService, this);
              }
              return e5.prototype.setService = function(e6, t5) {
                this._services.set(e6, t5);
              }, e5.prototype.getService = function(e6) {
                return this._services.get(e6);
              }, e5.prototype.createInstance = function(e6) {
                for (var t5 = [], r4 = 1; r4 < arguments.length; r4++)
                  t5[r4 - 1] = arguments[r4];
                for (var n4 = (0, o3.getServiceDependencies)(e6).sort(function(e7, t6) {
                  return e7.index - t6.index;
                }), s4 = [], a4 = 0, c3 = n4; a4 < c3.length; a4++) {
                  var l3 = c3[a4], h3 = this._services.get(l3.id);
                  if (!h3)
                    throw new Error("[createInstance] " + e6.name + " depends on UNKNOWN service " + l3.id + ".");
                  s4.push(h3);
                }
                var u3 = n4.length > 0 ? n4[0].index : t5.length;
                if (t5.length !== u3)
                  throw new Error("[createInstance] First service dependency of " + e6.name + " at position " + (u3 + 1) + " conflicts with " + t5.length + " static arguments");
                return new (e6.bind.apply(e6, i3([void 0], i3(i3([], t5, true), s4, true), false)))();
              }, e5;
            }();
            t4.InstantiationService = a3;
          }, 7866: function(e4, t4, r3) {
            var i3 = this && this.__decorate || function(e5, t5, r4, i4) {
              var n4, o4 = arguments.length, s4 = o4 < 3 ? t5 : i4 === null ? i4 = Object.getOwnPropertyDescriptor(t5, r4) : i4;
              if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
                s4 = Reflect.decorate(e5, t5, r4, i4);
              else
                for (var a4 = e5.length - 1; a4 >= 0; a4--)
                  (n4 = e5[a4]) && (s4 = (o4 < 3 ? n4(s4) : o4 > 3 ? n4(t5, r4, s4) : n4(t5, r4)) || s4);
              return o4 > 3 && s4 && Object.defineProperty(t5, r4, s4), s4;
            }, n3 = this && this.__param || function(e5, t5) {
              return function(r4, i4) {
                t5(r4, i4, e5);
              };
            }, o3 = this && this.__spreadArray || function(e5, t5, r4) {
              if (r4 || arguments.length === 2)
                for (var i4, n4 = 0, o4 = t5.length; n4 < o4; n4++)
                  !i4 && n4 in t5 || (i4 || (i4 = Array.prototype.slice.call(t5, 0, n4)), i4[n4] = t5[n4]);
              return e5.concat(i4 || Array.prototype.slice.call(t5));
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.LogService = void 0;
            var s3 = r3(2585), a3 = { debug: s3.LogLevelEnum.DEBUG, info: s3.LogLevelEnum.INFO, warn: s3.LogLevelEnum.WARN, error: s3.LogLevelEnum.ERROR, off: s3.LogLevelEnum.OFF }, c3 = function() {
              function e5(e6) {
                var t5 = this;
                this._optionsService = e6, this.logLevel = s3.LogLevelEnum.OFF, this._updateLogLevel(), this._optionsService.onOptionChange(function(e7) {
                  e7 === "logLevel" && t5._updateLogLevel();
                });
              }
              return e5.prototype._updateLogLevel = function() {
                this.logLevel = a3[this._optionsService.rawOptions.logLevel];
              }, e5.prototype._evalLazyOptionalParams = function(e6) {
                for (var t5 = 0; t5 < e6.length; t5++)
                  typeof e6[t5] == "function" && (e6[t5] = e6[t5]());
              }, e5.prototype._log = function(e6, t5, r4) {
                this._evalLazyOptionalParams(r4), e6.call.apply(e6, o3([console, "xterm.js: " + t5], r4, false));
              }, e5.prototype.debug = function(e6) {
                for (var t5 = [], r4 = 1; r4 < arguments.length; r4++)
                  t5[r4 - 1] = arguments[r4];
                this.logLevel <= s3.LogLevelEnum.DEBUG && this._log(console.log, e6, t5);
              }, e5.prototype.info = function(e6) {
                for (var t5 = [], r4 = 1; r4 < arguments.length; r4++)
                  t5[r4 - 1] = arguments[r4];
                this.logLevel <= s3.LogLevelEnum.INFO && this._log(console.info, e6, t5);
              }, e5.prototype.warn = function(e6) {
                for (var t5 = [], r4 = 1; r4 < arguments.length; r4++)
                  t5[r4 - 1] = arguments[r4];
                this.logLevel <= s3.LogLevelEnum.WARN && this._log(console.warn, e6, t5);
              }, e5.prototype.error = function(e6) {
                for (var t5 = [], r4 = 1; r4 < arguments.length; r4++)
                  t5[r4 - 1] = arguments[r4];
                this.logLevel <= s3.LogLevelEnum.ERROR && this._log(console.error, e6, t5);
              }, i3([n3(0, s3.IOptionsService)], e5);
            }();
            t4.LogService = c3;
          }, 7302: function(e4, t4, r3) {
            var i3 = this && this.__assign || function() {
              return i3 = Object.assign || function(e5) {
                for (var t5, r4 = 1, i4 = arguments.length; r4 < i4; r4++)
                  for (var n4 in t5 = arguments[r4])
                    Object.prototype.hasOwnProperty.call(t5, n4) && (e5[n4] = t5[n4]);
                return e5;
              }, i3.apply(this, arguments);
            };
            Object.defineProperty(t4, "__esModule", { value: true }), t4.OptionsService = t4.DEFAULT_OPTIONS = t4.DEFAULT_BELL_SOUND = void 0;
            var n3 = r3(8460), o3 = r3(6114);
            t4.DEFAULT_BELL_SOUND = "data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", t4.DEFAULT_OPTIONS = { cols: 80, rows: 24, cursorBlink: false, cursorStyle: "block", cursorWidth: 1, customGlyphs: true, bellSound: t4.DEFAULT_BELL_SOUND, bellStyle: "none", drawBoldTextInBrightColors: true, fastScrollModifier: "alt", fastScrollSensitivity: 5, fontFamily: "courier-new, courier, monospace", fontSize: 15, fontWeight: "normal", fontWeightBold: "bold", lineHeight: 1, linkTooltipHoverDuration: 500, letterSpacing: 0, logLevel: "info", scrollback: 1e3, scrollSensitivity: 1, screenReaderMode: false, macOptionIsMeta: false, macOptionClickForcesSelection: false, minimumContrastRatio: 1, disableStdin: false, allowProposedApi: true, allowTransparency: false, tabStopWidth: 8, theme: {}, rightClickSelectsWord: o3.isMac, rendererType: "canvas", windowOptions: {}, windowsMode: false, wordSeparator: " ()[]{}',\"`", altClickMovesCursor: true, convertEol: false, termName: "xterm", cancelEvents: false };
            var s3 = ["normal", "bold", "100", "200", "300", "400", "500", "600", "700", "800", "900"], a3 = function() {
              function e5(e6) {
                this._onOptionChange = new n3.EventEmitter();
                var r4 = i3({}, t4.DEFAULT_OPTIONS);
                for (var o4 in e6)
                  if (o4 in r4)
                    try {
                      var s4 = e6[o4];
                      r4[o4] = this._sanitizeAndValidateOption(o4, s4);
                    } catch (e7) {
                      console.error(e7);
                    }
                this.rawOptions = r4, this.options = i3({}, r4), this._setupOptions();
              }
              return Object.defineProperty(e5.prototype, "onOptionChange", { get: function() {
                return this._onOptionChange.event;
              }, enumerable: false, configurable: true }), e5.prototype._setupOptions = function() {
                var e6 = this, r4 = function(r5) {
                  if (!(r5 in t4.DEFAULT_OPTIONS))
                    throw new Error('No option with key "' + r5 + '"');
                  return e6.rawOptions[r5];
                }, i4 = function(r5, i5) {
                  if (!(r5 in t4.DEFAULT_OPTIONS))
                    throw new Error('No option with key "' + r5 + '"');
                  i5 = e6._sanitizeAndValidateOption(r5, i5), e6.rawOptions[r5] !== i5 && (e6.rawOptions[r5] = i5, e6._onOptionChange.fire(r5));
                };
                for (var n4 in this.rawOptions) {
                  var o4 = { get: r4.bind(this, n4), set: i4.bind(this, n4) };
                  Object.defineProperty(this.options, n4, o4);
                }
              }, e5.prototype.setOption = function(e6, t5) {
                this.options[e6] = t5;
              }, e5.prototype._sanitizeAndValidateOption = function(e6, r4) {
                switch (e6) {
                  case "bellStyle":
                  case "cursorStyle":
                  case "rendererType":
                  case "wordSeparator":
                    r4 || (r4 = t4.DEFAULT_OPTIONS[e6]);
                    break;
                  case "fontWeight":
                  case "fontWeightBold":
                    if (typeof r4 == "number" && 1 <= r4 && r4 <= 1e3)
                      break;
                    r4 = s3.includes(r4) ? r4 : t4.DEFAULT_OPTIONS[e6];
                    break;
                  case "cursorWidth":
                    r4 = Math.floor(r4);
                  case "lineHeight":
                  case "tabStopWidth":
                    if (r4 < 1)
                      throw new Error(e6 + " cannot be less than 1, value: " + r4);
                    break;
                  case "minimumContrastRatio":
                    r4 = Math.max(1, Math.min(21, Math.round(10 * r4) / 10));
                    break;
                  case "scrollback":
                    if ((r4 = Math.min(r4, 4294967295)) < 0)
                      throw new Error(e6 + " cannot be less than 0, value: " + r4);
                    break;
                  case "fastScrollSensitivity":
                  case "scrollSensitivity":
                    if (r4 <= 0)
                      throw new Error(e6 + " cannot be less than or equal to 0, value: " + r4);
                  case "rows":
                  case "cols":
                    if (!r4 && r4 !== 0)
                      throw new Error(e6 + " must be numeric, value: " + r4);
                }
                return r4;
              }, e5.prototype.getOption = function(e6) {
                return this.options[e6];
              }, e5;
            }();
            t4.OptionsService = a3;
          }, 8343: (e4, t4) => {
            function r3(e5, t5, r4) {
              t5.di$target === t5 ? t5.di$dependencies.push({ id: e5, index: r4 }) : (t5.di$dependencies = [{ id: e5, index: r4 }], t5.di$target = t5);
            }
            Object.defineProperty(t4, "__esModule", { value: true }), t4.createDecorator = t4.getServiceDependencies = t4.serviceRegistry = void 0, t4.serviceRegistry = /* @__PURE__ */ new Map(), t4.getServiceDependencies = function(e5) {
              return e5.di$dependencies || [];
            }, t4.createDecorator = function(e5) {
              if (t4.serviceRegistry.has(e5))
                return t4.serviceRegistry.get(e5);
              var i3 = function(e6, t5, n3) {
                if (arguments.length !== 3)
                  throw new Error("@IServiceName-decorator can only be used to decorate a parameter");
                r3(i3, e6, n3);
              };
              return i3.toString = function() {
                return e5;
              }, t4.serviceRegistry.set(e5, i3), i3;
            };
          }, 2585: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.IUnicodeService = t4.IOptionsService = t4.ILogService = t4.LogLevelEnum = t4.IInstantiationService = t4.IDirtyRowService = t4.ICharsetService = t4.ICoreService = t4.ICoreMouseService = t4.IBufferService = void 0;
            var i3, n3 = r3(8343);
            t4.IBufferService = (0, n3.createDecorator)("BufferService"), t4.ICoreMouseService = (0, n3.createDecorator)("CoreMouseService"), t4.ICoreService = (0, n3.createDecorator)("CoreService"), t4.ICharsetService = (0, n3.createDecorator)("CharsetService"), t4.IDirtyRowService = (0, n3.createDecorator)("DirtyRowService"), t4.IInstantiationService = (0, n3.createDecorator)("InstantiationService"), (i3 = t4.LogLevelEnum || (t4.LogLevelEnum = {}))[i3.DEBUG = 0] = "DEBUG", i3[i3.INFO = 1] = "INFO", i3[i3.WARN = 2] = "WARN", i3[i3.ERROR = 3] = "ERROR", i3[i3.OFF = 4] = "OFF", t4.ILogService = (0, n3.createDecorator)("LogService"), t4.IOptionsService = (0, n3.createDecorator)("OptionsService"), t4.IUnicodeService = (0, n3.createDecorator)("UnicodeService");
          }, 1480: (e4, t4, r3) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.UnicodeService = void 0;
            var i3 = r3(8460), n3 = r3(225), o3 = function() {
              function e5() {
                this._providers = /* @__PURE__ */ Object.create(null), this._active = "", this._onChange = new i3.EventEmitter();
                var e6 = new n3.UnicodeV6();
                this.register(e6), this._active = e6.version, this._activeProvider = e6;
              }
              return Object.defineProperty(e5.prototype, "onChange", { get: function() {
                return this._onChange.event;
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "versions", { get: function() {
                return Object.keys(this._providers);
              }, enumerable: false, configurable: true }), Object.defineProperty(e5.prototype, "activeVersion", { get: function() {
                return this._active;
              }, set: function(e6) {
                if (!this._providers[e6])
                  throw new Error('unknown Unicode version "' + e6 + '"');
                this._active = e6, this._activeProvider = this._providers[e6], this._onChange.fire(e6);
              }, enumerable: false, configurable: true }), e5.prototype.register = function(e6) {
                this._providers[e6.version] = e6;
              }, e5.prototype.wcwidth = function(e6) {
                return this._activeProvider.wcwidth(e6);
              }, e5.prototype.getStringCellWidth = function(e6) {
                for (var t5 = 0, r4 = e6.length, i4 = 0; i4 < r4; ++i4) {
                  var n4 = e6.charCodeAt(i4);
                  if (55296 <= n4 && n4 <= 56319) {
                    if (++i4 >= r4)
                      return t5 + this.wcwidth(n4);
                    var o4 = e6.charCodeAt(i4);
                    56320 <= o4 && o4 <= 57343 ? n4 = 1024 * (n4 - 55296) + o4 - 56320 + 65536 : t5 += this.wcwidth(o4);
                  }
                  t5 += this.wcwidth(n4);
                }
                return t5;
              }, e5;
            }();
            t4.UnicodeService = o3;
          } }, t3 = {};
          return function r3(i3) {
            var n3 = t3[i3];
            if (n3 !== void 0)
              return n3.exports;
            var o3 = t3[i3] = { exports: {} };
            return e3[i3].call(o3.exports, o3, o3.exports, r3), o3.exports;
          }(4389);
        })();
      });
    }
  });

  // node_modules/xterm-addon-fit/lib/xterm-addon-fit.js
  var require_xterm_addon_fit = __commonJS({
    "node_modules/xterm-addon-fit/lib/xterm-addon-fit.js"(exports, module) {
      !function(e3, t3) {
        typeof exports == "object" && typeof module == "object" ? module.exports = t3() : typeof define == "function" && define.amd ? define([], t3) : typeof exports == "object" ? exports.FitAddon = t3() : e3.FitAddon = t3();
      }(self, function() {
        return (() => {
          "use strict";
          var e3 = { 775: (e4, t4) => {
            Object.defineProperty(t4, "__esModule", { value: true }), t4.FitAddon = void 0;
            var r3 = function() {
              function e5() {
              }
              return e5.prototype.activate = function(e6) {
                this._terminal = e6;
              }, e5.prototype.dispose = function() {
              }, e5.prototype.fit = function() {
                var e6 = this.proposeDimensions();
                if (e6 && this._terminal) {
                  var t5 = this._terminal._core;
                  this._terminal.rows === e6.rows && this._terminal.cols === e6.cols || (t5._renderService.clear(), this._terminal.resize(e6.cols, e6.rows));
                }
              }, e5.prototype.proposeDimensions = function() {
                if (this._terminal && this._terminal.element && this._terminal.element.parentElement) {
                  var e6 = this._terminal._core;
                  if (e6._renderService.dimensions.actualCellWidth !== 0 && e6._renderService.dimensions.actualCellHeight !== 0) {
                    var t5 = window.getComputedStyle(this._terminal.element.parentElement), r4 = parseInt(t5.getPropertyValue("height")), i3 = Math.max(0, parseInt(t5.getPropertyValue("width"))), n3 = window.getComputedStyle(this._terminal.element), o3 = r4 - (parseInt(n3.getPropertyValue("padding-top")) + parseInt(n3.getPropertyValue("padding-bottom"))), a3 = i3 - (parseInt(n3.getPropertyValue("padding-right")) + parseInt(n3.getPropertyValue("padding-left"))) - e6.viewport.scrollBarWidth;
                    return { cols: Math.max(2, Math.floor(a3 / e6._renderService.dimensions.actualCellWidth)), rows: Math.max(1, Math.floor(o3 / e6._renderService.dimensions.actualCellHeight)) };
                  }
                }
              }, e5;
            }();
            t4.FitAddon = r3;
          } }, t3 = {};
          return function r3(i3) {
            if (t3[i3])
              return t3[i3].exports;
            var n3 = t3[i3] = { exports: {} };
            return e3[i3](n3, n3.exports, r3), n3.exports;
          }(775);
        })();
      });
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React16 = require_react();
          var _assign = require_object_assign();
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React16.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          function isValidElementType2(type3) {
            if (typeof type3 === "string" || typeof type3 === "function") {
              return true;
            }
            if (type3 === exports.Fragment || type3 === REACT_PROFILER_TYPE || type3 === REACT_DEBUG_TRACING_MODE_TYPE || type3 === REACT_STRICT_MODE_TYPE || type3 === REACT_SUSPENSE_TYPE || type3 === REACT_SUSPENSE_LIST_TYPE || type3 === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type3 === "object" && type3 !== null) {
              if (type3.$$typeof === REACT_LAZY_TYPE || type3.$$typeof === REACT_MEMO_TYPE || type3.$$typeof === REACT_PROVIDER_TYPE || type3.$$typeof === REACT_CONTEXT_TYPE || type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_FUNDAMENTAL_TYPE || type3.$$typeof === REACT_BLOCK_TYPE || type3[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type3) {
            return type3.displayName || "Context";
          }
          function getComponentName(type3) {
            if (type3 == null) {
              return null;
            }
            {
              if (typeof type3.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type3 === "function") {
              return type3.displayName || type3.name || null;
            }
            if (typeof type3 === "string") {
              return type3;
            }
            switch (type3) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type3 === "object") {
              switch (type3.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type3;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type3;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type3, type3.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type3.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type3._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type3;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match && match[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type3, source, ownerFn) {
            if (type3 == null) {
              return "";
            }
            if (typeof type3 === "function") {
              {
                return describeNativeComponentFrame(type3, shouldConstruct(type3));
              }
            }
            if (typeof type3 === "string") {
              return describeBuiltInComponentFrame(type3);
            }
            switch (type3) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type3 === "object") {
              switch (type3.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type3.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type3.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type3._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type3;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type3, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type: type3,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type3, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type3 && type3.defaultProps) {
                var defaultProps = type3.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type3 === "function" ? type3.displayName || type3.name || "Unknown" : type3;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type3, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentName(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            {
              if (typeof node !== "object") {
                return;
              }
              if (Array.isArray(node)) {
                for (var i3 = 0; i3 < node.length; i3++) {
                  var child = node[i3];
                  if (isValidElement(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement(node)) {
                if (node._store) {
                  node._store.validated = true;
                }
              } else if (node) {
                var iteratorFn = getIteratorFn(node);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type3 = element.type;
              if (type3 === null || type3 === void 0 || typeof type3 === "string") {
                return;
              }
              var propTypes;
              if (typeof type3 === "function") {
                propTypes = type3.propTypes;
              } else if (typeof type3 === "object" && (type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type3.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type3);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type3.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type3);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type3.getDefaultProps === "function" && !type3.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys4 = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys4.length; i3++) {
                var key = keys4[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type3, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType2(type3);
              if (!validType) {
                var info = "";
                if (type3 === void 0 || typeof type3 === "object" && type3 !== null && Object.keys(type3).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type3 === null) {
                  typeString = "null";
                } else if (Array.isArray(type3)) {
                  typeString = "array";
                } else if (type3 !== void 0 && type3.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type3.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type3;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type3, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (Array.isArray(children)) {
                      for (var i3 = 0; i3 < children.length; i3++) {
                        validateChildKeys(children[i3], type3);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type3);
                  }
                }
              }
              if (type3 === exports.Fragment) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type3, props, key) {
            {
              return jsxWithValidation(type3, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type3, props, key) {
            {
              return jsxWithValidation(type3, props, key, false);
            }
          }
          var jsx = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.jsx = jsx;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@devbookhq/splitter/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/@devbookhq/splitter/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType2(type3) {
            if (typeof type3 === "string" || typeof type3 === "function") {
              return true;
            }
            if (type3 === REACT_FRAGMENT_TYPE || type3 === REACT_PROFILER_TYPE || type3 === REACT_DEBUG_TRACING_MODE_TYPE || type3 === REACT_STRICT_MODE_TYPE || type3 === REACT_SUSPENSE_TYPE || type3 === REACT_SUSPENSE_LIST_TYPE || type3 === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type3 === "object" && type3 !== null) {
              if (type3.$$typeof === REACT_LAZY_TYPE || type3.$$typeof === REACT_MEMO_TYPE || type3.$$typeof === REACT_PROVIDER_TYPE || type3.$$typeof === REACT_CONTEXT_TYPE || type3.$$typeof === REACT_FORWARD_REF_TYPE || type3.$$typeof === REACT_FUNDAMENTAL_TYPE || type3.$$typeof === REACT_BLOCK_TYPE || type3[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type3 = object.type;
                  switch (type3) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type3;
                    default:
                      var $$typeofType = type3 && type3.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef7 = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer2(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef7;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer2;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/@devbookhq/splitter/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/@devbookhq/splitter/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/react-modal/lib/helpers/tabbable.js
  var require_tabbable = __commonJS({
    "node_modules/react-modal/lib/helpers/tabbable.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = findTabbableDescendants;
      var tabbableNode = /input|select|textarea|button|object|iframe/;
      function hidesContents(element) {
        var zeroSize = element.offsetWidth <= 0 && element.offsetHeight <= 0;
        if (zeroSize && !element.innerHTML)
          return true;
        try {
          var style = window.getComputedStyle(element);
          return zeroSize ? style.getPropertyValue("overflow") !== "visible" || element.scrollWidth <= 0 && element.scrollHeight <= 0 : style.getPropertyValue("display") == "none";
        } catch (exception) {
          console.warn("Failed to inspect element style");
          return false;
        }
      }
      function visible(element) {
        var parentElement = element;
        var rootNode = element.getRootNode && element.getRootNode();
        while (parentElement) {
          if (parentElement === document.body)
            break;
          if (rootNode && parentElement === rootNode)
            parentElement = rootNode.host.parentNode;
          if (hidesContents(parentElement))
            return false;
          parentElement = parentElement.parentNode;
        }
        return true;
      }
      function focusable(element, isTabIndexNotNaN) {
        var nodeName = element.nodeName.toLowerCase();
        var res = tabbableNode.test(nodeName) && !element.disabled || (nodeName === "a" ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);
        return res && visible(element);
      }
      function tabbable(element) {
        var tabIndex = element.getAttribute("tabindex");
        if (tabIndex === null)
          tabIndex = void 0;
        var isTabIndexNaN = isNaN(tabIndex);
        return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
      }
      function findTabbableDescendants(element) {
        var descendants = [].slice.call(element.querySelectorAll("*"), 0).reduce(function(finished, el) {
          return finished.concat(!el.shadowRoot ? [el] : findTabbableDescendants(el.shadowRoot));
        }, []);
        return descendants.filter(tabbable);
      }
      module.exports = exports["default"];
    }
  });

  // node_modules/react-modal/lib/helpers/focusManager.js
  var require_focusManager = __commonJS({
    "node_modules/react-modal/lib/helpers/focusManager.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.resetState = resetState;
      exports.log = log;
      exports.handleBlur = handleBlur;
      exports.handleFocus = handleFocus;
      exports.markForFocusLater = markForFocusLater;
      exports.returnFocus = returnFocus;
      exports.popWithoutFocus = popWithoutFocus;
      exports.setupScopedFocus = setupScopedFocus;
      exports.teardownScopedFocus = teardownScopedFocus;
      var _tabbable = require_tabbable();
      var _tabbable2 = _interopRequireDefault(_tabbable);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var focusLaterElements = [];
      var modalElement = null;
      var needToFocus = false;
      function resetState() {
        focusLaterElements = [];
      }
      function log() {
        if (true) {
          console.log("focusManager ----------");
          focusLaterElements.forEach(function(f3) {
            var check = f3 || {};
            console.log(check.nodeName, check.className, check.id);
          });
          console.log("end focusManager ----------");
        }
      }
      function handleBlur() {
        needToFocus = true;
      }
      function handleFocus() {
        if (needToFocus) {
          needToFocus = false;
          if (!modalElement) {
            return;
          }
          setTimeout(function() {
            if (modalElement.contains(document.activeElement)) {
              return;
            }
            var el = (0, _tabbable2.default)(modalElement)[0] || modalElement;
            el.focus();
          }, 0);
        }
      }
      function markForFocusLater() {
        focusLaterElements.push(document.activeElement);
      }
      function returnFocus() {
        var preventScroll = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
        var toFocus = null;
        try {
          if (focusLaterElements.length !== 0) {
            toFocus = focusLaterElements.pop();
            toFocus.focus({ preventScroll });
          }
          return;
        } catch (e3) {
          console.warn(["You tried to return focus to", toFocus, "but it is not in the DOM anymore"].join(" "));
        }
      }
      function popWithoutFocus() {
        focusLaterElements.length > 0 && focusLaterElements.pop();
      }
      function setupScopedFocus(element) {
        modalElement = element;
        if (window.addEventListener) {
          window.addEventListener("blur", handleBlur, false);
          document.addEventListener("focus", handleFocus, true);
        } else {
          window.attachEvent("onBlur", handleBlur);
          document.attachEvent("onFocus", handleFocus);
        }
      }
      function teardownScopedFocus() {
        modalElement = null;
        if (window.addEventListener) {
          window.removeEventListener("blur", handleBlur);
          document.removeEventListener("focus", handleFocus);
        } else {
          window.detachEvent("onBlur", handleBlur);
          document.detachEvent("onFocus", handleFocus);
        }
      }
    }
  });

  // node_modules/react-modal/lib/helpers/scopeTab.js
  var require_scopeTab = __commonJS({
    "node_modules/react-modal/lib/helpers/scopeTab.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = scopeTab;
      var _tabbable = require_tabbable();
      var _tabbable2 = _interopRequireDefault(_tabbable);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function getActiveElement() {
        var el = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
        return el.activeElement.shadowRoot ? getActiveElement(el.activeElement.shadowRoot) : el.activeElement;
      }
      function scopeTab(node, event) {
        var tabbable = (0, _tabbable2.default)(node);
        if (!tabbable.length) {
          event.preventDefault();
          return;
        }
        var target = void 0;
        var shiftKey = event.shiftKey;
        var head2 = tabbable[0];
        var tail2 = tabbable[tabbable.length - 1];
        var activeElement = getActiveElement();
        if (node === activeElement) {
          if (!shiftKey)
            return;
          target = tail2;
        }
        if (tail2 === activeElement && !shiftKey) {
          target = head2;
        }
        if (head2 === activeElement && shiftKey) {
          target = tail2;
        }
        if (target) {
          event.preventDefault();
          target.focus();
          return;
        }
        var checkSafari = /(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent);
        var isSafariDesktop = checkSafari != null && checkSafari[1] != "Chrome" && /\biPod\b|\biPad\b/g.exec(navigator.userAgent) == null;
        if (!isSafariDesktop)
          return;
        var x2 = tabbable.indexOf(activeElement);
        if (x2 > -1) {
          x2 += shiftKey ? -1 : 1;
        }
        target = tabbable[x2];
        if (typeof target === "undefined") {
          event.preventDefault();
          target = shiftKey ? tail2 : head2;
          target.focus();
          return;
        }
        event.preventDefault();
        target.focus();
      }
      module.exports = exports["default"];
    }
  });

  // node_modules/warning/warning.js
  var require_warning = __commonJS({
    "node_modules/warning/warning.js"(exports, module) {
      "use strict";
      var __DEV__ = true;
      var warning3 = function() {
      };
      if (__DEV__) {
        printWarning = function printWarning2(format, args) {
          var len = arguments.length;
          args = new Array(len > 1 ? len - 1 : 0);
          for (var key = 1; key < len; key++) {
            args[key - 1] = arguments[key];
          }
          var argIndex = 0;
          var message = "Warning: " + format.replace(/%s/g, function() {
            return args[argIndex++];
          });
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
        warning3 = function(condition, format, args) {
          var len = arguments.length;
          args = new Array(len > 2 ? len - 2 : 0);
          for (var key = 2; key < len; key++) {
            args[key - 2] = arguments[key];
          }
          if (format === void 0) {
            throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
          }
          if (!condition) {
            printWarning.apply(null, [format].concat(args));
          }
        };
      }
      var printWarning;
      module.exports = warning3;
    }
  });

  // node_modules/exenv/index.js
  var require_exenv = __commonJS({
    "node_modules/exenv/index.js"(exports, module) {
      (function() {
        "use strict";
        var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
        var ExecutionEnvironment = {
          canUseDOM,
          canUseWorkers: typeof Worker !== "undefined",
          canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
          canUseViewport: canUseDOM && !!window.screen
        };
        if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define(function() {
            return ExecutionEnvironment;
          });
        } else if (typeof module !== "undefined" && module.exports) {
          module.exports = ExecutionEnvironment;
        } else {
          window.ExecutionEnvironment = ExecutionEnvironment;
        }
      })();
    }
  });

  // node_modules/react-modal/lib/helpers/safeHTMLElement.js
  var require_safeHTMLElement = __commonJS({
    "node_modules/react-modal/lib/helpers/safeHTMLElement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.canUseDOM = exports.SafeNodeList = exports.SafeHTMLCollection = void 0;
      var _exenv = require_exenv();
      var _exenv2 = _interopRequireDefault(_exenv);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var EE = _exenv2.default;
      var SafeHTMLElement = EE.canUseDOM ? window.HTMLElement : {};
      var SafeHTMLCollection = exports.SafeHTMLCollection = EE.canUseDOM ? window.HTMLCollection : {};
      var SafeNodeList = exports.SafeNodeList = EE.canUseDOM ? window.NodeList : {};
      var canUseDOM = exports.canUseDOM = EE.canUseDOM;
      exports.default = SafeHTMLElement;
    }
  });

  // node_modules/react-modal/lib/helpers/ariaAppHider.js
  var require_ariaAppHider = __commonJS({
    "node_modules/react-modal/lib/helpers/ariaAppHider.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.resetState = resetState;
      exports.log = log;
      exports.assertNodeList = assertNodeList;
      exports.setElement = setElement;
      exports.validateElement = validateElement;
      exports.hide = hide;
      exports.show = show;
      exports.documentNotReadyOrSSRTesting = documentNotReadyOrSSRTesting;
      var _warning = require_warning();
      var _warning2 = _interopRequireDefault(_warning);
      var _safeHTMLElement = require_safeHTMLElement();
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var globalElement = null;
      function resetState() {
        if (globalElement) {
          if (globalElement.removeAttribute) {
            globalElement.removeAttribute("aria-hidden");
          } else if (globalElement.length != null) {
            globalElement.forEach(function(element) {
              return element.removeAttribute("aria-hidden");
            });
          } else {
            document.querySelectorAll(globalElement).forEach(function(element) {
              return element.removeAttribute("aria-hidden");
            });
          }
        }
        globalElement = null;
      }
      function log() {
        if (true) {
          var check = globalElement || {};
          console.log("ariaAppHider ----------");
          console.log(check.nodeName, check.className, check.id);
          console.log("end ariaAppHider ----------");
        }
      }
      function assertNodeList(nodeList, selector) {
        if (!nodeList || !nodeList.length) {
          throw new Error("react-modal: No elements were found for selector " + selector + ".");
        }
      }
      function setElement(element) {
        var useElement = element;
        if (typeof useElement === "string" && _safeHTMLElement.canUseDOM) {
          var el = document.querySelectorAll(useElement);
          assertNodeList(el, useElement);
          useElement = el;
        }
        globalElement = useElement || globalElement;
        return globalElement;
      }
      function validateElement(appElement) {
        var el = appElement || globalElement;
        if (el) {
          return Array.isArray(el) || el instanceof HTMLCollection || el instanceof NodeList ? el : [el];
        } else {
          (0, _warning2.default)(false, ["react-modal: App element is not defined.", "Please use `Modal.setAppElement(el)` or set `appElement={el}`.", "This is needed so screen readers don't see main content", "when modal is opened. It is not recommended, but you can opt-out", "by setting `ariaHideApp={false}`."].join(" "));
          return [];
        }
      }
      function hide(appElement) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = validateElement(appElement)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var el = _step.value;
            el.setAttribute("aria-hidden", "true");
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
      function show(appElement) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = void 0;
        try {
          for (var _iterator2 = validateElement(appElement)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var el = _step2.value;
            el.removeAttribute("aria-hidden");
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
      function documentNotReadyOrSSRTesting() {
        globalElement = null;
      }
    }
  });

  // node_modules/react-modal/lib/helpers/classList.js
  var require_classList = __commonJS({
    "node_modules/react-modal/lib/helpers/classList.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.resetState = resetState;
      exports.log = log;
      var htmlClassList = {};
      var docBodyClassList = {};
      function removeClass(at, cls) {
        at.classList.remove(cls);
      }
      function resetState() {
        var htmlElement = document.getElementsByTagName("html")[0];
        for (var cls in htmlClassList) {
          removeClass(htmlElement, htmlClassList[cls]);
        }
        var body = document.body;
        for (var _cls in docBodyClassList) {
          removeClass(body, docBodyClassList[_cls]);
        }
        htmlClassList = {};
        docBodyClassList = {};
      }
      function log() {
        if (true) {
          var classes = document.getElementsByTagName("html")[0].className;
          var buffer = "Show tracked classes:\n\n";
          buffer += "<html /> (" + classes + "):\n  ";
          for (var x2 in htmlClassList) {
            buffer += "  " + x2 + " " + htmlClassList[x2] + "\n  ";
          }
          classes = document.body.className;
          buffer += "\n\ndoc.body (" + classes + "):\n  ";
          for (var _x in docBodyClassList) {
            buffer += "  " + _x + " " + docBodyClassList[_x] + "\n  ";
          }
          buffer += "\n";
          console.log(buffer);
        }
      }
      var incrementReference = function incrementReference2(poll, className) {
        if (!poll[className]) {
          poll[className] = 0;
        }
        poll[className] += 1;
        return className;
      };
      var decrementReference = function decrementReference2(poll, className) {
        if (poll[className]) {
          poll[className] -= 1;
        }
        return className;
      };
      var trackClass = function trackClass2(classListRef, poll, classes) {
        classes.forEach(function(className) {
          incrementReference(poll, className);
          classListRef.add(className);
        });
      };
      var untrackClass = function untrackClass2(classListRef, poll, classes) {
        classes.forEach(function(className) {
          decrementReference(poll, className);
          poll[className] === 0 && classListRef.remove(className);
        });
      };
      var add = exports.add = function add2(element, classString) {
        return trackClass(element.classList, element.nodeName.toLowerCase() == "html" ? htmlClassList : docBodyClassList, classString.split(" "));
      };
      var remove = exports.remove = function remove2(element, classString) {
        return untrackClass(element.classList, element.nodeName.toLowerCase() == "html" ? htmlClassList : docBodyClassList, classString.split(" "));
      };
    }
  });

  // node_modules/react-modal/lib/helpers/portalOpenInstances.js
  var require_portalOpenInstances = __commonJS({
    "node_modules/react-modal/lib/helpers/portalOpenInstances.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.log = log;
      exports.resetState = resetState;
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var PortalOpenInstances = function PortalOpenInstances2() {
        var _this = this;
        _classCallCheck(this, PortalOpenInstances2);
        this.register = function(openInstance) {
          if (_this.openInstances.indexOf(openInstance) !== -1) {
            if (true) {
              console.warn("React-Modal: Cannot register modal instance that's already open");
            }
            return;
          }
          _this.openInstances.push(openInstance);
          _this.emit("register");
        };
        this.deregister = function(openInstance) {
          var index2 = _this.openInstances.indexOf(openInstance);
          if (index2 === -1) {
            if (true) {
              console.warn("React-Modal: Unable to deregister " + openInstance + " as it was never registered");
            }
            return;
          }
          _this.openInstances.splice(index2, 1);
          _this.emit("deregister");
        };
        this.subscribe = function(callback) {
          _this.subscribers.push(callback);
        };
        this.emit = function(eventType) {
          _this.subscribers.forEach(function(subscriber) {
            return subscriber(eventType, _this.openInstances.slice());
          });
        };
        this.openInstances = [];
        this.subscribers = [];
      };
      var portalOpenInstances = new PortalOpenInstances();
      function log() {
        console.log("portalOpenInstances ----------");
        console.log(portalOpenInstances.openInstances.length);
        portalOpenInstances.openInstances.forEach(function(p3) {
          return console.log(p3);
        });
        console.log("end portalOpenInstances ----------");
      }
      function resetState() {
        portalOpenInstances = new PortalOpenInstances();
      }
      exports.default = portalOpenInstances;
    }
  });

  // node_modules/react-modal/lib/helpers/bodyTrap.js
  var require_bodyTrap = __commonJS({
    "node_modules/react-modal/lib/helpers/bodyTrap.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.resetState = resetState;
      exports.log = log;
      var _portalOpenInstances = require_portalOpenInstances();
      var _portalOpenInstances2 = _interopRequireDefault(_portalOpenInstances);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var before = void 0;
      var after = void 0;
      var instances = [];
      function resetState() {
        var _arr = [before, after];
        for (var _i = 0; _i < _arr.length; _i++) {
          var item = _arr[_i];
          if (!item)
            continue;
          item.parentNode && item.parentNode.removeChild(item);
        }
        before = after = null;
        instances = [];
      }
      function log() {
        console.log("bodyTrap ----------");
        console.log(instances.length);
        var _arr2 = [before, after];
        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
          var item = _arr2[_i2];
          var check = item || {};
          console.log(check.nodeName, check.className, check.id);
        }
        console.log("edn bodyTrap ----------");
      }
      function focusContent() {
        if (instances.length === 0) {
          if (true) {
            console.warn("React-Modal: Open instances > 0 expected");
          }
          return;
        }
        instances[instances.length - 1].focusContent();
      }
      function bodyTrap(eventType, openInstances) {
        if (!before && !after) {
          before = document.createElement("div");
          before.setAttribute("data-react-modal-body-trap", "");
          before.style.position = "absolute";
          before.style.opacity = "0";
          before.setAttribute("tabindex", "0");
          before.addEventListener("focus", focusContent);
          after = before.cloneNode();
          after.addEventListener("focus", focusContent);
        }
        instances = openInstances;
        if (instances.length > 0) {
          if (document.body.firstChild !== before) {
            document.body.insertBefore(before, document.body.firstChild);
          }
          if (document.body.lastChild !== after) {
            document.body.appendChild(after);
          }
        } else {
          if (before.parentElement) {
            before.parentElement.removeChild(before);
          }
          if (after.parentElement) {
            after.parentElement.removeChild(after);
          }
        }
      }
      _portalOpenInstances2.default.subscribe(bodyTrap);
    }
  });

  // node_modules/react-modal/lib/components/ModalPortal.js
  var require_ModalPortal = __commonJS({
    "node_modules/react-modal/lib/components/ModalPortal.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _extends2 = Object.assign || function(target) {
        for (var i3 = 1; i3 < arguments.length; i3++) {
          var source = arguments[i3];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i3 = 0; i3 < props.length; i3++) {
            var descriptor = props[i3];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      var _react = require_react();
      var _propTypes = require_prop_types();
      var _propTypes2 = _interopRequireDefault(_propTypes);
      var _focusManager = require_focusManager();
      var focusManager = _interopRequireWildcard(_focusManager);
      var _scopeTab = require_scopeTab();
      var _scopeTab2 = _interopRequireDefault(_scopeTab);
      var _ariaAppHider = require_ariaAppHider();
      var ariaAppHider = _interopRequireWildcard(_ariaAppHider);
      var _classList = require_classList();
      var classList = _interopRequireWildcard(_classList);
      var _safeHTMLElement = require_safeHTMLElement();
      var _safeHTMLElement2 = _interopRequireDefault(_safeHTMLElement);
      var _portalOpenInstances = require_portalOpenInstances();
      var _portalOpenInstances2 = _interopRequireDefault(_portalOpenInstances);
      require_bodyTrap();
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var CLASS_NAMES = {
        overlay: "ReactModal__Overlay",
        content: "ReactModal__Content"
      };
      var TAB_KEY = 9;
      var ESC_KEY = 27;
      var ariaHiddenInstances = 0;
      var ModalPortal = function(_Component) {
        _inherits(ModalPortal2, _Component);
        function ModalPortal2(props) {
          _classCallCheck(this, ModalPortal2);
          var _this = _possibleConstructorReturn(this, (ModalPortal2.__proto__ || Object.getPrototypeOf(ModalPortal2)).call(this, props));
          _this.setOverlayRef = function(overlay) {
            _this.overlay = overlay;
            _this.props.overlayRef && _this.props.overlayRef(overlay);
          };
          _this.setContentRef = function(content) {
            _this.content = content;
            _this.props.contentRef && _this.props.contentRef(content);
          };
          _this.afterClose = function() {
            var _this$props = _this.props, appElement = _this$props.appElement, ariaHideApp = _this$props.ariaHideApp, htmlOpenClassName = _this$props.htmlOpenClassName, bodyOpenClassName = _this$props.bodyOpenClassName;
            bodyOpenClassName && classList.remove(document.body, bodyOpenClassName);
            htmlOpenClassName && classList.remove(document.getElementsByTagName("html")[0], htmlOpenClassName);
            if (ariaHideApp && ariaHiddenInstances > 0) {
              ariaHiddenInstances -= 1;
              if (ariaHiddenInstances === 0) {
                ariaAppHider.show(appElement);
              }
            }
            if (_this.props.shouldFocusAfterRender) {
              if (_this.props.shouldReturnFocusAfterClose) {
                focusManager.returnFocus(_this.props.preventScroll);
                focusManager.teardownScopedFocus();
              } else {
                focusManager.popWithoutFocus();
              }
            }
            if (_this.props.onAfterClose) {
              _this.props.onAfterClose();
            }
            _portalOpenInstances2.default.deregister(_this);
          };
          _this.open = function() {
            _this.beforeOpen();
            if (_this.state.afterOpen && _this.state.beforeClose) {
              clearTimeout(_this.closeTimer);
              _this.setState({ beforeClose: false });
            } else {
              if (_this.props.shouldFocusAfterRender) {
                focusManager.setupScopedFocus(_this.node);
                focusManager.markForFocusLater();
              }
              _this.setState({ isOpen: true }, function() {
                _this.openAnimationFrame = requestAnimationFrame(function() {
                  _this.setState({ afterOpen: true });
                  if (_this.props.isOpen && _this.props.onAfterOpen) {
                    _this.props.onAfterOpen({
                      overlayEl: _this.overlay,
                      contentEl: _this.content
                    });
                  }
                });
              });
            }
          };
          _this.close = function() {
            if (_this.props.closeTimeoutMS > 0) {
              _this.closeWithTimeout();
            } else {
              _this.closeWithoutTimeout();
            }
          };
          _this.focusContent = function() {
            return _this.content && !_this.contentHasFocus() && _this.content.focus({ preventScroll: true });
          };
          _this.closeWithTimeout = function() {
            var closesAt = Date.now() + _this.props.closeTimeoutMS;
            _this.setState({ beforeClose: true, closesAt }, function() {
              _this.closeTimer = setTimeout(_this.closeWithoutTimeout, _this.state.closesAt - Date.now());
            });
          };
          _this.closeWithoutTimeout = function() {
            _this.setState({
              beforeClose: false,
              isOpen: false,
              afterOpen: false,
              closesAt: null
            }, _this.afterClose);
          };
          _this.handleKeyDown = function(event) {
            if (event.keyCode === TAB_KEY) {
              (0, _scopeTab2.default)(_this.content, event);
            }
            if (_this.props.shouldCloseOnEsc && event.keyCode === ESC_KEY) {
              event.stopPropagation();
              _this.requestClose(event);
            }
          };
          _this.handleOverlayOnClick = function(event) {
            if (_this.shouldClose === null) {
              _this.shouldClose = true;
            }
            if (_this.shouldClose && _this.props.shouldCloseOnOverlayClick) {
              if (_this.ownerHandlesClose()) {
                _this.requestClose(event);
              } else {
                _this.focusContent();
              }
            }
            _this.shouldClose = null;
          };
          _this.handleContentOnMouseUp = function() {
            _this.shouldClose = false;
          };
          _this.handleOverlayOnMouseDown = function(event) {
            if (!_this.props.shouldCloseOnOverlayClick && event.target == _this.overlay) {
              event.preventDefault();
            }
          };
          _this.handleContentOnClick = function() {
            _this.shouldClose = false;
          };
          _this.handleContentOnMouseDown = function() {
            _this.shouldClose = false;
          };
          _this.requestClose = function(event) {
            return _this.ownerHandlesClose() && _this.props.onRequestClose(event);
          };
          _this.ownerHandlesClose = function() {
            return _this.props.onRequestClose;
          };
          _this.shouldBeClosed = function() {
            return !_this.state.isOpen && !_this.state.beforeClose;
          };
          _this.contentHasFocus = function() {
            return document.activeElement === _this.content || _this.content.contains(document.activeElement);
          };
          _this.buildClassName = function(which, additional) {
            var classNames = (typeof additional === "undefined" ? "undefined" : _typeof(additional)) === "object" ? additional : {
              base: CLASS_NAMES[which],
              afterOpen: CLASS_NAMES[which] + "--after-open",
              beforeClose: CLASS_NAMES[which] + "--before-close"
            };
            var className = classNames.base;
            if (_this.state.afterOpen) {
              className = className + " " + classNames.afterOpen;
            }
            if (_this.state.beforeClose) {
              className = className + " " + classNames.beforeClose;
            }
            return typeof additional === "string" && additional ? className + " " + additional : className;
          };
          _this.attributesFromObject = function(prefix2, items) {
            return Object.keys(items).reduce(function(acc, name) {
              acc[prefix2 + "-" + name] = items[name];
              return acc;
            }, {});
          };
          _this.state = {
            afterOpen: false,
            beforeClose: false
          };
          _this.shouldClose = null;
          _this.moveFromContentToOverlay = null;
          return _this;
        }
        _createClass(ModalPortal2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            if (this.props.isOpen) {
              this.open();
            }
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, prevState) {
            if (true) {
              if (prevProps.bodyOpenClassName !== this.props.bodyOpenClassName) {
                console.warn('React-Modal: "bodyOpenClassName" prop has been modified. This may cause unexpected behavior when multiple modals are open.');
              }
              if (prevProps.htmlOpenClassName !== this.props.htmlOpenClassName) {
                console.warn('React-Modal: "htmlOpenClassName" prop has been modified. This may cause unexpected behavior when multiple modals are open.');
              }
            }
            if (this.props.isOpen && !prevProps.isOpen) {
              this.open();
            } else if (!this.props.isOpen && prevProps.isOpen) {
              this.close();
            }
            if (this.props.shouldFocusAfterRender && this.state.isOpen && !prevState.isOpen) {
              this.focusContent();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this.state.isOpen) {
              this.afterClose();
            }
            clearTimeout(this.closeTimer);
            cancelAnimationFrame(this.openAnimationFrame);
          }
        }, {
          key: "beforeOpen",
          value: function beforeOpen() {
            var _props = this.props, appElement = _props.appElement, ariaHideApp = _props.ariaHideApp, htmlOpenClassName = _props.htmlOpenClassName, bodyOpenClassName = _props.bodyOpenClassName;
            bodyOpenClassName && classList.add(document.body, bodyOpenClassName);
            htmlOpenClassName && classList.add(document.getElementsByTagName("html")[0], htmlOpenClassName);
            if (ariaHideApp) {
              ariaHiddenInstances += 1;
              ariaAppHider.hide(appElement);
            }
            _portalOpenInstances2.default.register(this);
          }
        }, {
          key: "render",
          value: function render() {
            var _props2 = this.props, id = _props2.id, className = _props2.className, overlayClassName = _props2.overlayClassName, defaultStyles = _props2.defaultStyles, children = _props2.children;
            var contentStyles = className ? {} : defaultStyles.content;
            var overlayStyles = overlayClassName ? {} : defaultStyles.overlay;
            if (this.shouldBeClosed()) {
              return null;
            }
            var overlayProps = {
              ref: this.setOverlayRef,
              className: this.buildClassName("overlay", overlayClassName),
              style: _extends2({}, overlayStyles, this.props.style.overlay),
              onClick: this.handleOverlayOnClick,
              onMouseDown: this.handleOverlayOnMouseDown
            };
            var contentProps = _extends2({
              id,
              ref: this.setContentRef,
              style: _extends2({}, contentStyles, this.props.style.content),
              className: this.buildClassName("content", className),
              tabIndex: "-1",
              onKeyDown: this.handleKeyDown,
              onMouseDown: this.handleContentOnMouseDown,
              onMouseUp: this.handleContentOnMouseUp,
              onClick: this.handleContentOnClick,
              role: this.props.role,
              "aria-label": this.props.contentLabel
            }, this.attributesFromObject("aria", _extends2({ modal: true }, this.props.aria)), this.attributesFromObject("data", this.props.data || {}), {
              "data-testid": this.props.testId
            });
            var contentElement = this.props.contentElement(contentProps, children);
            return this.props.overlayElement(overlayProps, contentElement);
          }
        }]);
        return ModalPortal2;
      }(_react.Component);
      ModalPortal.defaultProps = {
        style: {
          overlay: {},
          content: {}
        },
        defaultStyles: {}
      };
      ModalPortal.propTypes = {
        isOpen: _propTypes2.default.bool.isRequired,
        defaultStyles: _propTypes2.default.shape({
          content: _propTypes2.default.object,
          overlay: _propTypes2.default.object
        }),
        style: _propTypes2.default.shape({
          content: _propTypes2.default.object,
          overlay: _propTypes2.default.object
        }),
        className: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
        overlayClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
        bodyOpenClassName: _propTypes2.default.string,
        htmlOpenClassName: _propTypes2.default.string,
        ariaHideApp: _propTypes2.default.bool,
        appElement: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(_safeHTMLElement2.default), _propTypes2.default.instanceOf(_safeHTMLElement.SafeHTMLCollection), _propTypes2.default.instanceOf(_safeHTMLElement.SafeNodeList), _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(_safeHTMLElement2.default))]),
        onAfterOpen: _propTypes2.default.func,
        onAfterClose: _propTypes2.default.func,
        onRequestClose: _propTypes2.default.func,
        closeTimeoutMS: _propTypes2.default.number,
        shouldFocusAfterRender: _propTypes2.default.bool,
        shouldCloseOnOverlayClick: _propTypes2.default.bool,
        shouldReturnFocusAfterClose: _propTypes2.default.bool,
        preventScroll: _propTypes2.default.bool,
        role: _propTypes2.default.string,
        contentLabel: _propTypes2.default.string,
        aria: _propTypes2.default.object,
        data: _propTypes2.default.object,
        children: _propTypes2.default.node,
        shouldCloseOnEsc: _propTypes2.default.bool,
        overlayRef: _propTypes2.default.func,
        contentRef: _propTypes2.default.func,
        id: _propTypes2.default.string,
        overlayElement: _propTypes2.default.func,
        contentElement: _propTypes2.default.func,
        testId: _propTypes2.default.string
      };
      exports.default = ModalPortal;
      module.exports = exports["default"];
    }
  });

  // node_modules/react-lifecycles-compat/react-lifecycles-compat.cjs.js
  var require_react_lifecycles_compat_cjs = __commonJS({
    "node_modules/react-lifecycles-compat/react-lifecycles-compat.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function componentWillMount() {
        var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
        if (state !== null && state !== void 0) {
          this.setState(state);
        }
      }
      function componentWillReceiveProps(nextProps) {
        function updater(prevState) {
          var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
          return state !== null && state !== void 0 ? state : null;
        }
        this.setState(updater.bind(this));
      }
      function componentWillUpdate(nextProps, nextState) {
        try {
          var prevProps = this.props;
          var prevState = this.state;
          this.props = nextProps;
          this.state = nextState;
          this.__reactInternalSnapshotFlag = true;
          this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
        } finally {
          this.props = prevProps;
          this.state = prevState;
        }
      }
      componentWillMount.__suppressDeprecationWarning = true;
      componentWillReceiveProps.__suppressDeprecationWarning = true;
      componentWillUpdate.__suppressDeprecationWarning = true;
      function polyfill(Component) {
        var prototype = Component.prototype;
        if (!prototype || !prototype.isReactComponent) {
          throw new Error("Can only polyfill class components");
        }
        if (typeof Component.getDerivedStateFromProps !== "function" && typeof prototype.getSnapshotBeforeUpdate !== "function") {
          return Component;
        }
        var foundWillMountName = null;
        var foundWillReceivePropsName = null;
        var foundWillUpdateName = null;
        if (typeof prototype.componentWillMount === "function") {
          foundWillMountName = "componentWillMount";
        } else if (typeof prototype.UNSAFE_componentWillMount === "function") {
          foundWillMountName = "UNSAFE_componentWillMount";
        }
        if (typeof prototype.componentWillReceiveProps === "function") {
          foundWillReceivePropsName = "componentWillReceiveProps";
        } else if (typeof prototype.UNSAFE_componentWillReceiveProps === "function") {
          foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
        }
        if (typeof prototype.componentWillUpdate === "function") {
          foundWillUpdateName = "componentWillUpdate";
        } else if (typeof prototype.UNSAFE_componentWillUpdate === "function") {
          foundWillUpdateName = "UNSAFE_componentWillUpdate";
        }
        if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
          var componentName = Component.displayName || Component.name;
          var newApiName = typeof Component.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
          throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + componentName + " uses " + newApiName + " but also contains the following legacy lifecycles:" + (foundWillMountName !== null ? "\n  " + foundWillMountName : "") + (foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "") + (foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks");
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
          prototype.componentWillMount = componentWillMount;
          prototype.componentWillReceiveProps = componentWillReceiveProps;
        }
        if (typeof prototype.getSnapshotBeforeUpdate === "function") {
          if (typeof prototype.componentDidUpdate !== "function") {
            throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");
          }
          prototype.componentWillUpdate = componentWillUpdate;
          var componentDidUpdate = prototype.componentDidUpdate;
          prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
            var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
            componentDidUpdate.call(this, prevProps, prevState, snapshot);
          };
        }
        return Component;
      }
      exports.polyfill = polyfill;
    }
  });

  // node_modules/react-modal/lib/components/Modal.js
  var require_Modal = __commonJS({
    "node_modules/react-modal/lib/components/Modal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.bodyOpenClassName = exports.portalClassName = void 0;
      var _extends2 = Object.assign || function(target) {
        for (var i3 = 1; i3 < arguments.length; i3++) {
          var source = arguments[i3];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i3 = 0; i3 < props.length; i3++) {
            var descriptor = props[i3];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      var _reactDom = require_react_dom();
      var _reactDom2 = _interopRequireDefault(_reactDom);
      var _propTypes = require_prop_types();
      var _propTypes2 = _interopRequireDefault(_propTypes);
      var _ModalPortal = require_ModalPortal();
      var _ModalPortal2 = _interopRequireDefault(_ModalPortal);
      var _ariaAppHider = require_ariaAppHider();
      var ariaAppHider = _interopRequireWildcard(_ariaAppHider);
      var _safeHTMLElement = require_safeHTMLElement();
      var _safeHTMLElement2 = _interopRequireDefault(_safeHTMLElement);
      var _reactLifecyclesCompat = require_react_lifecycles_compat_cjs();
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var portalClassName = exports.portalClassName = "ReactModalPortal";
      var bodyOpenClassName = exports.bodyOpenClassName = "ReactModal__Body--open";
      var isReact16 = _safeHTMLElement.canUseDOM && _reactDom2.default.createPortal !== void 0;
      var createHTMLElement = function createHTMLElement2(name) {
        return document.createElement(name);
      };
      var getCreatePortal = function getCreatePortal2() {
        return isReact16 ? _reactDom2.default.createPortal : _reactDom2.default.unstable_renderSubtreeIntoContainer;
      };
      function getParentElement(parentSelector) {
        return parentSelector();
      }
      var Modal2 = function(_Component) {
        _inherits(Modal3, _Component);
        function Modal3() {
          var _ref;
          var _temp, _this, _ret;
          _classCallCheck(this, Modal3);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Modal3.__proto__ || Object.getPrototypeOf(Modal3)).call.apply(_ref, [this].concat(args))), _this), _this.removePortal = function() {
            !isReact16 && _reactDom2.default.unmountComponentAtNode(_this.node);
            var parent = getParentElement(_this.props.parentSelector);
            if (parent && parent.contains(_this.node)) {
              parent.removeChild(_this.node);
            } else {
              console.warn('React-Modal: "parentSelector" prop did not returned any DOM element. Make sure that the parent element is unmounted to avoid any memory leaks.');
            }
          }, _this.portalRef = function(ref) {
            _this.portal = ref;
          }, _this.renderPortal = function(props) {
            var createPortal = getCreatePortal();
            var portal = createPortal(_this, _react2.default.createElement(_ModalPortal2.default, _extends2({ defaultStyles: Modal3.defaultStyles }, props)), _this.node);
            _this.portalRef(portal);
          }, _temp), _possibleConstructorReturn(_this, _ret);
        }
        _createClass(Modal3, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            if (!_safeHTMLElement.canUseDOM)
              return;
            if (!isReact16) {
              this.node = createHTMLElement("div");
            }
            this.node.className = this.props.portalClassName;
            var parent = getParentElement(this.props.parentSelector);
            parent.appendChild(this.node);
            !isReact16 && this.renderPortal(this.props);
          }
        }, {
          key: "getSnapshotBeforeUpdate",
          value: function getSnapshotBeforeUpdate(prevProps) {
            var prevParent = getParentElement(prevProps.parentSelector);
            var nextParent = getParentElement(this.props.parentSelector);
            return { prevParent, nextParent };
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, _3, snapshot) {
            if (!_safeHTMLElement.canUseDOM)
              return;
            var _props = this.props, isOpen = _props.isOpen, portalClassName2 = _props.portalClassName;
            if (prevProps.portalClassName !== portalClassName2) {
              this.node.className = portalClassName2;
            }
            var prevParent = snapshot.prevParent, nextParent = snapshot.nextParent;
            if (nextParent !== prevParent) {
              prevParent.removeChild(this.node);
              nextParent.appendChild(this.node);
            }
            if (!prevProps.isOpen && !isOpen)
              return;
            !isReact16 && this.renderPortal(this.props);
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (!_safeHTMLElement.canUseDOM || !this.node || !this.portal)
              return;
            var state = this.portal.state;
            var now = Date.now();
            var closesAt = state.isOpen && this.props.closeTimeoutMS && (state.closesAt || now + this.props.closeTimeoutMS);
            if (closesAt) {
              if (!state.beforeClose) {
                this.portal.closeWithTimeout();
              }
              setTimeout(this.removePortal, closesAt - now);
            } else {
              this.removePortal();
            }
          }
        }, {
          key: "render",
          value: function render() {
            if (!_safeHTMLElement.canUseDOM || !isReact16) {
              return null;
            }
            if (!this.node && isReact16) {
              this.node = createHTMLElement("div");
            }
            var createPortal = getCreatePortal();
            return createPortal(_react2.default.createElement(_ModalPortal2.default, _extends2({
              ref: this.portalRef,
              defaultStyles: Modal3.defaultStyles
            }, this.props)), this.node);
          }
        }], [{
          key: "setAppElement",
          value: function setAppElement(element) {
            ariaAppHider.setElement(element);
          }
        }]);
        return Modal3;
      }(_react.Component);
      Modal2.propTypes = {
        isOpen: _propTypes2.default.bool.isRequired,
        style: _propTypes2.default.shape({
          content: _propTypes2.default.object,
          overlay: _propTypes2.default.object
        }),
        portalClassName: _propTypes2.default.string,
        bodyOpenClassName: _propTypes2.default.string,
        htmlOpenClassName: _propTypes2.default.string,
        className: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
          base: _propTypes2.default.string.isRequired,
          afterOpen: _propTypes2.default.string.isRequired,
          beforeClose: _propTypes2.default.string.isRequired
        })]),
        overlayClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
          base: _propTypes2.default.string.isRequired,
          afterOpen: _propTypes2.default.string.isRequired,
          beforeClose: _propTypes2.default.string.isRequired
        })]),
        appElement: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(_safeHTMLElement2.default), _propTypes2.default.instanceOf(_safeHTMLElement.SafeHTMLCollection), _propTypes2.default.instanceOf(_safeHTMLElement.SafeNodeList), _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(_safeHTMLElement2.default))]),
        onAfterOpen: _propTypes2.default.func,
        onRequestClose: _propTypes2.default.func,
        closeTimeoutMS: _propTypes2.default.number,
        ariaHideApp: _propTypes2.default.bool,
        shouldFocusAfterRender: _propTypes2.default.bool,
        shouldCloseOnOverlayClick: _propTypes2.default.bool,
        shouldReturnFocusAfterClose: _propTypes2.default.bool,
        preventScroll: _propTypes2.default.bool,
        parentSelector: _propTypes2.default.func,
        aria: _propTypes2.default.object,
        data: _propTypes2.default.object,
        role: _propTypes2.default.string,
        contentLabel: _propTypes2.default.string,
        shouldCloseOnEsc: _propTypes2.default.bool,
        overlayRef: _propTypes2.default.func,
        contentRef: _propTypes2.default.func,
        id: _propTypes2.default.string,
        overlayElement: _propTypes2.default.func,
        contentElement: _propTypes2.default.func
      };
      Modal2.defaultProps = {
        isOpen: false,
        portalClassName,
        bodyOpenClassName,
        role: "dialog",
        ariaHideApp: true,
        closeTimeoutMS: 0,
        shouldFocusAfterRender: true,
        shouldCloseOnEsc: true,
        shouldCloseOnOverlayClick: true,
        shouldReturnFocusAfterClose: true,
        preventScroll: false,
        parentSelector: function parentSelector() {
          return document.body;
        },
        overlayElement: function overlayElement(props, contentEl) {
          return _react2.default.createElement("div", props, contentEl);
        },
        contentElement: function contentElement(props, children) {
          return _react2.default.createElement("div", props, children);
        }
      };
      Modal2.defaultStyles = {
        overlay: {
          position: "fixed",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: "rgba(255, 255, 255, 0.75)"
        },
        content: {
          position: "absolute",
          top: "40px",
          left: "40px",
          right: "40px",
          bottom: "40px",
          border: "1px solid #ccc",
          background: "#fff",
          overflow: "auto",
          WebkitOverflowScrolling: "touch",
          borderRadius: "4px",
          outline: "none",
          padding: "20px"
        }
      };
      (0, _reactLifecyclesCompat.polyfill)(Modal2);
      if (true) {
        Modal2.setCreateHTMLElement = function(fn2) {
          return createHTMLElement = fn2;
        };
      }
      exports.default = Modal2;
    }
  });

  // node_modules/react-modal/lib/index.js
  var require_lib = __commonJS({
    "node_modules/react-modal/lib/index.js"(exports, module) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _Modal = require_Modal();
      var _Modal2 = _interopRequireDefault(_Modal);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports.default = _Modal2.default;
      module.exports = exports["default"];
    }
  });

  // index.jsx
  var import_react14 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());

  // node_modules/react-redux/es/components/Provider.js
  var import_react3 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());

  // node_modules/react-redux/es/components/Context.js
  var import_react = __toESM(require_react());
  var ReactReduxContext = /* @__PURE__ */ import_react.default.createContext(null);
  if (true) {
    ReactReduxContext.displayName = "ReactRedux";
  }

  // node_modules/react-redux/es/utils/batch.js
  function defaultNoopBatch(callback) {
    callback();
  }
  var batch = defaultNoopBatch;
  var setBatch = function setBatch2(newBatch) {
    return batch = newBatch;
  };
  var getBatch = function getBatch2() {
    return batch;
  };

  // node_modules/react-redux/es/utils/Subscription.js
  function createListenerCollection() {
    var batch2 = getBatch();
    var first = null;
    var last2 = null;
    return {
      clear: function clear() {
        first = null;
        last2 = null;
      },
      notify: function notify2() {
        batch2(function() {
          var listener2 = first;
          while (listener2) {
            listener2.callback();
            listener2 = listener2.next;
          }
        });
      },
      get: function get2() {
        var listeners = [];
        var listener2 = first;
        while (listener2) {
          listeners.push(listener2);
          listener2 = listener2.next;
        }
        return listeners;
      },
      subscribe: function subscribe(callback) {
        var isSubscribed = true;
        var listener2 = last2 = {
          callback,
          next: null,
          prev: last2
        };
        if (listener2.prev) {
          listener2.prev.next = listener2;
        } else {
          first = listener2;
        }
        return function unsubscribe() {
          if (!isSubscribed || first === null)
            return;
          isSubscribed = false;
          if (listener2.next) {
            listener2.next.prev = listener2.prev;
          } else {
            last2 = listener2.prev;
          }
          if (listener2.prev) {
            listener2.prev.next = listener2.next;
          } else {
            first = listener2.next;
          }
        };
      }
    };
  }
  var nullListeners = {
    notify: function notify() {
    },
    get: function get() {
      return [];
    }
  };
  function createSubscription(store2, parentSub) {
    var unsubscribe;
    var listeners = nullListeners;
    function addNestedSub(listener2) {
      trySubscribe();
      return listeners.subscribe(listener2);
    }
    function notifyNestedSubs() {
      listeners.notify();
    }
    function handleChangeWrapper() {
      if (subscription.onStateChange) {
        subscription.onStateChange();
      }
    }
    function isSubscribed() {
      return Boolean(unsubscribe);
    }
    function trySubscribe() {
      if (!unsubscribe) {
        unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store2.subscribe(handleChangeWrapper);
        listeners = createListenerCollection();
      }
    }
    function tryUnsubscribe() {
      if (unsubscribe) {
        unsubscribe();
        unsubscribe = void 0;
        listeners.clear();
        listeners = nullListeners;
      }
    }
    var subscription = {
      addNestedSub,
      notifyNestedSubs,
      handleChangeWrapper,
      isSubscribed,
      trySubscribe,
      tryUnsubscribe,
      getListeners: function getListeners() {
        return listeners;
      }
    };
    return subscription;
  }

  // node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
  var import_react2 = __toESM(require_react());
  var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react2.useLayoutEffect : import_react2.useEffect;

  // node_modules/react-redux/es/components/Provider.js
  function Provider(_ref) {
    var store2 = _ref.store, context = _ref.context, children = _ref.children;
    var contextValue = (0, import_react3.useMemo)(function() {
      var subscription = createSubscription(store2);
      subscription.onStateChange = subscription.notifyNestedSubs;
      return {
        store: store2,
        subscription
      };
    }, [store2]);
    var previousState = (0, import_react3.useMemo)(function() {
      return store2.getState();
    }, [store2]);
    useIsomorphicLayoutEffect(function() {
      var subscription = contextValue.subscription;
      subscription.trySubscribe();
      if (previousState !== store2.getState()) {
        subscription.notifyNestedSubs();
      }
      return function() {
        subscription.tryUnsubscribe();
        subscription.onStateChange = null;
      };
    }, [contextValue, previousState]);
    var Context = context || ReactReduxContext;
    return /* @__PURE__ */ import_react3.default.createElement(Context.Provider, {
      value: contextValue
    }, children);
  }
  if (true) {
    Provider.propTypes = {
      store: import_prop_types.default.shape({
        subscribe: import_prop_types.default.func.isRequired,
        dispatch: import_prop_types.default.func.isRequired,
        getState: import_prop_types.default.func.isRequired
      }),
      context: import_prop_types.default.object,
      children: import_prop_types.default.any
    };
  }
  var Provider_default = Provider;

  // node_modules/react-redux/es/components/connectAdvanced.js
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  var import_react4 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is());

  // node_modules/react-redux/es/hooks/useStore.js
  var import_react6 = __toESM(require_react());

  // node_modules/react-redux/es/hooks/useReduxContext.js
  var import_react5 = __toESM(require_react());
  function useReduxContext() {
    var contextValue = (0, import_react5.useContext)(ReactReduxContext);
    if (!contextValue) {
      throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
    }
    return contextValue;
  }

  // node_modules/react-redux/es/hooks/useStore.js
  function createStoreHook(context) {
    if (context === void 0) {
      context = ReactReduxContext;
    }
    var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
      return (0, import_react6.useContext)(context);
    };
    return function useStore2() {
      var _useReduxContext = useReduxContext2(), store2 = _useReduxContext.store;
      return store2;
    };
  }
  var useStore = /* @__PURE__ */ createStoreHook();

  // node_modules/react-redux/es/hooks/useDispatch.js
  function createDispatchHook(context) {
    if (context === void 0) {
      context = ReactReduxContext;
    }
    var useStore2 = context === ReactReduxContext ? useStore : createStoreHook(context);
    return function useDispatch2() {
      var store2 = useStore2();
      return store2.dispatch;
    };
  }
  var useDispatch = /* @__PURE__ */ createDispatchHook();

  // node_modules/react-redux/es/hooks/useSelector.js
  var import_react7 = __toESM(require_react());
  var refEquality = function refEquality2(a3, b3) {
    return a3 === b3;
  };
  function useSelectorWithStoreAndSubscription(selector, equalityFn, store2, contextSub) {
    var _useReducer = (0, import_react7.useReducer)(function(s3) {
      return s3 + 1;
    }, 0), forceRender = _useReducer[1];
    var subscription = (0, import_react7.useMemo)(function() {
      return createSubscription(store2, contextSub);
    }, [store2, contextSub]);
    var latestSubscriptionCallbackError = (0, import_react7.useRef)();
    var latestSelector = (0, import_react7.useRef)();
    var latestStoreState = (0, import_react7.useRef)();
    var latestSelectedState = (0, import_react7.useRef)();
    var storeState = store2.getState();
    var selectedState;
    try {
      if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
        var newSelectedState = selector(storeState);
        if (latestSelectedState.current === void 0 || !equalityFn(newSelectedState, latestSelectedState.current)) {
          selectedState = newSelectedState;
        } else {
          selectedState = latestSelectedState.current;
        }
      } else {
        selectedState = latestSelectedState.current;
      }
    } catch (err) {
      if (latestSubscriptionCallbackError.current) {
        err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
      }
      throw err;
    }
    useIsomorphicLayoutEffect(function() {
      latestSelector.current = selector;
      latestStoreState.current = storeState;
      latestSelectedState.current = selectedState;
      latestSubscriptionCallbackError.current = void 0;
    });
    useIsomorphicLayoutEffect(function() {
      function checkForUpdates() {
        try {
          var newStoreState = store2.getState();
          if (newStoreState === latestStoreState.current) {
            return;
          }
          var _newSelectedState = latestSelector.current(newStoreState);
          if (equalityFn(_newSelectedState, latestSelectedState.current)) {
            return;
          }
          latestSelectedState.current = _newSelectedState;
          latestStoreState.current = newStoreState;
        } catch (err) {
          latestSubscriptionCallbackError.current = err;
        }
        forceRender();
      }
      subscription.onStateChange = checkForUpdates;
      subscription.trySubscribe();
      checkForUpdates();
      return function() {
        return subscription.tryUnsubscribe();
      };
    }, [store2, subscription]);
    return selectedState;
  }
  function createSelectorHook(context) {
    if (context === void 0) {
      context = ReactReduxContext;
    }
    var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
      return (0, import_react7.useContext)(context);
    };
    return function useSelector2(selector, equalityFn) {
      if (equalityFn === void 0) {
        equalityFn = refEquality;
      }
      if (true) {
        if (!selector) {
          throw new Error("You must pass a selector to useSelector");
        }
        if (typeof selector !== "function") {
          throw new Error("You must pass a function as a selector to useSelector");
        }
        if (typeof equalityFn !== "function") {
          throw new Error("You must pass a function as an equality function to useSelector");
        }
      }
      var _useReduxContext = useReduxContext2(), store2 = _useReduxContext.store, contextSub = _useReduxContext.subscription;
      var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store2, contextSub);
      (0, import_react7.useDebugValue)(selectedState);
      return selectedState;
    };
  }
  var useSelector = /* @__PURE__ */ createSelectorHook();

  // node_modules/react-redux/es/utils/reactBatchedUpdates.js
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-redux/es/index.js
  setBatch(import_react_dom.unstable_batchedUpdates);

  // node_modules/immer/dist/immer.esm.js
  function n(n3) {
    for (var r3 = arguments.length, t3 = Array(r3 > 1 ? r3 - 1 : 0), e3 = 1; e3 < r3; e3++)
      t3[e3 - 1] = arguments[e3];
    if (true) {
      var i3 = Y[n3], o3 = i3 ? typeof i3 == "function" ? i3.apply(null, t3) : i3 : "unknown error nr: " + n3;
      throw Error("[Immer] " + o3);
    }
    throw Error("[Immer] minified error nr: " + n3 + (t3.length ? " " + t3.map(function(n4) {
      return "'" + n4 + "'";
    }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
  }
  function r(n3) {
    return !!n3 && !!n3[Q];
  }
  function t(n3) {
    return !!n3 && (function(n4) {
      if (!n4 || typeof n4 != "object")
        return false;
      var r3 = Object.getPrototypeOf(n4);
      if (r3 === null)
        return true;
      var t3 = Object.hasOwnProperty.call(r3, "constructor") && r3.constructor;
      return t3 === Object || typeof t3 == "function" && Function.toString.call(t3) === Z;
    }(n3) || Array.isArray(n3) || !!n3[L] || !!n3.constructor[L] || s(n3) || v(n3));
  }
  function i(n3, r3, t3) {
    t3 === void 0 && (t3 = false), o(n3) === 0 ? (t3 ? Object.keys : nn)(n3).forEach(function(e3) {
      t3 && typeof e3 == "symbol" || r3(e3, n3[e3], n3);
    }) : n3.forEach(function(t4, e3) {
      return r3(e3, t4, n3);
    });
  }
  function o(n3) {
    var r3 = n3[Q];
    return r3 ? r3.i > 3 ? r3.i - 4 : r3.i : Array.isArray(n3) ? 1 : s(n3) ? 2 : v(n3) ? 3 : 0;
  }
  function u(n3, r3) {
    return o(n3) === 2 ? n3.has(r3) : Object.prototype.hasOwnProperty.call(n3, r3);
  }
  function a(n3, r3) {
    return o(n3) === 2 ? n3.get(r3) : n3[r3];
  }
  function f(n3, r3, t3) {
    var e3 = o(n3);
    e3 === 2 ? n3.set(r3, t3) : e3 === 3 ? (n3.delete(r3), n3.add(t3)) : n3[r3] = t3;
  }
  function c(n3, r3) {
    return n3 === r3 ? n3 !== 0 || 1 / n3 == 1 / r3 : n3 != n3 && r3 != r3;
  }
  function s(n3) {
    return X && n3 instanceof Map;
  }
  function v(n3) {
    return q && n3 instanceof Set;
  }
  function p(n3) {
    return n3.o || n3.t;
  }
  function l(n3) {
    if (Array.isArray(n3))
      return Array.prototype.slice.call(n3);
    var r3 = rn(n3);
    delete r3[Q];
    for (var t3 = nn(r3), e3 = 0; e3 < t3.length; e3++) {
      var i3 = t3[e3], o3 = r3[i3];
      o3.writable === false && (o3.writable = true, o3.configurable = true), (o3.get || o3.set) && (r3[i3] = { configurable: true, writable: true, enumerable: o3.enumerable, value: n3[i3] });
    }
    return Object.create(Object.getPrototypeOf(n3), r3);
  }
  function d(n3, e3) {
    return e3 === void 0 && (e3 = false), y(n3) || r(n3) || !t(n3) ? n3 : (o(n3) > 1 && (n3.set = n3.add = n3.clear = n3.delete = h), Object.freeze(n3), e3 && i(n3, function(n4, r3) {
      return d(r3, true);
    }, true), n3);
  }
  function h() {
    n(2);
  }
  function y(n3) {
    return n3 == null || typeof n3 != "object" || Object.isFrozen(n3);
  }
  function b(r3) {
    var t3 = tn[r3];
    return t3 || n(18, r3), t3;
  }
  function m(n3, r3) {
    tn[n3] || (tn[n3] = r3);
  }
  function _() {
    return U || n(0), U;
  }
  function j(n3, r3) {
    r3 && (b("Patches"), n3.u = [], n3.s = [], n3.v = r3);
  }
  function O(n3) {
    g(n3), n3.p.forEach(S), n3.p = null;
  }
  function g(n3) {
    n3 === U && (U = n3.l);
  }
  function w(n3) {
    return U = { p: [], l: U, h: n3, m: true, _: 0 };
  }
  function S(n3) {
    var r3 = n3[Q];
    r3.i === 0 || r3.i === 1 ? r3.j() : r3.O = true;
  }
  function P(r3, e3) {
    e3._ = e3.p.length;
    var i3 = e3.p[0], o3 = r3 !== void 0 && r3 !== i3;
    return e3.h.g || b("ES5").S(e3, r3, o3), o3 ? (i3[Q].P && (O(e3), n(4)), t(r3) && (r3 = M(e3, r3), e3.l || x(e3, r3)), e3.u && b("Patches").M(i3[Q].t, r3, e3.u, e3.s)) : r3 = M(e3, i3, []), O(e3), e3.u && e3.v(e3.u, e3.s), r3 !== H ? r3 : void 0;
  }
  function M(n3, r3, t3) {
    if (y(r3))
      return r3;
    var e3 = r3[Q];
    if (!e3)
      return i(r3, function(i3, o4) {
        return A(n3, e3, r3, i3, o4, t3);
      }, true), r3;
    if (e3.A !== n3)
      return r3;
    if (!e3.P)
      return x(n3, e3.t, true), e3.t;
    if (!e3.I) {
      e3.I = true, e3.A._--;
      var o3 = e3.i === 4 || e3.i === 5 ? e3.o = l(e3.k) : e3.o;
      i(e3.i === 3 ? new Set(o3) : o3, function(r4, i3) {
        return A(n3, e3, o3, r4, i3, t3);
      }), x(n3, o3, false), t3 && n3.u && b("Patches").R(e3, t3, n3.u, n3.s);
    }
    return e3.o;
  }
  function A(e3, i3, o3, a3, c3, s3) {
    if (c3 === o3 && n(5), r(c3)) {
      var v2 = M(e3, c3, s3 && i3 && i3.i !== 3 && !u(i3.D, a3) ? s3.concat(a3) : void 0);
      if (f(o3, a3, v2), !r(v2))
        return;
      e3.m = false;
    }
    if (t(c3) && !y(c3)) {
      if (!e3.h.F && e3._ < 1)
        return;
      M(e3, c3), i3 && i3.A.l || x(e3, c3);
    }
  }
  function x(n3, r3, t3) {
    t3 === void 0 && (t3 = false), n3.h.F && n3.m && d(r3, t3);
  }
  function z(n3, r3) {
    var t3 = n3[Q];
    return (t3 ? p(t3) : n3)[r3];
  }
  function I(n3, r3) {
    if (r3 in n3)
      for (var t3 = Object.getPrototypeOf(n3); t3; ) {
        var e3 = Object.getOwnPropertyDescriptor(t3, r3);
        if (e3)
          return e3;
        t3 = Object.getPrototypeOf(t3);
      }
  }
  function k(n3) {
    n3.P || (n3.P = true, n3.l && k(n3.l));
  }
  function E(n3) {
    n3.o || (n3.o = l(n3.t));
  }
  function R(n3, r3, t3) {
    var e3 = s(r3) ? b("MapSet").N(r3, t3) : v(r3) ? b("MapSet").T(r3, t3) : n3.g ? function(n4, r4) {
      var t4 = Array.isArray(n4), e4 = { i: t4 ? 1 : 0, A: r4 ? r4.A : _(), P: false, I: false, D: {}, l: r4, t: n4, k: null, o: null, j: null, C: false }, i3 = e4, o3 = en;
      t4 && (i3 = [e4], o3 = on);
      var u3 = Proxy.revocable(i3, o3), a3 = u3.revoke, f3 = u3.proxy;
      return e4.k = f3, e4.j = a3, f3;
    }(r3, t3) : b("ES5").J(r3, t3);
    return (t3 ? t3.A : _()).p.push(e3), e3;
  }
  function D(e3) {
    return r(e3) || n(22, e3), function n3(r3) {
      if (!t(r3))
        return r3;
      var e4, u3 = r3[Q], c3 = o(r3);
      if (u3) {
        if (!u3.P && (u3.i < 4 || !b("ES5").K(u3)))
          return u3.t;
        u3.I = true, e4 = F(r3, c3), u3.I = false;
      } else
        e4 = F(r3, c3);
      return i(e4, function(r4, t3) {
        u3 && a(u3.t, r4) === t3 || f(e4, r4, n3(t3));
      }), c3 === 3 ? new Set(e4) : e4;
    }(e3);
  }
  function F(n3, r3) {
    switch (r3) {
      case 2:
        return new Map(n3);
      case 3:
        return Array.from(n3);
    }
    return l(n3);
  }
  function N() {
    function t3(n3, r3) {
      var t4 = s3[n3];
      return t4 ? t4.enumerable = r3 : s3[n3] = t4 = { configurable: true, enumerable: r3, get: function() {
        var r4 = this[Q];
        return f3(r4), en.get(r4, n3);
      }, set: function(r4) {
        var t5 = this[Q];
        f3(t5), en.set(t5, n3, r4);
      } }, t4;
    }
    function e3(n3) {
      for (var r3 = n3.length - 1; r3 >= 0; r3--) {
        var t4 = n3[r3][Q];
        if (!t4.P)
          switch (t4.i) {
            case 5:
              a3(t4) && k(t4);
              break;
            case 4:
              o3(t4) && k(t4);
          }
      }
    }
    function o3(n3) {
      for (var r3 = n3.t, t4 = n3.k, e4 = nn(t4), i3 = e4.length - 1; i3 >= 0; i3--) {
        var o4 = e4[i3];
        if (o4 !== Q) {
          var a4 = r3[o4];
          if (a4 === void 0 && !u(r3, o4))
            return true;
          var f4 = t4[o4], s4 = f4 && f4[Q];
          if (s4 ? s4.t !== a4 : !c(f4, a4))
            return true;
        }
      }
      var v2 = !!r3[Q];
      return e4.length !== nn(r3).length + (v2 ? 0 : 1);
    }
    function a3(n3) {
      var r3 = n3.k;
      if (r3.length !== n3.t.length)
        return true;
      var t4 = Object.getOwnPropertyDescriptor(r3, r3.length - 1);
      if (t4 && !t4.get)
        return true;
      for (var e4 = 0; e4 < r3.length; e4++)
        if (!r3.hasOwnProperty(e4))
          return true;
      return false;
    }
    function f3(r3) {
      r3.O && n(3, JSON.stringify(p(r3)));
    }
    var s3 = {};
    m("ES5", { J: function(n3, r3) {
      var e4 = Array.isArray(n3), i3 = function(n4, r4) {
        if (n4) {
          for (var e5 = Array(r4.length), i4 = 0; i4 < r4.length; i4++)
            Object.defineProperty(e5, "" + i4, t3(i4, true));
          return e5;
        }
        var o5 = rn(r4);
        delete o5[Q];
        for (var u3 = nn(o5), a4 = 0; a4 < u3.length; a4++) {
          var f4 = u3[a4];
          o5[f4] = t3(f4, n4 || !!o5[f4].enumerable);
        }
        return Object.create(Object.getPrototypeOf(r4), o5);
      }(e4, n3), o4 = { i: e4 ? 5 : 4, A: r3 ? r3.A : _(), P: false, I: false, D: {}, l: r3, t: n3, k: i3, o: null, O: false, C: false };
      return Object.defineProperty(i3, Q, { value: o4, writable: true }), i3;
    }, S: function(n3, t4, o4) {
      o4 ? r(t4) && t4[Q].A === n3 && e3(n3.p) : (n3.u && function n4(r3) {
        if (r3 && typeof r3 == "object") {
          var t5 = r3[Q];
          if (t5) {
            var e4 = t5.t, o5 = t5.k, f4 = t5.D, c3 = t5.i;
            if (c3 === 4)
              i(o5, function(r4) {
                r4 !== Q && (e4[r4] !== void 0 || u(e4, r4) ? f4[r4] || n4(o5[r4]) : (f4[r4] = true, k(t5)));
              }), i(e4, function(n5) {
                o5[n5] !== void 0 || u(o5, n5) || (f4[n5] = false, k(t5));
              });
            else if (c3 === 5) {
              if (a3(t5) && (k(t5), f4.length = true), o5.length < e4.length)
                for (var s4 = o5.length; s4 < e4.length; s4++)
                  f4[s4] = false;
              else
                for (var v2 = e4.length; v2 < o5.length; v2++)
                  f4[v2] = true;
              for (var p3 = Math.min(o5.length, e4.length), l3 = 0; l3 < p3; l3++)
                o5.hasOwnProperty(l3) || (f4[l3] = true), f4[l3] === void 0 && n4(o5[l3]);
            }
          }
        }
      }(n3.p[0]), e3(n3.p));
    }, K: function(n3) {
      return n3.i === 4 ? o3(n3) : a3(n3);
    } });
  }
  var G;
  var U;
  var W = typeof Symbol != "undefined" && typeof Symbol("x") == "symbol";
  var X = typeof Map != "undefined";
  var q = typeof Set != "undefined";
  var B = typeof Proxy != "undefined" && Proxy.revocable !== void 0 && typeof Reflect != "undefined";
  var H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
  var L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
  var Q = W ? Symbol.for("immer-state") : "__$immer_state";
  var Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n3) {
    return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n3;
  }, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n3) {
    return "Cannot apply patch, path doesn't resolve: " + n3;
  }, 16: 'Sets cannot have "replace" patches.', 17: function(n3) {
    return "Unsupported patch operation: " + n3;
  }, 18: function(n3) {
    return "The plugin for '" + n3 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n3 + "()` when initializing your application.";
  }, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n3) {
    return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n3 + "'";
  }, 22: function(n3) {
    return "'current' expects a draft, got: " + n3;
  }, 23: function(n3) {
    return "'original' expects a draft, got: " + n3;
  }, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
  var Z = "" + Object.prototype.constructor;
  var nn = typeof Reflect != "undefined" && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols !== void 0 ? function(n3) {
    return Object.getOwnPropertyNames(n3).concat(Object.getOwnPropertySymbols(n3));
  } : Object.getOwnPropertyNames;
  var rn = Object.getOwnPropertyDescriptors || function(n3) {
    var r3 = {};
    return nn(n3).forEach(function(t3) {
      r3[t3] = Object.getOwnPropertyDescriptor(n3, t3);
    }), r3;
  };
  var tn = {};
  var en = { get: function(n3, r3) {
    if (r3 === Q)
      return n3;
    var e3 = p(n3);
    if (!u(e3, r3))
      return function(n4, r4, t3) {
        var e4, i4 = I(r4, t3);
        return i4 ? "value" in i4 ? i4.value : (e4 = i4.get) === null || e4 === void 0 ? void 0 : e4.call(n4.k) : void 0;
      }(n3, e3, r3);
    var i3 = e3[r3];
    return n3.I || !t(i3) ? i3 : i3 === z(n3.t, r3) ? (E(n3), n3.o[r3] = R(n3.A.h, i3, n3)) : i3;
  }, has: function(n3, r3) {
    return r3 in p(n3);
  }, ownKeys: function(n3) {
    return Reflect.ownKeys(p(n3));
  }, set: function(n3, r3, t3) {
    var e3 = I(p(n3), r3);
    if (e3 == null ? void 0 : e3.set)
      return e3.set.call(n3.k, t3), true;
    if (!n3.P) {
      var i3 = z(p(n3), r3), o3 = i3 == null ? void 0 : i3[Q];
      if (o3 && o3.t === t3)
        return n3.o[r3] = t3, n3.D[r3] = false, true;
      if (c(t3, i3) && (t3 !== void 0 || u(n3.t, r3)))
        return true;
      E(n3), k(n3);
    }
    return n3.o[r3] === t3 && typeof t3 != "number" && (t3 !== void 0 || r3 in n3.o) || (n3.o[r3] = t3, n3.D[r3] = true, true);
  }, deleteProperty: function(n3, r3) {
    return z(n3.t, r3) !== void 0 || r3 in n3.t ? (n3.D[r3] = false, E(n3), k(n3)) : delete n3.D[r3], n3.o && delete n3.o[r3], true;
  }, getOwnPropertyDescriptor: function(n3, r3) {
    var t3 = p(n3), e3 = Reflect.getOwnPropertyDescriptor(t3, r3);
    return e3 ? { writable: true, configurable: n3.i !== 1 || r3 !== "length", enumerable: e3.enumerable, value: t3[r3] } : e3;
  }, defineProperty: function() {
    n(11);
  }, getPrototypeOf: function(n3) {
    return Object.getPrototypeOf(n3.t);
  }, setPrototypeOf: function() {
    n(12);
  } };
  var on = {};
  i(en, function(n3, r3) {
    on[n3] = function() {
      return arguments[0] = arguments[0][0], r3.apply(this, arguments);
    };
  }), on.deleteProperty = function(r3, t3) {
    return isNaN(parseInt(t3)) && n(13), on.set.call(this, r3, t3, void 0);
  }, on.set = function(r3, t3, e3) {
    return t3 !== "length" && isNaN(parseInt(t3)) && n(14), en.set.call(this, r3[0], t3, e3, r3[0]);
  };
  var un = function() {
    function e3(r3) {
      var e4 = this;
      this.g = B, this.F = true, this.produce = function(r4, i4, o3) {
        if (typeof r4 == "function" && typeof i4 != "function") {
          var u3 = i4;
          i4 = r4;
          var a3 = e4;
          return function(n3) {
            var r5 = this;
            n3 === void 0 && (n3 = u3);
            for (var t3 = arguments.length, e5 = Array(t3 > 1 ? t3 - 1 : 0), o4 = 1; o4 < t3; o4++)
              e5[o4 - 1] = arguments[o4];
            return a3.produce(n3, function(n4) {
              var t4;
              return (t4 = i4).call.apply(t4, [r5, n4].concat(e5));
            });
          };
        }
        var f3;
        if (typeof i4 != "function" && n(6), o3 !== void 0 && typeof o3 != "function" && n(7), t(r4)) {
          var c3 = w(e4), s3 = R(e4, r4, void 0), v2 = true;
          try {
            f3 = i4(s3), v2 = false;
          } finally {
            v2 ? O(c3) : g(c3);
          }
          return typeof Promise != "undefined" && f3 instanceof Promise ? f3.then(function(n3) {
            return j(c3, o3), P(n3, c3);
          }, function(n3) {
            throw O(c3), n3;
          }) : (j(c3, o3), P(f3, c3));
        }
        if (!r4 || typeof r4 != "object") {
          if ((f3 = i4(r4)) === void 0 && (f3 = r4), f3 === H && (f3 = void 0), e4.F && d(f3, true), o3) {
            var p3 = [], l3 = [];
            b("Patches").M(r4, f3, p3, l3), o3(p3, l3);
          }
          return f3;
        }
        n(21, r4);
      }, this.produceWithPatches = function(n3, r4) {
        if (typeof n3 == "function")
          return function(r5) {
            for (var t4 = arguments.length, i5 = Array(t4 > 1 ? t4 - 1 : 0), o4 = 1; o4 < t4; o4++)
              i5[o4 - 1] = arguments[o4];
            return e4.produceWithPatches(r5, function(r6) {
              return n3.apply(void 0, [r6].concat(i5));
            });
          };
        var t3, i4, o3 = e4.produce(n3, r4, function(n4, r5) {
          t3 = n4, i4 = r5;
        });
        return typeof Promise != "undefined" && o3 instanceof Promise ? o3.then(function(n4) {
          return [n4, t3, i4];
        }) : [o3, t3, i4];
      }, typeof (r3 == null ? void 0 : r3.useProxies) == "boolean" && this.setUseProxies(r3.useProxies), typeof (r3 == null ? void 0 : r3.autoFreeze) == "boolean" && this.setAutoFreeze(r3.autoFreeze);
    }
    var i3 = e3.prototype;
    return i3.createDraft = function(e4) {
      t(e4) || n(8), r(e4) && (e4 = D(e4));
      var i4 = w(this), o3 = R(this, e4, void 0);
      return o3[Q].C = true, g(i4), o3;
    }, i3.finishDraft = function(r3, t3) {
      var e4 = r3 && r3[Q];
      e4 && e4.C || n(9), e4.I && n(10);
      var i4 = e4.A;
      return j(i4, t3), P(void 0, i4);
    }, i3.setAutoFreeze = function(n3) {
      this.F = n3;
    }, i3.setUseProxies = function(r3) {
      r3 && !B && n(20), this.g = r3;
    }, i3.applyPatches = function(n3, t3) {
      var e4;
      for (e4 = t3.length - 1; e4 >= 0; e4--) {
        var i4 = t3[e4];
        if (i4.path.length === 0 && i4.op === "replace") {
          n3 = i4.value;
          break;
        }
      }
      e4 > -1 && (t3 = t3.slice(e4 + 1));
      var o3 = b("Patches").$;
      return r(n3) ? o3(n3, t3) : this.produce(n3, function(n4) {
        return o3(n4, t3);
      });
    }, e3;
  }();
  var an = new un();
  var fn = an.produce;
  var cn = an.produceWithPatches.bind(an);
  var sn = an.setAutoFreeze.bind(an);
  var vn = an.setUseProxies.bind(an);
  var pn = an.applyPatches.bind(an);
  var ln = an.createDraft.bind(an);
  var dn = an.finishDraft.bind(an);
  var immer_esm_default = fn;

  // node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // node_modules/@babel/runtime/helpers/esm/objectSpread2.js
  function ownKeys(object, enumerableOnly) {
    var keys4 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys4.push.apply(keys4, symbols);
    }
    return keys4;
  }
  function _objectSpread2(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3] != null ? arguments[i3] : {};
      i3 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }

  // node_modules/redux/es/redux.js
  var $$observable = function() {
    return typeof Symbol === "function" && Symbol.observable || "@@observable";
  }();
  var randomString = function randomString2() {
    return Math.random().toString(36).substring(7).split("").join(".");
  };
  var ActionTypes = {
    INIT: "@@redux/INIT" + randomString(),
    REPLACE: "@@redux/REPLACE" + randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
      return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
    }
  };
  function isPlainObject2(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    var proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto;
  }
  function miniKindOf(val) {
    if (val === void 0)
      return "undefined";
    if (val === null)
      return "null";
    var type3 = typeof val;
    switch (type3) {
      case "boolean":
      case "string":
      case "number":
      case "symbol":
      case "function": {
        return type3;
      }
    }
    if (Array.isArray(val))
      return "array";
    if (isDate(val))
      return "date";
    if (isError(val))
      return "error";
    var constructorName = ctorName(val);
    switch (constructorName) {
      case "Symbol":
      case "Promise":
      case "WeakMap":
      case "WeakSet":
      case "Map":
      case "Set":
        return constructorName;
    }
    return type3.slice(8, -1).toLowerCase().replace(/\s/g, "");
  }
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate(val) {
    if (val instanceof Date)
      return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function kindOf(val) {
    var typeOfVal = typeof val;
    if (true) {
      typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
  }
  function createStore(reducer2, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
      }
      return enhancer(createStore)(reducer2, preloadedState);
    }
    if (typeof reducer2 !== "function") {
      throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer2) + "'");
    }
    var currentReducer = reducer2;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = currentListeners.slice();
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe(listener2) {
      if (typeof listener2 !== "function") {
        throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener2) + "'");
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      var isSubscribed = true;
      ensureCanMutateNextListeners();
      nextListeners.push(listener2);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        var index2 = nextListeners.indexOf(listener2);
        nextListeners.splice(index2, 1);
        currentListeners = null;
      };
    }
    function dispatch(action) {
      if (!isPlainObject2(action)) {
        throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
      }
      if (typeof action.type === "undefined") {
        throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      var listeners = currentListeners = nextListeners;
      for (var i3 = 0; i3 < listeners.length; i3++) {
        var listener2 = listeners[i3];
        listener2();
      }
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
      }
      currentReducer = nextReducer;
      dispatch({
        type: ActionTypes.REPLACE
      });
    }
    function observable() {
      var _ref;
      var outerSubscribe = subscribe;
      return _ref = {
        subscribe: function subscribe2(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
          }
          function observeState() {
            if (observer.next) {
              observer.next(getState());
            }
          }
          observeState();
          var unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe
          };
        }
      }, _ref[$$observable] = function() {
        return this;
      }, _ref;
    }
    dispatch({
      type: ActionTypes.INIT
    });
    return _ref2 = {
      dispatch,
      subscribe,
      getState,
      replaceReducer
    }, _ref2[$$observable] = observable, _ref2;
  }
  function warning2(message) {
    if (typeof console !== "undefined" && typeof console.error === "function") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (e3) {
    }
  }
  function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action && action.type === ActionTypes.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
    if (reducerKeys.length === 0) {
      return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
    }
    if (!isPlainObject2(inputState)) {
      return "The " + argumentName + ' has unexpected type of "' + kindOf(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
    }
    var unexpectedKeys = Object.keys(inputState).filter(function(key) {
      return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function(key) {
      unexpectedKeyCache[key] = true;
    });
    if (action && action.type === ActionTypes.REPLACE)
      return;
    if (unexpectedKeys.length > 0) {
      return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + " " + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
    }
  }
  function assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function(key) {
      var reducer2 = reducers[key];
      var initialState2 = reducer2(void 0, {
        type: ActionTypes.INIT
      });
      if (typeof initialState2 === "undefined") {
        throw new Error(false ? formatProdErrorMessage(12) : 'The slice reducer for key "' + key + `" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
      }
      if (typeof reducer2(void 0, {
        type: ActionTypes.PROBE_UNKNOWN_ACTION()
      }) === "undefined") {
        throw new Error(false ? formatProdErrorMessage(13) : 'The slice reducer for key "' + key + '" returned undefined when probed with a random type. ' + ("Don't try to handle '" + ActionTypes.INIT + `' or other actions in "redux/*" `) + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
      }
    });
  }
  function combineReducers(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {};
    for (var i3 = 0; i3 < reducerKeys.length; i3++) {
      var key = reducerKeys[i3];
      if (true) {
        if (typeof reducers[key] === "undefined") {
          warning2('No reducer provided for key "' + key + '"');
        }
      }
      if (typeof reducers[key] === "function") {
        finalReducers[key] = reducers[key];
      }
    }
    var finalReducerKeys = Object.keys(finalReducers);
    var unexpectedKeyCache;
    if (true) {
      unexpectedKeyCache = {};
    }
    var shapeAssertionError;
    try {
      assertReducerShape(finalReducers);
    } catch (e3) {
      shapeAssertionError = e3;
    }
    return function combination(state, action) {
      if (state === void 0) {
        state = {};
      }
      if (shapeAssertionError) {
        throw shapeAssertionError;
      }
      if (true) {
        var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
        if (warningMessage) {
          warning2(warningMessage);
        }
      }
      var hasChanged = false;
      var nextState = {};
      for (var _i = 0; _i < finalReducerKeys.length; _i++) {
        var _key = finalReducerKeys[_i];
        var reducer2 = finalReducers[_key];
        var previousStateForKey = state[_key];
        var nextStateForKey = reducer2(previousStateForKey, action);
        if (typeof nextStateForKey === "undefined") {
          var actionType = action && action.type;
          throw new Error(false ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? '"' + String(actionType) + '"' : "(unknown type)") + ', the slice reducer for key "' + _key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
        }
        nextState[_key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }
      hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
      return hasChanged ? nextState : state;
    };
  }
  function compose() {
    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
      funcs[_key] = arguments[_key];
    }
    if (funcs.length === 0) {
      return function(arg) {
        return arg;
      };
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce(function(a3, b3) {
      return function() {
        return a3(b3.apply(void 0, arguments));
      };
    });
  }
  function applyMiddleware() {
    for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
      middlewares[_key] = arguments[_key];
    }
    return function(createStore2) {
      return function() {
        var store2 = createStore2.apply(void 0, arguments);
        var _dispatch = function dispatch() {
          throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
        };
        var middlewareAPI = {
          getState: store2.getState,
          dispatch: function dispatch() {
            return _dispatch.apply(void 0, arguments);
          }
        };
        var chain = middlewares.map(function(middleware) {
          return middleware(middlewareAPI);
        });
        _dispatch = compose.apply(void 0, chain)(store2.dispatch);
        return _objectSpread2(_objectSpread2({}, store2), {}, {
          dispatch: _dispatch
        });
      };
    };
  }
  function isCrushed() {
  }
  if (typeof isCrushed.name === "string" && isCrushed.name !== "isCrushed") {
    warning2('You are currently using minified code outside of NODE_ENV === "production". This means that you are running a slower development build of Redux. You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) to ensure you have the correct code for your production build.');
  }

  // node_modules/redux-thunk/es/index.js
  function createThunkMiddleware(extraArgument) {
    var middleware = function middleware2(_ref) {
      var dispatch = _ref.dispatch, getState = _ref.getState;
      return function(next) {
        return function(action) {
          if (typeof action === "function") {
            return action(dispatch, getState, extraArgument);
          }
          return next(action);
        };
      };
    };
    return middleware;
  }
  var thunk = createThunkMiddleware();
  thunk.withExtraArgument = createThunkMiddleware;
  var es_default = thunk;

  // node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js
  var __extends = function() {
    var extendStatics = function(d3, b3) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d4, b4) {
        d4.__proto__ = b4;
      } || function(d4, b4) {
        for (var p3 in b4)
          if (Object.prototype.hasOwnProperty.call(b4, p3))
            d4[p3] = b4[p3];
      };
      return extendStatics(d3, b3);
    };
    return function(d3, b3) {
      if (typeof b3 !== "function" && b3 !== null)
        throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
      extendStatics(d3, b3);
      function __() {
        this.constructor = d3;
      }
      d3.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
    };
  }();
  var __generator = function(thisArg, body) {
    var _3 = { label: 0, sent: function() {
      if (t3[0] & 1)
        throw t3[1];
      return t3[1];
    }, trys: [], ops: [] }, f3, y3, t3, g3;
    return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
      return this;
    }), g3;
    function verb(n3) {
      return function(v2) {
        return step([n3, v2]);
      };
    }
    function step(op) {
      if (f3)
        throw new TypeError("Generator is already executing.");
      while (_3)
        try {
          if (f3 = 1, y3 && (t3 = op[0] & 2 ? y3["return"] : op[0] ? y3["throw"] || ((t3 = y3["return"]) && t3.call(y3), 0) : y3.next) && !(t3 = t3.call(y3, op[1])).done)
            return t3;
          if (y3 = 0, t3)
            op = [op[0] & 2, t3.value];
          switch (op[0]) {
            case 0:
            case 1:
              t3 = op;
              break;
            case 4:
              _3.label++;
              return { value: op[1], done: false };
            case 5:
              _3.label++;
              y3 = op[1];
              op = [0];
              continue;
            case 7:
              op = _3.ops.pop();
              _3.trys.pop();
              continue;
            default:
              if (!(t3 = _3.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _3 = 0;
                continue;
              }
              if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                _3.label = op[1];
                break;
              }
              if (op[0] === 6 && _3.label < t3[1]) {
                _3.label = t3[1];
                t3 = op;
                break;
              }
              if (t3 && _3.label < t3[2]) {
                _3.label = t3[2];
                _3.ops.push(op);
                break;
              }
              if (t3[2])
                _3.ops.pop();
              _3.trys.pop();
              continue;
          }
          op = body.call(thisArg, _3);
        } catch (e3) {
          op = [6, e3];
          y3 = 0;
        } finally {
          f3 = t3 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  };
  var __spreadArray = function(to, from) {
    for (var i3 = 0, il = from.length, j2 = to.length; i3 < il; i3++, j2++)
      to[j2] = from[i3];
    return to;
  };
  var __defProp2 = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp2 = function(obj, key, value) {
    return key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  };
  var __spreadValues = function(a3, b3) {
    for (var prop3 in b3 || (b3 = {}))
      if (__hasOwnProp2.call(b3, prop3))
        __defNormalProp2(a3, prop3, b3[prop3]);
    if (__getOwnPropSymbols)
      for (var _i = 0, _c = __getOwnPropSymbols(b3); _i < _c.length; _i++) {
        var prop3 = _c[_i];
        if (__propIsEnum.call(b3, prop3))
          __defNormalProp2(a3, prop3, b3[prop3]);
      }
    return a3;
  };
  var __spreadProps = function(a3, b3) {
    return __defProps(a3, __getOwnPropDescs(b3));
  };
  var __async = function(__this, __arguments, generator) {
    return new Promise(function(resolve, reject3) {
      var fulfilled = function(value) {
        try {
          step(generator.next(value));
        } catch (e3) {
          reject3(e3);
        }
      };
      var rejected = function(value) {
        try {
          step(generator.throw(value));
        } catch (e3) {
          reject3(e3);
        }
      };
      var step = function(x2) {
        return x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
      };
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };
  var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
    if (arguments.length === 0)
      return void 0;
    if (typeof arguments[0] === "object")
      return compose;
    return compose.apply(null, arguments);
  };
  var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {
    return function(noop2) {
      return noop2;
    };
  };
  function isPlainObject3(value) {
    if (typeof value !== "object" || value === null)
      return false;
    var proto = Object.getPrototypeOf(value);
    if (proto === null)
      return true;
    var baseProto = proto;
    while (Object.getPrototypeOf(baseProto) !== null) {
      baseProto = Object.getPrototypeOf(baseProto);
    }
    return proto === baseProto;
  }
  function getTimeMeasureUtils(maxDelay, fnName) {
    var elapsed = 0;
    return {
      measureTime: function(fn2) {
        var started = Date.now();
        try {
          return fn2();
        } finally {
          var finished = Date.now();
          elapsed += finished - started;
        }
      },
      warnIfExceeded: function() {
        if (elapsed > maxDelay) {
          console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
        }
      }
    };
  }
  var MiddlewareArray = function(_super) {
    __extends(MiddlewareArray2, _super);
    function MiddlewareArray2() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var _this = _super.apply(this, args) || this;
      Object.setPrototypeOf(_this, MiddlewareArray2.prototype);
      return _this;
    }
    Object.defineProperty(MiddlewareArray2, Symbol.species, {
      get: function() {
        return MiddlewareArray2;
      },
      enumerable: false,
      configurable: true
    });
    MiddlewareArray2.prototype.concat = function() {
      var arr = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
      }
      return _super.prototype.concat.apply(this, arr);
    };
    MiddlewareArray2.prototype.prepend = function() {
      var arr = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        arr[_i] = arguments[_i];
      }
      if (arr.length === 1 && Array.isArray(arr[0])) {
        return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr[0].concat(this))))();
      }
      return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr.concat(this))))();
    };
    return MiddlewareArray2;
  }(Array);
  var isProduction = false;
  var prefix = "Invariant failed";
  function invariant(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix);
    }
    throw new Error(prefix + ": " + (message || ""));
  }
  function stringify(obj, serializer, indent, decycler) {
    return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
  }
  function getSerialize(serializer, decycler) {
    var stack = [], keys4 = [];
    if (!decycler)
      decycler = function(_3, value) {
        if (stack[0] === value)
          return "[Circular ~]";
        return "[Circular ~." + keys4.slice(0, stack.indexOf(value)).join(".") + "]";
      };
    return function(key, value) {
      if (stack.length > 0) {
        var thisPos = stack.indexOf(this);
        ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
        ~thisPos ? keys4.splice(thisPos, Infinity, key) : keys4.push(key);
        if (~stack.indexOf(value))
          value = decycler.call(this, key, value);
      } else
        stack.push(value);
      return serializer == null ? value : serializer.call(this, key, value);
    };
  }
  function isImmutableDefault(value) {
    return typeof value !== "object" || value === null || typeof value === "undefined" || Object.isFrozen(value);
  }
  function trackForMutations(isImmutable, ignorePaths, obj) {
    var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
    return {
      detectMutations: function() {
        return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
      }
    };
  }
  function trackProperties(isImmutable, ignorePaths, obj, path3) {
    if (ignorePaths === void 0) {
      ignorePaths = [];
    }
    if (path3 === void 0) {
      path3 = "";
    }
    var tracked = { value: obj };
    if (!isImmutable(obj)) {
      tracked.children = {};
      for (var key in obj) {
        var childPath = path3 ? path3 + "." + key : key;
        if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
          continue;
        }
        tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
      }
    }
    return tracked;
  }
  function detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path3) {
    if (ignorePaths === void 0) {
      ignorePaths = [];
    }
    if (sameParentRef === void 0) {
      sameParentRef = false;
    }
    if (path3 === void 0) {
      path3 = "";
    }
    var prevObj = trackedProperty ? trackedProperty.value : void 0;
    var sameRef = prevObj === obj;
    if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
      return { wasMutated: true, path: path3 };
    }
    if (isImmutable(prevObj) || isImmutable(obj)) {
      return { wasMutated: false };
    }
    var keysToDetect = {};
    for (var key in trackedProperty.children) {
      keysToDetect[key] = true;
    }
    for (var key in obj) {
      keysToDetect[key] = true;
    }
    for (var key in keysToDetect) {
      var childPath = path3 ? path3 + "." + key : key;
      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
        continue;
      }
      var result = detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);
      if (result.wasMutated) {
        return result;
      }
    }
    return { wasMutated: false };
  }
  function createImmutableStateInvariantMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    if (false) {
      return function() {
        return function(next) {
          return function(action) {
            return next(action);
          };
        };
      };
    }
    var _c = options.isImmutable, isImmutable = _c === void 0 ? isImmutableDefault : _c, ignoredPaths = options.ignoredPaths, _d = options.warnAfter, warnAfter = _d === void 0 ? 32 : _d, ignore = options.ignore;
    ignoredPaths = ignoredPaths || ignore;
    var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
    return function(_c2) {
      var getState = _c2.getState;
      var state = getState();
      var tracker = track(state);
      var result;
      return function(next) {
        return function(action) {
          var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
          measureUtils.measureTime(function() {
            state = getState();
            result = tracker.detectMutations();
            tracker = track(state);
            invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result.path || "") + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
          });
          var dispatchedAction = next(action);
          measureUtils.measureTime(function() {
            state = getState();
            result = tracker.detectMutations();
            tracker = track(state);
            result.wasMutated && invariant(!result.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result.path || "") + ". Take a look at the reducer(s) handling the action " + stringify(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
          });
          measureUtils.warnIfExceeded();
          return dispatchedAction;
        };
      };
    };
  }
  function isPlain(val) {
    var type3 = typeof val;
    return type3 === "undefined" || val === null || type3 === "string" || type3 === "boolean" || type3 === "number" || Array.isArray(val) || isPlainObject3(val);
  }
  function findNonSerializableValue(value, path3, isSerializable, getEntries, ignoredPaths) {
    if (path3 === void 0) {
      path3 = "";
    }
    if (isSerializable === void 0) {
      isSerializable = isPlain;
    }
    if (ignoredPaths === void 0) {
      ignoredPaths = [];
    }
    var foundNestedSerializable;
    if (!isSerializable(value)) {
      return {
        keyPath: path3 || "<root>",
        value
      };
    }
    if (typeof value !== "object" || value === null) {
      return false;
    }
    var entries = getEntries != null ? getEntries(value) : Object.entries(value);
    var hasIgnoredPaths = ignoredPaths.length > 0;
    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
      var _c = entries_1[_i], key = _c[0], nestedValue = _c[1];
      var nestedPath = path3 ? path3 + "." + key : key;
      if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) {
        continue;
      }
      if (!isSerializable(nestedValue)) {
        return {
          keyPath: nestedPath,
          value: nestedValue
        };
      }
      if (typeof nestedValue === "object") {
        foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);
        if (foundNestedSerializable) {
          return foundNestedSerializable;
        }
      }
    }
    return false;
  }
  function createSerializableStateInvariantMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    if (false) {
      return function() {
        return function(next) {
          return function(action) {
            return next(action);
          };
        };
      };
    }
    var _c = options.isSerializable, isSerializable = _c === void 0 ? isPlain : _c, getEntries = options.getEntries, _d = options.ignoredActions, ignoredActions = _d === void 0 ? [] : _d, _e = options.ignoredActionPaths, ignoredActionPaths = _e === void 0 ? ["meta.arg", "meta.baseQueryMeta"] : _e, _f = options.ignoredPaths, ignoredPaths = _f === void 0 ? [] : _f, _g = options.warnAfter, warnAfter = _g === void 0 ? 32 : _g, _h = options.ignoreState, ignoreState = _h === void 0 ? false : _h, _j = options.ignoreActions, ignoreActions = _j === void 0 ? false : _j;
    return function(storeAPI) {
      return function(next) {
        return function(action) {
          var result = next(action);
          var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
          if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {
            measureUtils.measureTime(function() {
              var foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths);
              if (foundActionNonSerializableValue) {
                var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;
                console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
              }
            });
          }
          if (!ignoreState) {
            measureUtils.measureTime(function() {
              var state = storeAPI.getState();
              var foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths);
              if (foundStateNonSerializableValue) {
                var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;
                console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the reducer(s) handling this action type: " + action.type + ".\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");
              }
            });
            measureUtils.warnIfExceeded();
          }
          return result;
        };
      };
    };
  }
  function isBoolean(x2) {
    return typeof x2 === "boolean";
  }
  function curryGetDefaultMiddleware() {
    return function curriedGetDefaultMiddleware(options) {
      return getDefaultMiddleware(options);
    };
  }
  function getDefaultMiddleware(options) {
    if (options === void 0) {
      options = {};
    }
    var _c = options.thunk, thunk2 = _c === void 0 ? true : _c, _d = options.immutableCheck, immutableCheck = _d === void 0 ? true : _d, _e = options.serializableCheck, serializableCheck = _e === void 0 ? true : _e;
    var middlewareArray = new MiddlewareArray();
    if (thunk2) {
      if (isBoolean(thunk2)) {
        middlewareArray.push(es_default);
      } else {
        middlewareArray.push(es_default.withExtraArgument(thunk2.extraArgument));
      }
    }
    if (true) {
      if (immutableCheck) {
        var immutableOptions = {};
        if (!isBoolean(immutableCheck)) {
          immutableOptions = immutableCheck;
        }
        middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
      }
      if (serializableCheck) {
        var serializableOptions = {};
        if (!isBoolean(serializableCheck)) {
          serializableOptions = serializableCheck;
        }
        middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
      }
    }
    return middlewareArray;
  }
  var IS_PRODUCTION = false;
  function configureStore(options) {
    var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
    var _c = options || {}, _d = _c.reducer, reducer2 = _d === void 0 ? void 0 : _d, _e = _c.middleware, middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;
    var rootReducer;
    if (typeof reducer2 === "function") {
      rootReducer = reducer2;
    } else if (isPlainObject3(reducer2)) {
      rootReducer = combineReducers(reducer2);
    } else {
      throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
    }
    var finalMiddleware = middleware;
    if (typeof finalMiddleware === "function") {
      finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
      if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
        throw new Error("when using a middleware builder function, an array of middleware must be returned");
      }
    }
    if (!IS_PRODUCTION && finalMiddleware.some(function(item) {
      return typeof item !== "function";
    })) {
      throw new Error("each middleware provided to configureStore must be a function");
    }
    var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);
    var finalCompose = compose;
    if (devTools) {
      finalCompose = composeWithDevTools(__spreadValues({
        trace: !IS_PRODUCTION
      }, typeof devTools === "object" && devTools));
    }
    var storeEnhancers = [middlewareEnhancer];
    if (Array.isArray(enhancers)) {
      storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
    } else if (typeof enhancers === "function") {
      storeEnhancers = enhancers(storeEnhancers);
    }
    var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
    return createStore(rootReducer, preloadedState, composedEnhancer);
  }
  function createAction(type3, prepareAction) {
    function actionCreator() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (prepareAction) {
        var prepared = prepareAction.apply(void 0, args);
        if (!prepared) {
          throw new Error("prepareAction did not return an object");
        }
        return __spreadValues(__spreadValues({
          type: type3,
          payload: prepared.payload
        }, "meta" in prepared && { meta: prepared.meta }), "error" in prepared && { error: prepared.error });
      }
      return { type: type3, payload: args[0] };
    }
    actionCreator.toString = function() {
      return "" + type3;
    };
    actionCreator.type = type3;
    actionCreator.match = function(action) {
      return action.type === type3;
    };
    return actionCreator;
  }
  function executeReducerBuilderCallback(builderCallback) {
    var actionsMap = {};
    var actionMatchers = [];
    var defaultCaseReducer;
    var builder = {
      addCase: function(typeOrActionCreator, reducer2) {
        if (true) {
          if (actionMatchers.length > 0) {
            throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
          }
          if (defaultCaseReducer) {
            throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
          }
        }
        var type3 = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
        if (type3 in actionsMap) {
          throw new Error("addCase cannot be called with two reducers for the same action type");
        }
        actionsMap[type3] = reducer2;
        return builder;
      },
      addMatcher: function(matcher, reducer2) {
        if (true) {
          if (defaultCaseReducer) {
            throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
          }
        }
        actionMatchers.push({ matcher, reducer: reducer2 });
        return builder;
      },
      addDefaultCase: function(reducer2) {
        if (true) {
          if (defaultCaseReducer) {
            throw new Error("`builder.addDefaultCase` can only be called once");
          }
        }
        defaultCaseReducer = reducer2;
        return builder;
      }
    };
    builderCallback(builder);
    return [actionsMap, actionMatchers, defaultCaseReducer];
  }
  function isStateFunction(x2) {
    return typeof x2 === "function";
  }
  function createReducer(initialState2, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
    if (actionMatchers === void 0) {
      actionMatchers = [];
    }
    var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];
    var getInitialState;
    if (isStateFunction(initialState2)) {
      getInitialState = function() {
        return immer_esm_default(initialState2(), function() {
        });
      };
    } else {
      var frozenInitialState_1 = immer_esm_default(initialState2, function() {
      });
      getInitialState = function() {
        return frozenInitialState_1;
      };
    }
    function reducer2(state, action) {
      if (state === void 0) {
        state = getInitialState();
      }
      var caseReducers = __spreadArray([
        actionsMap[action.type]
      ], finalActionMatchers.filter(function(_c2) {
        var matcher = _c2.matcher;
        return matcher(action);
      }).map(function(_c2) {
        var reducer22 = _c2.reducer;
        return reducer22;
      }));
      if (caseReducers.filter(function(cr) {
        return !!cr;
      }).length === 0) {
        caseReducers = [finalDefaultCaseReducer];
      }
      return caseReducers.reduce(function(previousState, caseReducer) {
        if (caseReducer) {
          if (r(previousState)) {
            var draft = previousState;
            var result = caseReducer(draft, action);
            if (typeof result === "undefined") {
              return previousState;
            }
            return result;
          } else if (!t(previousState)) {
            var result = caseReducer(previousState, action);
            if (typeof result === "undefined") {
              if (previousState === null) {
                return previousState;
              }
              throw Error("A case reducer on a non-draftable value must not return undefined");
            }
            return result;
          } else {
            return immer_esm_default(previousState, function(draft2) {
              return caseReducer(draft2, action);
            });
          }
        }
        return previousState;
      }, state);
    }
    reducer2.getInitialState = getInitialState;
    return reducer2;
  }
  function getType2(slice3, actionKey) {
    return slice3 + "/" + actionKey;
  }
  function createSlice(options) {
    var name = options.name;
    if (!name) {
      throw new Error("`name` is a required option for createSlice");
    }
    var initialState2 = typeof options.initialState == "function" ? options.initialState : immer_esm_default(options.initialState, function() {
    });
    var reducers = options.reducers || {};
    var reducerNames = Object.keys(reducers);
    var sliceCaseReducersByName = {};
    var sliceCaseReducersByType = {};
    var actionCreators = {};
    reducerNames.forEach(function(reducerName) {
      var maybeReducerWithPrepare = reducers[reducerName];
      var type3 = getType2(name, reducerName);
      var caseReducer;
      var prepareCallback;
      if ("reducer" in maybeReducerWithPrepare) {
        caseReducer = maybeReducerWithPrepare.reducer;
        prepareCallback = maybeReducerWithPrepare.prepare;
      } else {
        caseReducer = maybeReducerWithPrepare;
      }
      sliceCaseReducersByName[reducerName] = caseReducer;
      sliceCaseReducersByType[type3] = caseReducer;
      actionCreators[reducerName] = prepareCallback ? createAction(type3, prepareCallback) : createAction(type3);
    });
    function buildReducer() {
      var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;
      var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
      return createReducer(initialState2, finalCaseReducers, actionMatchers, defaultCaseReducer);
    }
    var _reducer;
    return {
      name,
      reducer: function(state, action) {
        if (!_reducer)
          _reducer = buildReducer();
        return _reducer(state, action);
      },
      actions: actionCreators,
      caseReducers: sliceCaseReducersByName,
      getInitialState: function() {
        if (!_reducer)
          _reducer = buildReducer();
        return _reducer.getInitialState();
      }
    };
  }
  var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
  var nanoid = function(size) {
    if (size === void 0) {
      size = 21;
    }
    var id = "";
    var i3 = size;
    while (i3--) {
      id += urlAlphabet[Math.random() * 64 | 0];
    }
    return id;
  };
  var commonProperties = [
    "name",
    "message",
    "stack",
    "code"
  ];
  var RejectWithValue = function() {
    function RejectWithValue2(payload, meta) {
      this.payload = payload;
      this.meta = meta;
    }
    return RejectWithValue2;
  }();
  var FulfillWithMeta = function() {
    function FulfillWithMeta2(payload, meta) {
      this.payload = payload;
      this.meta = meta;
    }
    return FulfillWithMeta2;
  }();
  var miniSerializeError = function(value) {
    if (typeof value === "object" && value !== null) {
      var simpleError = {};
      for (var _i = 0, commonProperties_1 = commonProperties; _i < commonProperties_1.length; _i++) {
        var property = commonProperties_1[_i];
        if (typeof value[property] === "string") {
          simpleError[property] = value[property];
        }
      }
      return simpleError;
    }
    return { message: String(value) };
  };
  function createAsyncThunk(typePrefix, payloadCreator, options) {
    var fulfilled = createAction(typePrefix + "/fulfilled", function(payload, requestId, arg, meta) {
      return {
        payload,
        meta: __spreadProps(__spreadValues({}, meta || {}), {
          arg,
          requestId,
          requestStatus: "fulfilled"
        })
      };
    });
    var pending = createAction(typePrefix + "/pending", function(requestId, arg, meta) {
      return {
        payload: void 0,
        meta: __spreadProps(__spreadValues({}, meta || {}), {
          arg,
          requestId,
          requestStatus: "pending"
        })
      };
    });
    var rejected = createAction(typePrefix + "/rejected", function(error, requestId, arg, payload, meta) {
      return {
        payload,
        error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
        meta: __spreadProps(__spreadValues({}, meta || {}), {
          arg,
          requestId,
          rejectedWithValue: !!payload,
          requestStatus: "rejected",
          aborted: (error == null ? void 0 : error.name) === "AbortError",
          condition: (error == null ? void 0 : error.name) === "ConditionError"
        })
      };
    });
    var displayedWarning = false;
    var AC = typeof AbortController !== "undefined" ? AbortController : function() {
      function class_1() {
        this.signal = {
          aborted: false,
          addEventListener: function() {
          },
          dispatchEvent: function() {
            return false;
          },
          onabort: function() {
          },
          removeEventListener: function() {
          }
        };
      }
      class_1.prototype.abort = function() {
        if (true) {
          if (!displayedWarning) {
            displayedWarning = true;
            console.info("This platform does not implement AbortController. \nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.");
          }
        }
      };
      return class_1;
    }();
    function actionCreator(arg) {
      return function(dispatch, getState, extra) {
        var requestId = (options == null ? void 0 : options.idGenerator) ? options.idGenerator(arg) : nanoid();
        var abortController = new AC();
        var abortReason;
        var abortedPromise = new Promise(function(_3, reject3) {
          return abortController.signal.addEventListener("abort", function() {
            return reject3({ name: "AbortError", message: abortReason || "Aborted" });
          });
        });
        var started = false;
        function abort(reason) {
          if (started) {
            abortReason = reason;
            abortController.abort();
          }
        }
        var promise = function() {
          return __async(this, null, function() {
            var _a2, _b, finalAction, conditionResult, err_1, skipDispatch;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  _c.trys.push([0, 4, , 5]);
                  conditionResult = (_a2 = options == null ? void 0 : options.condition) == null ? void 0 : _a2.call(options, arg, { getState, extra });
                  if (!isThenable(conditionResult))
                    return [3, 2];
                  return [4, conditionResult];
                case 1:
                  conditionResult = _c.sent();
                  _c.label = 2;
                case 2:
                  if (conditionResult === false) {
                    throw {
                      name: "ConditionError",
                      message: "Aborted due to condition callback returning false."
                    };
                  }
                  started = true;
                  dispatch(pending(requestId, arg, (_b = options == null ? void 0 : options.getPendingMeta) == null ? void 0 : _b.call(options, { requestId, arg }, { getState, extra })));
                  return [4, Promise.race([
                    abortedPromise,
                    Promise.resolve(payloadCreator(arg, {
                      dispatch,
                      getState,
                      extra,
                      requestId,
                      signal: abortController.signal,
                      rejectWithValue: function(value, meta) {
                        return new RejectWithValue(value, meta);
                      },
                      fulfillWithValue: function(value, meta) {
                        return new FulfillWithMeta(value, meta);
                      }
                    })).then(function(result) {
                      if (result instanceof RejectWithValue) {
                        throw result;
                      }
                      if (result instanceof FulfillWithMeta) {
                        return fulfilled(result.payload, requestId, arg, result.meta);
                      }
                      return fulfilled(result, requestId, arg);
                    })
                  ])];
                case 3:
                  finalAction = _c.sent();
                  return [3, 5];
                case 4:
                  err_1 = _c.sent();
                  finalAction = err_1 instanceof RejectWithValue ? rejected(null, requestId, arg, err_1.payload, err_1.meta) : rejected(err_1, requestId, arg);
                  return [3, 5];
                case 5:
                  skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
                  if (!skipDispatch) {
                    dispatch(finalAction);
                  }
                  return [2, finalAction];
              }
            });
          });
        }();
        return Object.assign(promise, {
          abort,
          requestId,
          arg,
          unwrap: function() {
            return promise.then(unwrapResult);
          }
        });
      };
    }
    return Object.assign(actionCreator, {
      pending,
      rejected,
      fulfilled,
      typePrefix
    });
  }
  function unwrapResult(action) {
    if (action.meta && action.meta.rejectedWithValue) {
      throw action.payload;
    }
    if (action.error) {
      throw action.error;
    }
    return action.payload;
  }
  function isThenable(value) {
    return value !== null && typeof value === "object" && typeof value.then === "function";
  }
  var task = "task";
  var listener = "listener";
  var completed = "completed";
  var cancelled = "cancelled";
  var taskCancelled = "task-" + cancelled;
  var taskCompleted = "task-" + completed;
  var listenerCancelled = listener + "-" + cancelled;
  var listenerCompleted = listener + "-" + completed;
  var TaskAbortError = function() {
    function TaskAbortError2(code) {
      this.code = code;
      this.name = "TaskAbortError";
      this.message = task + " " + cancelled + " (reason: " + code + ")";
    }
    return TaskAbortError2;
  }();
  var alm = "listenerMiddleware";
  var addListener = createAction(alm + "/add");
  var clearAllListeners = createAction(alm + "/removeAll");
  var removeListener = createAction(alm + "/remove");
  N();

  // code.js
  var dropEvery = (n3) => `module Task${n3} where

divides x y = y \`mod\` x == 0


dropEvery [] _ = []
dropEvery (x:xs) n = dropEvery' (x:xs) n 1

dropEvery' :: [Int] -> Int -> Int -> [Int]
dropEvery' [] _ _ = []
dropEvery' (x:xs) n i =
    let current =
            if n \`divides\` i
                then []
                else [x]
    in current : dropEvery' xs n (i+1)
`;
  var rotate = (n3) => `module Task${n3} where
-- Rotate a list N places to the left.

rotate1 :: [a] -> [a]
rotate1 x = tail x ++ [head x]

rotate1Back :: [a] -> [a]
rotate1Back x = last x : init x


rotate :: [a] -> Int -> [a]
rotate [] _ = []
rotate x 0 = x
rotate x y
  | y > 0 = rotate rotate1 (y-1)
  | otherwise = rotate rotate1Back x (y+1)
`;
  var insertAt = (n3) => `module Task${n3} where

-- Insert an element at a given position into a list.

insertAt el lst n =
    let accu (i, acc) x =
            if i == n
                then (acc ++ [el,x],i+1)
                else (acc ++ [x],i+1)
    in fst $ foldl accu ([],1) lst


`;
  var balanceTree = (n3) => `module Task${n3} where

data Tree a = Empty | Branch a (Tree a) (Tree a)
leaf x = Branch x Empty Empty

isBalancedTree Empty = True
isBalancedTree (Branch _ l r) =
    (countBranches l - countBranches r) == 1
    || (countBranches r - countBranches l) == 1
    && isBalancedTree l && isBalancedTree r


countBranches Empty = 0
countBranches (Branch _ l r) = 1 + l + r
`;
  var compress = (n3) => `module Task${n3} where
--  Eliminate consecutive duplicates of list elements.

compress = foldr skipDups

skipDups x [] = [x]
skipDups x acc
   | x == head acc = acc
   | otherwise = x : acc

expect = [3,4,5,6]

actual = compress [3,3,4,5,6,6]

y :: Bool
y =  expect == actual
`;
  var uconandvcon = (n3) => `module Task${n3} where

data V = VCon String
data U = UCon Bool Int (Int, Int)

u :: U -> V
u (UCon x y j) =
  if x
    then j
    else fst y + snd y

`;
  var quicksort = (n3) => `module Task${n3} where

quick :: [Int] -> [Int]
quick []   = []
quick (x:xs)=
 let littlebigs = split xs
 in
   quick (fst littlebigs)
    ++ [x]
    ++  quick (snd littlebigs)

split [] _ result = result
split (x:xs) n (littles, bigs) =
  if x < n
    then split xs n (x:littles, bigs)
    else split xs n (littles, x:bigs)
`;
  var printXML = (n3) => `module Task${n3} where

data XML = XML Position Part
data Position = Top | Bottom | Left | Right

type Name = String

data Part =
     Element Name [Attribute] [XML]
   | Comment String
   | Text String

getPart :: XML -> Part
getPart (XML pos part) = part


printXML (Element name [attributs] xmls) =
  "<" ++ name ++ ">"
  ++ mconcat (map printXML xmls)
  ++ "</" ++ name ++ ">"
printXML (Text text) = text


`;
  var euler1 = (n3) => `module Task${n3} where

-- Add all the natural numbers below 1000
-- that are multiples of 3 or 5.

-- This comment contains \u202Ebidirectional format\u202C chars

-- add :: a -> a -> a
-- add x y = x + y


sum [] = 0
sum [x] = x
sum (x:xs) = x + Task1.sum xs

check (x:xs)
  | x \`mod\` 3 == 0 || x \`mod\` 5 == 0 = x + check xs
  | otherwise = check xs

problem_1 = Task1.sum (check [1..999])
`;
  var examples = [
    euler1,
    dropEvery,
    rotate,
    insertAt,
    balanceTree,
    compress,
    uconandvcon,
    quicksort,
    printXML
  ].map((ex, n3) => ex(n3 + 1));
  var code_default = examples;

  // node_modules/ramda/es/internal/_isPlaceholder.js
  function _isPlaceholder(a3) {
    return a3 != null && typeof a3 === "object" && a3["@@functional/placeholder"] === true;
  }

  // node_modules/ramda/es/internal/_curry1.js
  function _curry1(fn2) {
    return function f1(a3) {
      if (arguments.length === 0 || _isPlaceholder(a3)) {
        return f1;
      } else {
        return fn2.apply(this, arguments);
      }
    };
  }

  // node_modules/ramda/es/internal/_curry2.js
  function _curry2(fn2) {
    return function f22(a3, b3) {
      switch (arguments.length) {
        case 0:
          return f22;
        case 1:
          return _isPlaceholder(a3) ? f22 : _curry1(function(_b) {
            return fn2(a3, _b);
          });
        default:
          return _isPlaceholder(a3) && _isPlaceholder(b3) ? f22 : _isPlaceholder(a3) ? _curry1(function(_a2) {
            return fn2(_a2, b3);
          }) : _isPlaceholder(b3) ? _curry1(function(_b) {
            return fn2(a3, _b);
          }) : fn2(a3, b3);
      }
    };
  }

  // node_modules/ramda/es/internal/_arity.js
  function _arity(n3, fn2) {
    switch (n3) {
      case 0:
        return function() {
          return fn2.apply(this, arguments);
        };
      case 1:
        return function(a0) {
          return fn2.apply(this, arguments);
        };
      case 2:
        return function(a0, a1) {
          return fn2.apply(this, arguments);
        };
      case 3:
        return function(a0, a1, a22) {
          return fn2.apply(this, arguments);
        };
      case 4:
        return function(a0, a1, a22, a3) {
          return fn2.apply(this, arguments);
        };
      case 5:
        return function(a0, a1, a22, a3, a4) {
          return fn2.apply(this, arguments);
        };
      case 6:
        return function(a0, a1, a22, a3, a4, a5) {
          return fn2.apply(this, arguments);
        };
      case 7:
        return function(a0, a1, a22, a3, a4, a5, a6) {
          return fn2.apply(this, arguments);
        };
      case 8:
        return function(a0, a1, a22, a3, a4, a5, a6, a7) {
          return fn2.apply(this, arguments);
        };
      case 9:
        return function(a0, a1, a22, a3, a4, a5, a6, a7, a8) {
          return fn2.apply(this, arguments);
        };
      case 10:
        return function(a0, a1, a22, a3, a4, a5, a6, a7, a8, a9) {
          return fn2.apply(this, arguments);
        };
      default:
        throw new Error("First argument to _arity must be a non-negative integer no greater than ten");
    }
  }

  // node_modules/ramda/es/internal/_curryN.js
  function _curryN(length3, received, fn2) {
    return function() {
      var combined = [];
      var argsIdx = 0;
      var left = length3;
      var combinedIdx = 0;
      while (combinedIdx < received.length || argsIdx < arguments.length) {
        var result;
        if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
          result = received[combinedIdx];
        } else {
          result = arguments[argsIdx];
          argsIdx += 1;
        }
        combined[combinedIdx] = result;
        if (!_isPlaceholder(result)) {
          left -= 1;
        }
        combinedIdx += 1;
      }
      return left <= 0 ? fn2.apply(this, combined) : _arity(left, _curryN(length3, combined, fn2));
    };
  }

  // node_modules/ramda/es/curryN.js
  var curryN = /* @__PURE__ */ _curry2(function curryN2(length3, fn2) {
    if (length3 === 1) {
      return _curry1(fn2);
    }
    return _arity(length3, _curryN(length3, [], fn2));
  });
  var curryN_default = curryN;

  // node_modules/ramda/es/internal/_curry3.js
  function _curry3(fn2) {
    return function f3(a3, b3, c3) {
      switch (arguments.length) {
        case 0:
          return f3;
        case 1:
          return _isPlaceholder(a3) ? f3 : _curry2(function(_b, _c) {
            return fn2(a3, _b, _c);
          });
        case 2:
          return _isPlaceholder(a3) && _isPlaceholder(b3) ? f3 : _isPlaceholder(a3) ? _curry2(function(_a2, _c) {
            return fn2(_a2, b3, _c);
          }) : _isPlaceholder(b3) ? _curry2(function(_b, _c) {
            return fn2(a3, _b, _c);
          }) : _curry1(function(_c) {
            return fn2(a3, b3, _c);
          });
        default:
          return _isPlaceholder(a3) && _isPlaceholder(b3) && _isPlaceholder(c3) ? f3 : _isPlaceholder(a3) && _isPlaceholder(b3) ? _curry2(function(_a2, _b) {
            return fn2(_a2, _b, c3);
          }) : _isPlaceholder(a3) && _isPlaceholder(c3) ? _curry2(function(_a2, _c) {
            return fn2(_a2, b3, _c);
          }) : _isPlaceholder(b3) && _isPlaceholder(c3) ? _curry2(function(_b, _c) {
            return fn2(a3, _b, _c);
          }) : _isPlaceholder(a3) ? _curry1(function(_a2) {
            return fn2(_a2, b3, c3);
          }) : _isPlaceholder(b3) ? _curry1(function(_b) {
            return fn2(a3, _b, c3);
          }) : _isPlaceholder(c3) ? _curry1(function(_c) {
            return fn2(a3, b3, _c);
          }) : fn2(a3, b3, c3);
      }
    };
  }

  // node_modules/ramda/es/internal/_isArray.js
  var isArray_default = Array.isArray || function _isArray(val) {
    return val != null && val.length >= 0 && Object.prototype.toString.call(val) === "[object Array]";
  };

  // node_modules/ramda/es/internal/_isTransformer.js
  function _isTransformer(obj) {
    return obj != null && typeof obj["@@transducer/step"] === "function";
  }

  // node_modules/ramda/es/internal/_dispatchable.js
  function _dispatchable(methodNames, transducerCreator, fn2) {
    return function() {
      if (arguments.length === 0) {
        return fn2();
      }
      var obj = arguments[arguments.length - 1];
      if (!isArray_default(obj)) {
        var idx = 0;
        while (idx < methodNames.length) {
          if (typeof obj[methodNames[idx]] === "function") {
            return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));
          }
          idx += 1;
        }
        if (_isTransformer(obj)) {
          var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));
          return transducer(obj);
        }
      }
      return fn2.apply(this, arguments);
    };
  }

  // node_modules/ramda/es/internal/_reduced.js
  function _reduced(x2) {
    return x2 && x2["@@transducer/reduced"] ? x2 : {
      "@@transducer/value": x2,
      "@@transducer/reduced": true
    };
  }

  // node_modules/ramda/es/internal/_xfBase.js
  var xfBase_default = {
    init: function() {
      return this.xf["@@transducer/init"]();
    },
    result: function(result) {
      return this.xf["@@transducer/result"](result);
    }
  };

  // node_modules/ramda/es/internal/_map.js
  function _map(fn2, functor) {
    var idx = 0;
    var len = functor.length;
    var result = Array(len);
    while (idx < len) {
      result[idx] = fn2(functor[idx]);
      idx += 1;
    }
    return result;
  }

  // node_modules/ramda/es/internal/_isString.js
  function _isString(x2) {
    return Object.prototype.toString.call(x2) === "[object String]";
  }

  // node_modules/ramda/es/internal/_isArrayLike.js
  var _isArrayLike = /* @__PURE__ */ _curry1(function isArrayLike(x2) {
    if (isArray_default(x2)) {
      return true;
    }
    if (!x2) {
      return false;
    }
    if (typeof x2 !== "object") {
      return false;
    }
    if (_isString(x2)) {
      return false;
    }
    if (x2.length === 0) {
      return true;
    }
    if (x2.length > 0) {
      return x2.hasOwnProperty(0) && x2.hasOwnProperty(x2.length - 1);
    }
    return false;
  });
  var isArrayLike_default = _isArrayLike;

  // node_modules/ramda/es/internal/_xwrap.js
  var XWrap = /* @__PURE__ */ function() {
    function XWrap2(fn2) {
      this.f = fn2;
    }
    XWrap2.prototype["@@transducer/init"] = function() {
      throw new Error("init not implemented on XWrap");
    };
    XWrap2.prototype["@@transducer/result"] = function(acc) {
      return acc;
    };
    XWrap2.prototype["@@transducer/step"] = function(acc, x2) {
      return this.f(acc, x2);
    };
    return XWrap2;
  }();
  function _xwrap(fn2) {
    return new XWrap(fn2);
  }

  // node_modules/ramda/es/bind.js
  var bind = /* @__PURE__ */ _curry2(function bind2(fn2, thisObj) {
    return _arity(fn2.length, function() {
      return fn2.apply(thisObj, arguments);
    });
  });
  var bind_default = bind;

  // node_modules/ramda/es/internal/_reduce.js
  function _arrayReduce(xf, acc, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      acc = xf["@@transducer/step"](acc, list[idx]);
      if (acc && acc["@@transducer/reduced"]) {
        acc = acc["@@transducer/value"];
        break;
      }
      idx += 1;
    }
    return xf["@@transducer/result"](acc);
  }
  function _iterableReduce(xf, acc, iter) {
    var step = iter.next();
    while (!step.done) {
      acc = xf["@@transducer/step"](acc, step.value);
      if (acc && acc["@@transducer/reduced"]) {
        acc = acc["@@transducer/value"];
        break;
      }
      step = iter.next();
    }
    return xf["@@transducer/result"](acc);
  }
  function _methodReduce(xf, acc, obj, methodName) {
    return xf["@@transducer/result"](obj[methodName](bind_default(xf["@@transducer/step"], xf), acc));
  }
  var symIterator = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
  function _reduce(fn2, acc, list) {
    if (typeof fn2 === "function") {
      fn2 = _xwrap(fn2);
    }
    if (isArrayLike_default(list)) {
      return _arrayReduce(fn2, acc, list);
    }
    if (typeof list["fantasy-land/reduce"] === "function") {
      return _methodReduce(fn2, acc, list, "fantasy-land/reduce");
    }
    if (list[symIterator] != null) {
      return _iterableReduce(fn2, acc, list[symIterator]());
    }
    if (typeof list.next === "function") {
      return _iterableReduce(fn2, acc, list);
    }
    if (typeof list.reduce === "function") {
      return _methodReduce(fn2, acc, list, "reduce");
    }
    throw new TypeError("reduce: list must be array or iterable");
  }

  // node_modules/ramda/es/internal/_xmap.js
  var XMap = /* @__PURE__ */ function() {
    function XMap2(f3, xf) {
      this.xf = xf;
      this.f = f3;
    }
    XMap2.prototype["@@transducer/init"] = xfBase_default.init;
    XMap2.prototype["@@transducer/result"] = xfBase_default.result;
    XMap2.prototype["@@transducer/step"] = function(result, input) {
      return this.xf["@@transducer/step"](result, this.f(input));
    };
    return XMap2;
  }();
  var _xmap = /* @__PURE__ */ _curry2(function _xmap2(f3, xf) {
    return new XMap(f3, xf);
  });
  var xmap_default = _xmap;

  // node_modules/ramda/es/internal/_has.js
  function _has(prop3, obj) {
    return Object.prototype.hasOwnProperty.call(obj, prop3);
  }

  // node_modules/ramda/es/internal/_isArguments.js
  var toString = Object.prototype.toString;
  var _isArguments = /* @__PURE__ */ function() {
    return toString.call(arguments) === "[object Arguments]" ? function _isArguments2(x2) {
      return toString.call(x2) === "[object Arguments]";
    } : function _isArguments2(x2) {
      return _has("callee", x2);
    };
  }();
  var isArguments_default = _isArguments;

  // node_modules/ramda/es/keys.js
  var hasEnumBug = !/* @__PURE__ */ {
    toString: null
  }.propertyIsEnumerable("toString");
  var nonEnumerableProps = ["constructor", "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];
  var hasArgsEnumBug = /* @__PURE__ */ function() {
    "use strict";
    return arguments.propertyIsEnumerable("length");
  }();
  var contains = function contains2(list, item) {
    var idx = 0;
    while (idx < list.length) {
      if (list[idx] === item) {
        return true;
      }
      idx += 1;
    }
    return false;
  };
  var keys = typeof Object.keys === "function" && !hasArgsEnumBug ? /* @__PURE__ */ _curry1(function keys2(obj) {
    return Object(obj) !== obj ? [] : Object.keys(obj);
  }) : /* @__PURE__ */ _curry1(function keys3(obj) {
    if (Object(obj) !== obj) {
      return [];
    }
    var prop3, nIdx;
    var ks = [];
    var checkArgsLength = hasArgsEnumBug && isArguments_default(obj);
    for (prop3 in obj) {
      if (_has(prop3, obj) && (!checkArgsLength || prop3 !== "length")) {
        ks[ks.length] = prop3;
      }
    }
    if (hasEnumBug) {
      nIdx = nonEnumerableProps.length - 1;
      while (nIdx >= 0) {
        prop3 = nonEnumerableProps[nIdx];
        if (_has(prop3, obj) && !contains(ks, prop3)) {
          ks[ks.length] = prop3;
        }
        nIdx -= 1;
      }
    }
    return ks;
  });
  var keys_default = keys;

  // node_modules/ramda/es/map.js
  var map = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["fantasy-land/map", "map"], xmap_default, function map2(fn2, functor) {
    switch (Object.prototype.toString.call(functor)) {
      case "[object Function]":
        return curryN_default(functor.length, function() {
          return fn2.call(this, functor.apply(this, arguments));
        });
      case "[object Object]":
        return _reduce(function(acc, key) {
          acc[key] = fn2(functor[key]);
          return acc;
        }, {}, keys_default(functor));
      default:
        return _map(fn2, functor);
    }
  }));
  var map_default = map;

  // node_modules/ramda/es/internal/_isInteger.js
  var isInteger_default = Number.isInteger || function _isInteger(n3) {
    return n3 << 0 === n3;
  };

  // node_modules/ramda/es/nth.js
  var nth = /* @__PURE__ */ _curry2(function nth2(offset, list) {
    var idx = offset < 0 ? list.length + offset : offset;
    return _isString(list) ? list.charAt(idx) : list[idx];
  });
  var nth_default = nth;

  // node_modules/ramda/es/prop.js
  var prop = /* @__PURE__ */ _curry2(function prop2(p3, obj) {
    if (obj == null) {
      return;
    }
    return isInteger_default(p3) ? nth_default(p3, obj) : obj[p3];
  });
  var prop_default = prop;

  // node_modules/ramda/es/reduce.js
  var reduce = /* @__PURE__ */ _curry3(_reduce);
  var reduce_default = reduce;

  // node_modules/ramda/es/always.js
  var always = /* @__PURE__ */ _curry1(function always2(val) {
    return function() {
      return val;
    };
  });
  var always_default = always;

  // node_modules/ramda/es/internal/_xany.js
  var XAny = /* @__PURE__ */ function() {
    function XAny2(f3, xf) {
      this.xf = xf;
      this.f = f3;
      this.any = false;
    }
    XAny2.prototype["@@transducer/init"] = xfBase_default.init;
    XAny2.prototype["@@transducer/result"] = function(result) {
      if (!this.any) {
        result = this.xf["@@transducer/step"](result, false);
      }
      return this.xf["@@transducer/result"](result);
    };
    XAny2.prototype["@@transducer/step"] = function(result, input) {
      if (this.f(input)) {
        this.any = true;
        result = _reduced(this.xf["@@transducer/step"](result, true));
      }
      return result;
    };
    return XAny2;
  }();
  var _xany = /* @__PURE__ */ _curry2(function _xany2(f3, xf) {
    return new XAny(f3, xf);
  });
  var xany_default = _xany;

  // node_modules/ramda/es/any.js
  var any = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["any"], xany_default, function any2(fn2, list) {
    var idx = 0;
    while (idx < list.length) {
      if (fn2(list[idx])) {
        return true;
      }
      idx += 1;
    }
    return false;
  }));
  var any_default = any;

  // node_modules/ramda/es/internal/_assoc.js
  function _assoc(prop3, val, obj) {
    if (isInteger_default(prop3) && isArray_default(obj)) {
      var arr = [].concat(obj);
      arr[prop3] = val;
      return arr;
    }
    var result = {};
    for (var p3 in obj) {
      result[p3] = obj[p3];
    }
    result[prop3] = val;
    return result;
  }

  // node_modules/ramda/es/isNil.js
  var isNil = /* @__PURE__ */ _curry1(function isNil2(x2) {
    return x2 == null;
  });
  var isNil_default = isNil;

  // node_modules/ramda/es/assocPath.js
  var assocPath = /* @__PURE__ */ _curry3(function assocPath2(path3, val, obj) {
    if (path3.length === 0) {
      return val;
    }
    var idx = path3[0];
    if (path3.length > 1) {
      var nextObj = !isNil_default(obj) && _has(idx, obj) ? obj[idx] : isInteger_default(path3[1]) ? [] : {};
      val = assocPath2(Array.prototype.slice.call(path3, 1), val, nextObj);
    }
    return _assoc(idx, val, obj);
  });
  var assocPath_default = assocPath;

  // node_modules/ramda/es/assoc.js
  var assoc = /* @__PURE__ */ _curry3(function assoc2(prop3, val, obj) {
    return assocPath_default([prop3], val, obj);
  });
  var assoc_default = assoc;

  // node_modules/ramda/es/internal/_isFunction.js
  function _isFunction(x2) {
    var type3 = Object.prototype.toString.call(x2);
    return type3 === "[object Function]" || type3 === "[object AsyncFunction]" || type3 === "[object GeneratorFunction]" || type3 === "[object AsyncGeneratorFunction]";
  }

  // node_modules/ramda/es/internal/_makeFlat.js
  function _makeFlat(recursive) {
    return function flatt(list) {
      var value, jlen, j2;
      var result = [];
      var idx = 0;
      var ilen = list.length;
      while (idx < ilen) {
        if (isArrayLike_default(list[idx])) {
          value = recursive ? flatt(list[idx]) : list[idx];
          j2 = 0;
          jlen = value.length;
          while (j2 < jlen) {
            result[result.length] = value[j2];
            j2 += 1;
          }
        } else {
          result[result.length] = list[idx];
        }
        idx += 1;
      }
      return result;
    };
  }

  // node_modules/ramda/es/clamp.js
  var clamp = /* @__PURE__ */ _curry3(function clamp2(min, max, value) {
    if (min > max) {
      throw new Error("min must not be greater than max in clamp(min, max, value)");
    }
    return value < min ? min : value > max ? max : value;
  });
  var clamp_default = clamp;

  // node_modules/ramda/es/type.js
  var type = /* @__PURE__ */ _curry1(function type2(val) {
    return val === null ? "Null" : val === void 0 ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
  });
  var type_default = type;

  // node_modules/ramda/es/not.js
  var not = /* @__PURE__ */ _curry1(function not2(a3) {
    return !a3;
  });
  var not_default = not;

  // node_modules/ramda/es/internal/_pipe.js
  function _pipe(f3, g3) {
    return function() {
      return g3.call(this, f3.apply(this, arguments));
    };
  }

  // node_modules/ramda/es/internal/_checkForMethod.js
  function _checkForMethod(methodname, fn2) {
    return function() {
      var length3 = arguments.length;
      if (length3 === 0) {
        return fn2();
      }
      var obj = arguments[length3 - 1];
      return isArray_default(obj) || typeof obj[methodname] !== "function" ? fn2.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length3 - 1));
    };
  }

  // node_modules/ramda/es/slice.js
  var slice = /* @__PURE__ */ _curry3(/* @__PURE__ */ _checkForMethod("slice", function slice2(fromIndex, toIndex, list) {
    return Array.prototype.slice.call(list, fromIndex, toIndex);
  }));
  var slice_default = slice;

  // node_modules/ramda/es/tail.js
  var tail = /* @__PURE__ */ _curry1(/* @__PURE__ */ _checkForMethod("tail", /* @__PURE__ */ slice_default(1, Infinity)));
  var tail_default = tail;

  // node_modules/ramda/es/pipe.js
  function pipe() {
    if (arguments.length === 0) {
      throw new Error("pipe requires at least one argument");
    }
    return _arity(arguments[0].length, reduce_default(_pipe, arguments[0], tail_default(arguments)));
  }

  // node_modules/ramda/es/reverse.js
  var reverse = /* @__PURE__ */ _curry1(function reverse2(list) {
    return _isString(list) ? list.split("").reverse().join("") : Array.prototype.slice.call(list, 0).reverse();
  });
  var reverse_default = reverse;

  // node_modules/ramda/es/head.js
  var head = /* @__PURE__ */ nth_default(0);
  var head_default = head;

  // node_modules/ramda/es/internal/_arrayFromIterator.js
  function _arrayFromIterator(iter) {
    var list = [];
    var next;
    while (!(next = iter.next()).done) {
      list.push(next.value);
    }
    return list;
  }

  // node_modules/ramda/es/internal/_includesWith.js
  function _includesWith(pred, x2, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      if (pred(x2, list[idx])) {
        return true;
      }
      idx += 1;
    }
    return false;
  }

  // node_modules/ramda/es/internal/_functionName.js
  function _functionName(f3) {
    var match = String(f3).match(/^function (\w*)/);
    return match == null ? "" : match[1];
  }

  // node_modules/ramda/es/internal/_objectIs.js
  function _objectIs(a3, b3) {
    if (a3 === b3) {
      return a3 !== 0 || 1 / a3 === 1 / b3;
    } else {
      return a3 !== a3 && b3 !== b3;
    }
  }
  var objectIs_default = typeof Object.is === "function" ? Object.is : _objectIs;

  // node_modules/ramda/es/internal/_equals.js
  function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
    var a3 = _arrayFromIterator(aIterator);
    var b3 = _arrayFromIterator(bIterator);
    function eq(_a2, _b) {
      return _equals(_a2, _b, stackA.slice(), stackB.slice());
    }
    return !_includesWith(function(b4, aItem) {
      return !_includesWith(eq, aItem, b4);
    }, b3, a3);
  }
  function _equals(a3, b3, stackA, stackB) {
    if (objectIs_default(a3, b3)) {
      return true;
    }
    var typeA = type_default(a3);
    if (typeA !== type_default(b3)) {
      return false;
    }
    if (typeof a3["fantasy-land/equals"] === "function" || typeof b3["fantasy-land/equals"] === "function") {
      return typeof a3["fantasy-land/equals"] === "function" && a3["fantasy-land/equals"](b3) && typeof b3["fantasy-land/equals"] === "function" && b3["fantasy-land/equals"](a3);
    }
    if (typeof a3.equals === "function" || typeof b3.equals === "function") {
      return typeof a3.equals === "function" && a3.equals(b3) && typeof b3.equals === "function" && b3.equals(a3);
    }
    switch (typeA) {
      case "Arguments":
      case "Array":
      case "Object":
        if (typeof a3.constructor === "function" && _functionName(a3.constructor) === "Promise") {
          return a3 === b3;
        }
        break;
      case "Boolean":
      case "Number":
      case "String":
        if (!(typeof a3 === typeof b3 && objectIs_default(a3.valueOf(), b3.valueOf()))) {
          return false;
        }
        break;
      case "Date":
        if (!objectIs_default(a3.valueOf(), b3.valueOf())) {
          return false;
        }
        break;
      case "Error":
        return a3.name === b3.name && a3.message === b3.message;
      case "RegExp":
        if (!(a3.source === b3.source && a3.global === b3.global && a3.ignoreCase === b3.ignoreCase && a3.multiline === b3.multiline && a3.sticky === b3.sticky && a3.unicode === b3.unicode)) {
          return false;
        }
        break;
    }
    var idx = stackA.length - 1;
    while (idx >= 0) {
      if (stackA[idx] === a3) {
        return stackB[idx] === b3;
      }
      idx -= 1;
    }
    switch (typeA) {
      case "Map":
        if (a3.size !== b3.size) {
          return false;
        }
        return _uniqContentEquals(a3.entries(), b3.entries(), stackA.concat([a3]), stackB.concat([b3]));
      case "Set":
        if (a3.size !== b3.size) {
          return false;
        }
        return _uniqContentEquals(a3.values(), b3.values(), stackA.concat([a3]), stackB.concat([b3]));
      case "Arguments":
      case "Array":
      case "Object":
      case "Boolean":
      case "Number":
      case "String":
      case "Date":
      case "Error":
      case "RegExp":
      case "Int8Array":
      case "Uint8Array":
      case "Uint8ClampedArray":
      case "Int16Array":
      case "Uint16Array":
      case "Int32Array":
      case "Uint32Array":
      case "Float32Array":
      case "Float64Array":
      case "ArrayBuffer":
        break;
      default:
        return false;
    }
    var keysA = keys_default(a3);
    if (keysA.length !== keys_default(b3).length) {
      return false;
    }
    var extendedStackA = stackA.concat([a3]);
    var extendedStackB = stackB.concat([b3]);
    idx = keysA.length - 1;
    while (idx >= 0) {
      var key = keysA[idx];
      if (!(_has(key, b3) && _equals(b3[key], a3[key], extendedStackA, extendedStackB))) {
        return false;
      }
      idx -= 1;
    }
    return true;
  }

  // node_modules/ramda/es/equals.js
  var equals = /* @__PURE__ */ _curry2(function equals2(a3, b3) {
    return _equals(a3, b3, [], []);
  });
  var equals_default = equals;

  // node_modules/ramda/es/internal/_indexOf.js
  function _indexOf(list, a3, idx) {
    var inf, item;
    if (typeof list.indexOf === "function") {
      switch (typeof a3) {
        case "number":
          if (a3 === 0) {
            inf = 1 / a3;
            while (idx < list.length) {
              item = list[idx];
              if (item === 0 && 1 / item === inf) {
                return idx;
              }
              idx += 1;
            }
            return -1;
          } else if (a3 !== a3) {
            while (idx < list.length) {
              item = list[idx];
              if (typeof item === "number" && item !== item) {
                return idx;
              }
              idx += 1;
            }
            return -1;
          }
          return list.indexOf(a3, idx);
        case "string":
        case "boolean":
        case "function":
        case "undefined":
          return list.indexOf(a3, idx);
        case "object":
          if (a3 === null) {
            return list.indexOf(a3, idx);
          }
      }
    }
    while (idx < list.length) {
      if (equals_default(list[idx], a3)) {
        return idx;
      }
      idx += 1;
    }
    return -1;
  }

  // node_modules/ramda/es/internal/_includes.js
  function _includes(a3, list) {
    return _indexOf(list, a3, 0) >= 0;
  }

  // node_modules/ramda/es/internal/_quote.js
  function _quote(s3) {
    var escaped = s3.replace(/\\/g, "\\\\").replace(/[\b]/g, "\\b").replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
    return '"' + escaped.replace(/"/g, '\\"') + '"';
  }

  // node_modules/ramda/es/internal/_toISOString.js
  var pad = function pad2(n3) {
    return (n3 < 10 ? "0" : "") + n3;
  };
  var _toISOString = typeof Date.prototype.toISOString === "function" ? function _toISOString2(d3) {
    return d3.toISOString();
  } : function _toISOString3(d3) {
    return d3.getUTCFullYear() + "-" + pad(d3.getUTCMonth() + 1) + "-" + pad(d3.getUTCDate()) + "T" + pad(d3.getUTCHours()) + ":" + pad(d3.getUTCMinutes()) + ":" + pad(d3.getUTCSeconds()) + "." + (d3.getUTCMilliseconds() / 1e3).toFixed(3).slice(2, 5) + "Z";
  };
  var toISOString_default = _toISOString;

  // node_modules/ramda/es/internal/_complement.js
  function _complement(f3) {
    return function() {
      return !f3.apply(this, arguments);
    };
  }

  // node_modules/ramda/es/internal/_filter.js
  function _filter(fn2, list) {
    var idx = 0;
    var len = list.length;
    var result = [];
    while (idx < len) {
      if (fn2(list[idx])) {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
    return result;
  }

  // node_modules/ramda/es/internal/_isObject.js
  function _isObject(x2) {
    return Object.prototype.toString.call(x2) === "[object Object]";
  }

  // node_modules/ramda/es/internal/_xfilter.js
  var XFilter = /* @__PURE__ */ function() {
    function XFilter2(f3, xf) {
      this.xf = xf;
      this.f = f3;
    }
    XFilter2.prototype["@@transducer/init"] = xfBase_default.init;
    XFilter2.prototype["@@transducer/result"] = xfBase_default.result;
    XFilter2.prototype["@@transducer/step"] = function(result, input) {
      return this.f(input) ? this.xf["@@transducer/step"](result, input) : result;
    };
    return XFilter2;
  }();
  var _xfilter = /* @__PURE__ */ _curry2(function _xfilter2(f3, xf) {
    return new XFilter(f3, xf);
  });
  var xfilter_default = _xfilter;

  // node_modules/ramda/es/filter.js
  var filter = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["fantasy-land/filter", "filter"], xfilter_default, function(pred, filterable) {
    return _isObject(filterable) ? _reduce(function(acc, key) {
      if (pred(filterable[key])) {
        acc[key] = filterable[key];
      }
      return acc;
    }, {}, keys_default(filterable)) : _filter(pred, filterable);
  }));
  var filter_default = filter;

  // node_modules/ramda/es/reject.js
  var reject = /* @__PURE__ */ _curry2(function reject2(pred, filterable) {
    return filter_default(_complement(pred), filterable);
  });
  var reject_default = reject;

  // node_modules/ramda/es/internal/_toString.js
  function _toString(x2, seen) {
    var recur = function recur2(y3) {
      var xs = seen.concat([x2]);
      return _includes(y3, xs) ? "<Circular>" : _toString(y3, xs);
    };
    var mapPairs = function(obj, keys4) {
      return _map(function(k2) {
        return _quote(k2) + ": " + recur(obj[k2]);
      }, keys4.slice().sort());
    };
    switch (Object.prototype.toString.call(x2)) {
      case "[object Arguments]":
        return "(function() { return arguments; }(" + _map(recur, x2).join(", ") + "))";
      case "[object Array]":
        return "[" + _map(recur, x2).concat(mapPairs(x2, reject_default(function(k2) {
          return /^\d+$/.test(k2);
        }, keys_default(x2)))).join(", ") + "]";
      case "[object Boolean]":
        return typeof x2 === "object" ? "new Boolean(" + recur(x2.valueOf()) + ")" : x2.toString();
      case "[object Date]":
        return "new Date(" + (isNaN(x2.valueOf()) ? recur(NaN) : _quote(toISOString_default(x2))) + ")";
      case "[object Null]":
        return "null";
      case "[object Number]":
        return typeof x2 === "object" ? "new Number(" + recur(x2.valueOf()) + ")" : 1 / x2 === -Infinity ? "-0" : x2.toString(10);
      case "[object String]":
        return typeof x2 === "object" ? "new String(" + recur(x2.valueOf()) + ")" : _quote(x2);
      case "[object Undefined]":
        return "undefined";
      default:
        if (typeof x2.toString === "function") {
          var repr = x2.toString();
          if (repr !== "[object Object]") {
            return repr;
          }
        }
        return "{" + mapPairs(x2, keys_default(x2)).join(", ") + "}";
    }
  }

  // node_modules/ramda/es/toString.js
  var toString2 = /* @__PURE__ */ _curry1(function toString3(val) {
    return _toString(val, []);
  });
  var toString_default = toString2;

  // node_modules/ramda/es/curry.js
  var curry = /* @__PURE__ */ _curry1(function curry2(fn2) {
    return curryN_default(fn2.length, fn2);
  });
  var curry_default = curry;

  // node_modules/ramda/es/defaultTo.js
  var defaultTo = /* @__PURE__ */ _curry2(function defaultTo2(d3, v2) {
    return v2 == null || v2 !== v2 ? d3 : v2;
  });
  var defaultTo_default = defaultTo;

  // node_modules/ramda/es/internal/_xfind.js
  var XFind = /* @__PURE__ */ function() {
    function XFind2(f3, xf) {
      this.xf = xf;
      this.f = f3;
      this.found = false;
    }
    XFind2.prototype["@@transducer/init"] = xfBase_default.init;
    XFind2.prototype["@@transducer/result"] = function(result) {
      if (!this.found) {
        result = this.xf["@@transducer/step"](result, void 0);
      }
      return this.xf["@@transducer/result"](result);
    };
    XFind2.prototype["@@transducer/step"] = function(result, input) {
      if (this.f(input)) {
        this.found = true;
        result = _reduced(this.xf["@@transducer/step"](result, input));
      }
      return result;
    };
    return XFind2;
  }();
  var _xfind = /* @__PURE__ */ _curry2(function _xfind2(f3, xf) {
    return new XFind(f3, xf);
  });
  var xfind_default = _xfind;

  // node_modules/ramda/es/find.js
  var find = /* @__PURE__ */ _curry2(/* @__PURE__ */ _dispatchable(["find"], xfind_default, function find2(fn2, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      if (fn2(list[idx])) {
        return list[idx];
      }
      idx += 1;
    }
  }));
  var find_default = find;

  // node_modules/ramda/es/flatten.js
  var flatten = /* @__PURE__ */ _curry1(/* @__PURE__ */ _makeFlat(true));
  var flatten_default = flatten;

  // node_modules/ramda/es/includes.js
  var includes = /* @__PURE__ */ _curry2(_includes);
  var includes_default = includes;

  // node_modules/ramda/es/invoker.js
  var invoker = /* @__PURE__ */ _curry2(function invoker2(arity, method) {
    return curryN_default(arity + 1, function() {
      var target = arguments[arity];
      if (target != null && _isFunction(target[method])) {
        return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
      }
      throw new TypeError(toString_default(target) + ' does not have a method named "' + method + '"');
    });
  });
  var invoker_default = invoker;

  // node_modules/ramda/es/internal/_isNumber.js
  function _isNumber(x2) {
    return Object.prototype.toString.call(x2) === "[object Number]";
  }

  // node_modules/ramda/es/length.js
  var length = /* @__PURE__ */ _curry1(function length2(list) {
    return list != null && _isNumber(list.length) ? list.length : NaN;
  });
  var length_default = length;

  // node_modules/ramda/es/paths.js
  var paths = /* @__PURE__ */ _curry2(function paths2(pathsArray, obj) {
    return pathsArray.map(function(paths3) {
      var val = obj;
      var idx = 0;
      var p3;
      while (idx < paths3.length) {
        if (val == null) {
          return;
        }
        p3 = paths3[idx];
        val = isInteger_default(p3) ? nth_default(p3, val) : val[p3];
        idx += 1;
      }
      return val;
    });
  });
  var paths_default = paths;

  // node_modules/ramda/es/path.js
  var path = /* @__PURE__ */ _curry2(function path2(pathAr, obj) {
    return paths_default([pathAr], obj)[0];
  });
  var path_default = path;

  // node_modules/ramda/es/internal/_modify.js
  function _modify(prop3, fn2, obj) {
    if (isInteger_default(prop3) && isArray_default(obj)) {
      var arr = [].concat(obj);
      arr[prop3] = fn2(arr[prop3]);
      return arr;
    }
    var result = {};
    for (var p3 in obj) {
      result[p3] = obj[p3];
    }
    result[prop3] = fn2(result[prop3]);
    return result;
  }

  // node_modules/ramda/es/modifyPath.js
  var modifyPath = /* @__PURE__ */ _curry3(function modifyPath2(path3, fn2, object) {
    if (!_isObject(object) && !isArray_default(object) || path3.length === 0) {
      return object;
    }
    var idx = path3[0];
    if (!_has(idx, object)) {
      return object;
    }
    if (path3.length === 1) {
      return _modify(idx, fn2, object);
    }
    var val = modifyPath2(Array.prototype.slice.call(path3, 1), fn2, object[idx]);
    if (val === object[idx]) {
      return object;
    }
    return _assoc(idx, val, object);
  });
  var modifyPath_default = modifyPath;

  // node_modules/ramda/es/modify.js
  var modify = /* @__PURE__ */ _curry3(function modify2(prop3, fn2, object) {
    return modifyPath_default([prop3], fn2, object);
  });
  var modify_default = modify;

  // node_modules/ramda/es/times.js
  var times = /* @__PURE__ */ _curry2(function times2(fn2, n3) {
    var len = Number(n3);
    var idx = 0;
    var list;
    if (len < 0 || isNaN(len)) {
      throw new RangeError("n must be a non-negative number");
    }
    list = new Array(len);
    while (idx < len) {
      list[idx] = fn2(idx);
      idx += 1;
    }
    return list;
  });
  var times_default = times;

  // node_modules/ramda/es/repeat.js
  var repeat = /* @__PURE__ */ _curry2(function repeat2(value, n3) {
    return times_default(always_default(value), n3);
  });
  var repeat_default = repeat;

  // node_modules/ramda/es/sort.js
  var sort = /* @__PURE__ */ _curry2(function sort2(comparator, list) {
    return Array.prototype.slice.call(list, 0).sort(comparator);
  });
  var sort_default = sort;

  // node_modules/ramda/es/split.js
  var split = /* @__PURE__ */ invoker_default(1, "split");
  var split_default = split;

  // node_modules/ramda/es/subtract.js
  var subtract = /* @__PURE__ */ _curry2(function subtract2(a3, b3) {
    return Number(a3) - Number(b3);
  });
  var subtract_default = subtract;

  // node_modules/ramda/es/trim.js
  var hasProtoTrim = typeof String.prototype.trim === "function";

  // util.js
  var unAlias = (str) => {
    return str.replaceAll("[Char]", "String");
  };
  var within = (point, { from, to }) => pointAfterInclusive(point, from) && pointBeforeExclusive(point, to);
  function convertLocation({
    srcSpanEndLine,
    srcSpanEndColumn,
    srcSpanStartColumn,
    srcSpanStartLine
  }) {
    return {
      from: { line: srcSpanStartLine - 1, ch: srcSpanStartColumn - 1 },
      to: { line: srcSpanEndLine - 1, ch: srcSpanEndColumn - 1 }
    };
  }
  var pointBeforeInclusive = (point1, point2) => {
    if (point1.line < point2.line) {
      return true;
    } else if (point1.line === point2.line) {
      return point1.ch <= point2.ch;
    } else {
      return false;
    }
  };
  var pointBeforeExclusive = (point1, point2) => {
    if (point1.line < point2.line) {
      return true;
    } else if (point1.line === point2.line) {
      return point1.ch < point2.ch;
    } else {
      return false;
    }
  };
  var pointAfterInclusive = (point1, point2) => {
    if (point1.line > point2.line) {
      return true;
    } else if (point1.line === point2.line) {
      return point1.ch >= point2.ch;
    } else {
      return false;
    }
  };
  var doesRangeSurround = (rangeA, rangeB) => {
    return pointBeforeInclusive(rangeA.from, rangeB.from) && pointAfterInclusive(rangeA.to, rangeB.to);
  };
  function drawAnnotations(rangeA, rangeB, reason, step, direction, offset) {
    let color = false;
    if (rangeB.from.line < rangeA.from.line) {
      const [topBox, bottomBox, inbetweenBox, annotationBox] = boxStyles({
        left: rangeB.from.ch,
        top: rangeB.from.line,
        width: rangeB.to.ch - rangeB.from.ch,
        height: 1
      }, {
        left: rangeA.from.ch,
        top: rangeA.from.line,
        width: rangeA.to.ch - rangeA.from.ch,
        height: 1
      }, color, offset);
      return [
        {
          relativeTo: rangeB.from,
          key: "top-line",
          styles: topBox,
          classes: ["absolute", "z-40", "rounded-t-sm", "border-l", "border-t", "border-r"],
          content: { type: "empty" }
        },
        {
          relativeTo: rangeB.from,
          key: "inbetween-line",
          styles: inbetweenBox,
          classes: ["absolute", "z-20", "border-r"],
          content: { type: "empty" }
        },
        {
          relativeTo: rangeA.from,
          key: "bottom-line",
          styles: bottomBox,
          classes: ["absolute", "z-20", "rounded-b-sm", "border-l", "border-b", "border-r"],
          content: { type: "empty" }
        },
        {
          relativeTo: rangeA.from,
          key: "annotation-box",
          styles: annotationBox,
          classes: ["absolute", "text-center", "text-sm", "z-20"],
          content: { type: "annotation", direction, reason, step }
        }
      ];
    } else {
      const [topBox, bottomBox, inbetweenBox, annotationBox] = boxStyles({
        left: rangeA.from.ch,
        top: rangeA.from.line,
        width: rangeA.to.ch - rangeA.from.ch,
        height: 1
      }, {
        left: rangeB.from.ch,
        top: rangeB.from.line,
        width: rangeB.to.ch - rangeB.from.ch,
        height: 1
      }, color, offset);
      return [
        {
          relativeTo: rangeA.from,
          key: "top-line",
          styles: topBox,
          classes: ["absolute", "z-40", "rounded-t-sm", "border-l", "border-t", "border-r"],
          content: { type: "empty" }
        },
        {
          relativeTo: rangeA.from,
          key: "inbetween-line",
          styles: inbetweenBox,
          classes: ["absolute", "z-20", "border-r"],
          content: { type: "empty" }
        },
        {
          relativeTo: rangeB.from,
          key: "bottom-line",
          styles: bottomBox,
          classes: ["absolute", "z-20", "rounded-b-sm", "border-l", "border-b", "border-r"],
          content: { type: "empty" }
        },
        {
          relativeTo: rangeB.from,
          key: "annotation-box",
          styles: annotationBox,
          classes: ["absolute", "text-center", "text-sm", "z-20"],
          content: { type: "annotation", direction, reason, step }
        }
      ];
    }
  }
  function boxStyles(topElem, bottomElem, color, offset) {
    const downwardBarHeight = 0.28;
    const annotationWidth = 18;
    const annotationHeight = 1.25;
    const chWidth = 0.625;
    const chHeight = 1.5;
    const lineColor = "#666666";
    const stepAsideDistance = offset * chWidth + 10;
    const styleTop = {
      background: color ? "var(--color-azure-3)" : "transparent",
      opacity: color ? 0.5 : 1,
      height: `${downwardBarHeight}rem`,
      left: `${topElem.width * chWidth / 2}rem`,
      top: `${-downwardBarHeight}rem`,
      width: `${stepAsideDistance - topElem.left * chWidth - topElem.width * chWidth / 2}rem`,
      borderColor: lineColor
    };
    const styleBottom = {
      background: color ? "var(--color-sky-3)" : "transparent",
      opacity: color ? 0.5 : 1,
      height: `${downwardBarHeight}rem`,
      left: `${bottomElem.width * chWidth / 2}rem`,
      top: `${bottomElem.height * chHeight}rem`,
      width: `${stepAsideDistance - bottomElem.left * chWidth - bottomElem.width * chWidth / 2}rem`,
      borderColor: lineColor
    };
    const styleInbetween = {
      background: color ? "var(--color-violet-3)" : "transparent",
      opacity: color ? 0.5 : 1,
      width: `${stepAsideDistance - topElem.left * chWidth - topElem.width * chWidth / 2}rem`,
      height: `${(bottomElem.top - topElem.top + 1) * chHeight - annotationHeight}rem`,
      top: `${0}rem`,
      left: `${topElem.width * chWidth / 2}rem`,
      borderColor: lineColor
    };
    const styleAnnotation = {
      background: color ? "var(--color-orange-3)" : "transparent",
      opacity: color ? 0.5 : 1,
      width: `${annotationWidth}rem`,
      height: `${annotationHeight}rem`,
      top: `${bottomElem.height * chHeight - annotationHeight}rem`,
      left: `${stepAsideDistance - bottomElem.left * chWidth - annotationWidth / 2}rem`
    };
    return [styleTop, styleBottom, styleInbetween, styleAnnotation];
  }
  var makeParentHighlightB = (range, m2) => {
    return {
      ...range,
      marker: {
        shared: [
          m2,
          "-inset-y-0.5",
          "inset-x-0",
          "border-t",
          "border-b",
          "border-black",
          "z-30"
        ],
        start: ["-left-0.5", "border-l", "rounded-l-sm"],
        end: ["-right-0.5", "border-r", "rounded-r-sm"]
      }
    };
  };
  var makeHighlightB = (range, marker) => {
    return {
      ...range,
      marker: {
        shared: [marker, "inset-0", "border-t", "border-b", "border-black", "z-40"],
        start: ["border-l", "rounded-l-sm"],
        end: ["border-r", "rounded-r-sm"]
      }
    };
  };
  var makeHighlight = (range, marker) => {
    return {
      ...range,
      marker: {
        shared: [marker, "inset-0", "z-0"],
        start: ["rounded-l-sm"],
        end: ["rounded-r-sm"]
      }
    };
  };
  function getRandomInt(max) {
    return Math.floor(Math.random() * max);
  }

  // wrasse/wrasse.js
  var import_xterm = __toESM(require_xterm());
  var import_xterm_addon_fit = __toESM(require_xterm_addon_fit());

  // wrasse/util.js
  var sleep = async (time) => {
    await new Promise((r3) => setTimeout(r3, time));
  };
  var clamp3 = (min, num, max) => Math.max(min, Math.min(num, max));
  var within2 = (min, num, max) => min <= num && num <= max;
  var null_func = () => {
  };
  function* group_n(arr, n3) {
    let out = [];
    for (const el of arr) {
      out.push(el);
      if (out.length == n3) {
        yield out;
        out = [];
      }
    }
    if (out != []) {
      yield out;
    }
  }
  var start_pattern_gen = function* () {
    while (true) {
      const frames = ["\u2598 ", "\u2580 ", "\u259D ", " \u2598", " \u258C", " \u2596", "\u2597 ", "\u2584 ", "\u2596 ", "\u258C "];
      for (const item of frames) {
        yield item;
      }
    }
  };
  function last(array) {
    return array.length == 0 ? void 0 : array[array.length - 1];
  }
  function debounce(func, timeout = 300) {
    let keepGoing = false;
    let running = false;
    let nextArgs = [];
    const debouncedFunc = (...args) => {
      if (running) {
        keepGoing = true;
        nextArgs = args;
        return;
      }
      func.apply(this, args);
      keepGoing = false;
      running = true;
      sleep(timeout).then(() => {
        running = false;
        if (keepGoing) {
          debouncedFunc(...args);
        }
      });
    };
    return debouncedFunc;
  }

  // wrasse/ansiEscapes.js
  var ESC = "\x1B[";
  var OSC = "\x1B]";
  var BEL = "\x07";
  var SEP = ";";
  var isTerminalApp = false;
  var ansiEscapes = {};
  ansiEscapes.cursorTo = (x2, y3) => {
    if (typeof x2 !== "number") {
      throw new TypeError("The `x` argument is required");
    }
    if (typeof y3 !== "number") {
      return ESC + (x2 + 1) + "G";
    }
    return ESC + (y3 + 1) + ";" + (x2 + 1) + "H";
  };
  ansiEscapes.cursorMove = (x2, y3) => {
    if (typeof x2 !== "number") {
      throw new TypeError("The `x` argument is required");
    }
    let returnValue = "";
    if (x2 < 0) {
      returnValue += ESC + -x2 + "D";
    } else if (x2 > 0) {
      returnValue += ESC + x2 + "C";
    }
    if (y3 < 0) {
      returnValue += ESC + -y3 + "A";
    } else if (y3 > 0) {
      returnValue += ESC + y3 + "B";
    }
    return returnValue;
  };
  ansiEscapes.cursorUp = (count = 1) => ESC + count + "A";
  ansiEscapes.cursorDown = (count = 1) => ESC + count + "B";
  ansiEscapes.cursorForward = (count = 1) => ESC + count + "C";
  ansiEscapes.cursorBackward = (count = 1) => ESC + count + "D";
  ansiEscapes.cursorLeft = ESC + "G";
  ansiEscapes.cursorSavePosition = isTerminalApp ? "\x1B7" : ESC + "s";
  ansiEscapes.cursorRestorePosition = isTerminalApp ? "\x1B8" : ESC + "u";
  ansiEscapes.cursorGetPosition = ESC + "6n";
  ansiEscapes.cursorNextLine = ESC + "E";
  ansiEscapes.cursorPrevLine = ESC + "F";
  ansiEscapes.cursorHide = ESC + "?25l";
  ansiEscapes.cursorShow = ESC + "?25h";
  ansiEscapes.eraseLines = (count) => {
    let clear = "";
    for (let i3 = 0; i3 < count; i3++) {
      clear += ansiEscapes.eraseLine + (i3 < count - 1 ? ansiEscapes.cursorUp() : "");
    }
    if (count) {
      clear += ansiEscapes.cursorLeft;
    }
    return clear;
  };
  ansiEscapes.eraseEndLine = ESC + "K";
  ansiEscapes.eraseStartLine = ESC + "1K";
  ansiEscapes.eraseLine = ESC + "2K";
  ansiEscapes.eraseDown = ESC + "J";
  ansiEscapes.eraseUp = ESC + "1J";
  ansiEscapes.eraseScreen = ESC + "2J";
  ansiEscapes.scrollUp = ESC + "S";
  ansiEscapes.scrollDown = ESC + "T";
  ansiEscapes.clearScreen = "\x1Bc";
  ansiEscapes.beep = BEL;
  ansiEscapes.link = (text, url) => {
    return [
      OSC,
      "8",
      SEP,
      SEP,
      url,
      BEL,
      text,
      OSC,
      "8",
      SEP,
      SEP,
      BEL
    ].join("");
  };
  ansiEscapes.image = (buffer, options = {}) => {
    let returnValue = `${OSC}1337;File=inline=1`;
    if (options.width) {
      returnValue += `;width=${options.width}`;
    }
    if (options.height) {
      returnValue += `;height=${options.height}`;
    }
    if (options.preserveAspectRatio === false) {
      returnValue += ";preserveAspectRatio=0";
    }
    return returnValue + ":" + buffer.toString("base64") + BEL;
  };
  ansiEscapes.insertLine = (number) => {
    return ESC + number + "L";
  };
  ansiEscapes.deleteLine = (number) => {
    return ESC + number + "M";
  };
  ansiEscapes.cursorRow = (row) => {
    return ESC + row + "d";
  };
  ansiEscapes.cursorPos = (row, col) => {
    return ESC + row + SEP + col + "d";
  };
  ansiEscapes.colouredText = (fg_col, bg_col, text) => {
    let fg = { r: 0, g: 0, b: 0, ...fg_col };
    let bg = { r: 0, g: 0, b: 0, ...bg_col };
    return ESC + "38;2" + SEP + fg.r + SEP + fg.g + SEP + fg.b + "m" + ESC + "48;2" + SEP + bg.r + SEP + bg.g + SEP + bg.b + "m" + text + ESC + "39m" + ESC + "49m";
  };
  ansiEscapes.colourSeq = (col, isFG) => {
    isFG ??= false;
    let c3 = { r: 0, g: 0, b: 0, ...col };
    return ESC + `${isFG ? "38" : "48"};2` + SEP + c3.r + SEP + c3.g + SEP + c3.b + "m";
  };
  var _a;
  ansiEscapes.Colour = (_a = class {
    constructor({ r: r3, g: g3, b: b3 }) {
      this.r = r3 ?? 0;
      this.g = g3 ?? 0;
      this.b = b3 ?? 0;
    }
    mul(multiplier) {
      return {
        r: Math.round(clamp3(0, this.r * multiplier, 255)),
        g: Math.round(clamp3(0, this.g * multiplier, 255)),
        b: Math.round(clamp3(0, this.b * multiplier, 255))
      };
    }
  }, __publicField(_a, "Red", new _a({ r: 255 })), __publicField(_a, "Blue", new _a({ b: 255 })), __publicField(_a, "Green", new _a({ g: 255 })), __publicField(_a, "Yellow", new _a({ r: 236, g: 232, b: 26 })), __publicField(_a, "DarkGrey", new _a({ r: 50, g: 50, b: 50 })), __publicField(_a, "LtDkGrey", new _a({ r: 75, g: 75, b: 75 })), __publicField(_a, "Grey", new _a({ r: 128, g: 128, b: 128 })), __publicField(_a, "LightGrey", new _a({ r: 190, g: 190, b: 190 })), __publicField(_a, "White", new _a({ r: 255, g: 255, b: 255 })), _a);
  var ansiEscapes_default = ansiEscapes;

  // wrasse/wrasseGHC.js
  var termMap = {
    "infinite type": `Infinite Type
    
    A type is constructed using itself.
    This is not possible as type checking
    must end at a concrete type.`,
    "Ambiguous occurrence": `Ambiguous occurrence
    
    The compiler cannot tell which of
    the mentioned terms is the one that
    you want to use`
  };
  var wrasseGHC = {
    regex: {
      keyword: new RegExp(Object.keys(termMap).map((x2) => `(${x2})`).join("|"), "gi"),
      symbol: /‘(?<symbol>[a-zA-Z.0-9]+)’/g,
      location: /generated\/Infile.hs:(?<line>[0-9]+)(?:\-(?<lineEnd>[0-9]+))?:(?<colStart>[0-9]+)(?:\-(?<colEnd>[0-9]+))?/g,
      ambiguous: /(?:^(?:either|or) )‘(?<namespace>([a-zA-Z.0-9]+\.)+)(?<symbol>[a-zA-Z.0-9]+)’/g,
      error: /\[(?<code>GHC-[0-9]+)\]/g,
      codeCommit: /\[\[commit\]\]/g
    },
    map: termMap
  };
  var wrasseGHC_default = wrasseGHC;

  // wrasse/terminalWindows.js
  String.prototype.splice = function(index2, count, add) {
    if (index2 < 0) {
      index2 = this.length + index2;
      if (index2 < 0) {
        index2 = 0;
      }
    }
    return this.slice(0, index2) + (add || "") + this.slice(index2 + count);
  };
  var _Link = class {
    constructor(window2, range, funcs, colour) {
      this.window = window2;
      this.range = {
        start: { x: 0, y: 0, ...range.start },
        end: { x: 0, y: 0, ...range.end }
      };
      this.colour = colour ?? ansiEscapes_default.Colour.Red;
      this.funcs = {
        enter: (link) => {
          link.setHighlight(_Link.albedo.hover);
          funcs?.enter?.(link);
        },
        leave: (link) => {
          link.setHighlight(_Link.albedo.unlit);
          funcs?.leave?.(link);
        },
        click: (link) => {
          link.setHighlight(_Link.albedo.click);
          funcs?.click?.(link);
        }
      };
      this.active = false;
      this.highlight = { fg: {}, bg: {}, resetFG: {}, resetBG: {} };
      this.setupHighlight();
    }
    setupHighlight() {
      const [fg, bg, resetFG, resetBG] = this.window.write(ansiEscapes_default.cursorSavePosition + ansiEscapes_default.cursorTo(this.range.start.x, this.range.start.y) + ansiEscapes_default.colouredText(ansiEscapes_default.Colour.White, this.colour.mul(_Link.albedo.unlit), "|").split("|").join(ansiEscapes_default.cursorTo(this.range.end.x, this.range.end.y)) + ansiEscapes_default.cursorRestorePosition);
      this.highlight = { fg, bg, resetFG, resetBG };
    }
    setHighlight(multiplier) {
      this.highlight.bg.seq = ansiEscapes_default.colourSeq(this.colour.mul(multiplier), false);
    }
  };
  var Link = _Link;
  __publicField(Link, "albedo", {
    click: 1,
    hover: 0.6,
    unlit: 0.3
  });
  var _Window = class {
    constructor(terminal, x2, y3, width, height, options) {
      this.terminal = terminal;
      this.x = Math.ceil(x2);
      this.y = Math.ceil(y3);
      this.width = Math.floor(width);
      this.height = Math.floor(height);
      this.line = 0;
      this.scroll = 0;
      this.content = [{ text: "", esc: [] }];
      this.cursor = { x: 0, y: 0, saved: { x: 0, y: 0 } };
      options = { movable: false, scrollable: true, resizable: false, softwrap: false, ...options };
      this.movable = options.movable;
      this.scrollable = options.scrollable;
      this.resizable = options.resizable;
      this.softwrap = options.softwrap;
      this.links = [];
      this.active = false;
      this.softLength = 0;
      _Window.setup();
    }
    static setup() {
      if (_Window.drawReq.setup)
        return;
      _Window.drawReq.setup = true;
      _Window.setupEvent("wheel", "onWheel");
      _Window.setupEvent("mousemove", "onMouseMove");
      _Window.setupEvent("mouseout", "onMouseMove");
      _Window.setupEvent("mousedown", "onClick");
      _Window.setupEvent("mouseup", "onMouseMove");
      (async () => {
        while (true) {
          if (_Window.drawReq.request) {
            wrasse_default.window.draw();
            wrasse_default.perm.windows.forEach((x2) => x2.draw());
            _Window.drawReq.request = false;
            _Window.drawReq.callbacks.forEach((x2) => x2());
            _Window.drawReq.callbacks = [];
          }
          await sleep(1);
        }
      })();
    }
    static setupEvent(eventType, eventFunc) {
      wrasse_default.html.terminal.addEventListener(eventType, (event) => {
        for (let i3 = wrasse_default.perm.windows.length - 1; i3 >= 0; i3--) {
          if (wrasse_default.perm.windows[i3][eventFunc](event))
            return;
        }
        wrasse_default.window[eventFunc](event);
      }, {
        capture: true,
        passive: false
      });
    }
    onWheel(event) {
      if (!this.scrollable || !this.active)
        return false;
      const dir = Math.sign(event.deltaY);
      if (event.ctrlKey) {
        this.move(dir, 0, true);
      } else if (event.altKey) {
        this.move(0, dir, true);
      } else if (event.shiftKey) {
        const textWidth = this.content.reduce((acc, curr) => Math.max(acc, curr.text.length), 0);
        const dirX = dir * clamp3(1, Math.round(Math.pow(textWidth / this.width, 1.3)), Math.floor(this.width * 0.7));
        this.scroll = clamp3(0, this.scroll + dirX, textWidth - this.width);
      } else {
        const dirY = dir * clamp3(1, Math.round(this.content.length / this.height), Math.floor(this.height * 0.7));
        this.line = clamp3(0, this.line + dirY, Math.max(this.softLength, this.content.length) - this.height);
      }
      this.onMouseMove(event);
      this.requestDraw();
      return true;
    }
    onMouseMove(event) {
      this.active = this.mouseWithin(event.offsetX, event.offsetY);
      if (!this.active)
        return false;
      let { x: x2, y: y3 } = this.mouseToCell(event.offsetX, event.offsetY);
      x2 += this.scroll;
      y3 += this.line;
      let activeLink = this.links.filter((curr) => within2(curr.range.start.x, x2, curr.range.end.x) && within2(curr.range.start.y, y3, curr.range.end.y)).sort((a3, b3) => b3.range.start.x - a3.range.start.x)[0];
      if (activeLink?.active === false) {
        activeLink.funcs.enter(activeLink);
        activeLink.active = true;
        this.requestDraw();
      }
      this.links.filter((curr) => curr.active).filter((x3) => x3 != activeLink).forEach((x3) => {
        x3.funcs.leave(x3);
        x3.active = false;
        this.requestDraw();
      });
      return true;
    }
    onClick(event) {
      if (!this.active)
        return false;
      this.links.filter((x2) => x2.active).forEach((x2) => x2.funcs.click(x2));
      return true;
    }
    addLink(range, funcs, colour) {
      let link = new Link(this, range, funcs, colour);
      this.links.push(link);
      return link;
    }
    reset() {
      this.clean();
      this.content = [{ text: "", esc: [] }];
      this.links = [];
      this.cursor = { x: 0, y: 0, saved: { x: 0, y: 0 } };
      this.line = 0;
      return this;
    }
    write(text, callback) {
      const handleEscape = (text2) => {
        const regex = /\u001B\[(?:(?<nums>(?:[0-9]+;)*)(?<num>(?:[0-9]+)))?(?<char>[a-zA-Z])/gi;
        let cutString = [];
        let anyMatches = false;
        for (const [prefix2, _nums, num, char] of group_n(text2.split(regex), 4)) {
          let cut = { prefix: prefix2, esc: null_func };
          if ((_nums || num || char) === void 0) {
            cutString.push(cut);
            break;
          }
          anyMatches = true;
          let nums = (_nums?.split(";") || []).filter((x2) => x2 !== "");
          nums.push(num);
          switch (char) {
            case "G":
              cut.esc = () => {
                this.cursor = { ...this.cursor, x: num + 1 };
              };
              break;
            case "H":
              cut.esc = () => {
                this.cursor = { ...this.cursor, x: +nums[1] - 1, y: +nums[0] - 1 };
              };
              break;
            case "s":
              cut.esc = () => {
                this.cursor.saved = { x: this.cursor.x, y: this.cursor.y };
              };
              break;
            case "u":
              cut.esc = () => {
                this.cursor = { ...this.cursor, ...this.cursor.saved };
              };
              break;
            case "L":
              cut.esc = () => {
                this.content.splice(this.cursor.y + 1, 0, ...Array.from({ length: +nums[0] }, (_3) => ({ text: "", esc: [] })));
              };
              break;
            case "M":
              cut.esc = () => {
                this.content.splice(this.cursor.y, +num);
              };
              break;
            case "m":
              cut.esc = () => `\x1B[${nums.join(";") + char}`;
              break;
            default:
              console.log(`UNMATCHED ESCAPE SEQUENCE: ESC[${nums.join(";") + char}`);
              cut.esc = () => `\x1B[${nums.join(";") + char}`;
              break;
          }
          cutString.push(cut);
        }
        if (anyMatches == false)
          return [{ prefix: text2, esc: null_func }];
        return cutString;
      };
      let escAdds = [];
      for (const { prefix: prefix2, esc } of handleEscape(text)) {
        let oldCursor = { ...this.cursor };
        for (const line of (prefix2 ?? "").split("\n")) {
          while (this.cursor.y >= this.content.length) {
            this.content.push({ text: "", esc: [] });
          }
          this.content[this.cursor.y].text = this.content[this.cursor.y].text.padEnd(this.cursor.x).splice(this.cursor.x, line.length, line);
          this.content[this.cursor.y].esc = this.content[this.cursor.y].esc.filter(({ pos }) => !within2(1, pos - this.cursor.x, line.length - 2));
          this.cursor.x += line.length;
          oldCursor = { ...this.cursor };
          this.cursor.y += 1;
          this.cursor.x = 0;
        }
        this.cursor = oldCursor;
        let add = esc();
        if (add) {
          let addObj = { pos: this.cursor.x, seq: add };
          escAdds.push(addObj);
          this.content[this.cursor.y].esc.push(addObj);
        }
        while (this.cursor.y >= this.content.length) {
          this.content.push({ text: "", esc: [] });
        }
      }
      this.requestDraw(callback);
      return escAdds;
    }
    writeln(text, callback) {
      return this.write(text + "\n", callback);
    }
    mouseWithin(relX, relY) {
      const { x: x2, y: y3 } = this.mouseToCell(relX, relY);
      return within2(this.x - 0.5, x2, this.x + this.width + 0.5) && within2(this.y - 0.5, y3, this.y + this.height + 0.5);
    }
    mouseToCell(relX, relY) {
      const cellHeight = wrasse_default.html.terminal.offsetHeight / wrasse_default.terminal.rows;
      const cellWidth = wrasse_default.html.terminal.offsetWidth / wrasse_default.terminal.cols;
      return {
        x: Math.floor(relX / cellWidth - 1),
        y: Math.floor(relY / cellHeight - 1)
      };
    }
    resize(width, height, relative, force = false) {
      if (!this.resizable && !force)
        return;
      if (relative) {
        width += this.width;
        height += this.height;
      }
      this.clean();
      this.width = Math.floor(width);
      this.height = Math.floor(height);
      this.move(0, 0, true, true);
      this.requestDraw();
    }
    expand(force = false) {
      this.move(0, 0, false, force);
      this.resize(this.terminal.cols - 2, this.terminal.rows - 2, false, force);
    }
    move(x2, y3, relative, force = false) {
      if (!this.movable && !force)
        return;
      if (relative) {
        x2 += this.x;
        y3 += this.y;
      }
      x2 = clamp3(0, x2, this.terminal.cols - this.width - 2);
      y3 = clamp3(0, y3, this.terminal.rows - this.height - 2);
      this.clean();
      this.x = Math.floor(x2);
      this.y = Math.floor(y3);
      this.requestDraw();
    }
    *lines() {
      for (const line of this.content.slice(this.line, this.line + this.height)) {
        yield {
          text: line.text.slice(this.scroll, this.width + this.scroll),
          esc: line.esc.map(({ pos, seq }) => {
            return { pos: clamp3(0, pos - this.scroll, this.width), seq };
          })
        };
      }
    }
    *linesWrap() {
      const window2 = this;
      function* softlines() {
        let lines = 0;
        for (const line of window2.content.slice(0, window2.line + window2.height)) {
          let range = { start: 0, end: window2.width };
          for (const text of group_n(line.text, window2.width)) {
            yield {
              text: text.join(""),
              esc: line.esc.filter(({ pos }) => within2(range.start, pos, range.end)).map(({ pos }) => pos - range.start)
            };
            range.start = range.end + 1;
            range.end += window2.width;
            lines += 1;
            if (lines > window2.height) {
              break;
            }
          }
        }
      }
      let queue = [];
      for (const x2 of softlines()) {
        queue.push(x2);
      }
      this.softLength = queue.length;
      for (const x2 of queue.slice(this.line, this.line + this.height)) {
        yield x2;
      }
    }
    draw() {
      const textWidth = this.content.reduce((acc, curr) => Math.max(acc, curr.text.length), 0);
      const scrollbarX = {
        low: Math.max(-0.01, this.scroll / textWidth) * this.width,
        hi: Math.min(1, (this.scroll + this.width) / textWidth) * this.width
      };
      scrollbarX.hi = Math.max(Math.ceil(scrollbarX.low) + 0.5, scrollbarX.hi);
      let scrollbarXChar = "\u2585";
      if (scrollbarX.low <= 0 && scrollbarX.hi >= this.height) {
        scrollbarXChar = "\u2550";
      }
      const top = Array.from(Array(this.width).keys()).map((x2) => within2(scrollbarX.low, x2, scrollbarX.hi) ? scrollbarXChar : "\u2550").join("");
      const borderChar = (s3) => ansiEscapes_default.colouredText(ansiEscapes_default.Colour.LtDkGrey, {}, s3);
      let writeString = borderChar(ansiEscapes_default.cursorSavePosition + ansiEscapes_default.cursorTo(this.x, this.y) + `\u2554${top}\u2557` + ansiEscapes_default.cursorTo(this.x, this.y + this.height + 1) + `\u255A${top}\u255D`);
      let lines = this.softwrap ? this.linesWrap() : this.lines();
      const scrollbar = {
        low: Math.max(-0.01, this.line / this.content.length) * this.height,
        hi: Math.min(1, (this.line + this.height) / this.content.length) * this.height
      };
      scrollbar.hi = Math.max(Math.ceil(scrollbar.low) + 0.5, scrollbar.hi);
      let scrollbarChar = "\u2588";
      if (scrollbar.low <= 0 && scrollbar.hi >= this.height) {
        scrollbarChar = "\u2551";
      }
      let escString = "";
      for (let i3 = 1; i3 <= this.height; i3++) {
        const { text, esc } = lines.next().value ?? { text: "", esc: [] };
        const sideChr = borderChar(within2(scrollbar.low, i3, scrollbar.hi) ? scrollbarChar : "\u2551");
        console.log(text);
        const bodyText = esc.sort((a3, b3) => a3.pos - b3.pos).reduce((acc, curr) => {
          const { type: type3, col } = curr.seq.matchAll(/\x1b\[(?<type>3|4)(?<col>9m|8;2)/g).next().value.groups;
          const stack = type3 == "3" ? acc.fgstack : acc.bgstack;
          if (col == "9m") {
            stack.pop();
            acc.out.push(stack.length == 0 ? curr : { pos: curr.pos, seq: last(stack).seq });
          } else {
            stack.push(curr);
            acc.out.push(curr);
          }
          return acc;
        }, { fgstack: [], bgstack: [], out: [] }).out.reduceRight((acc, { pos, seq }) => {
          return acc.splice(pos, 0, seq);
        }, (text || "").padEnd(this.width));
        writeString += `${ansiEscapes_default.cursorTo(this.x, this.y + i3)}${sideChr}${bodyText}${sideChr}`;
      }
      this.terminal.write(writeString + ansiEscapes_default.cursorRestorePosition);
    }
    requestDraw(callback) {
      _Window.drawReq.request = true;
      if (callback)
        _Window.drawReq.callbacks.push(callback);
    }
    clean() {
      this.terminal.write(ansiEscapes_default.cursorSavePosition);
      for (let i3 = 0; i3 <= this.height + 1; i3++) {
        this.terminal.write(`${ansiEscapes_default.cursorTo(this.x, this.y + i3)}${"".padEnd(this.width + 2)}`);
      }
      this.terminal.write(ansiEscapes_default.cursorRestorePosition);
    }
  };
  var Window = _Window;
  __publicField(Window, "drawReq", {
    request: false,
    setup: false,
    callbacks: []
  });
  var termWindows = {
    "Window": Window
  };
  var terminalWindows_default = termWindows;

  // node_modules/split-grid/dist/split-grid.mjs
  var numeric = function(value, unit) {
    return Number(value.slice(0, -1 * unit.length));
  };
  var parseValue = function(value) {
    if (value.endsWith("px")) {
      return { value, type: "px", numeric: numeric(value, "px") };
    }
    if (value.endsWith("fr")) {
      return { value, type: "fr", numeric: numeric(value, "fr") };
    }
    if (value.endsWith("%")) {
      return { value, type: "%", numeric: numeric(value, "%") };
    }
    if (value === "auto") {
      return { value, type: "auto" };
    }
    return null;
  };
  var parse = function(rule) {
    return rule.split(" ").map(parseValue);
  };
  var getSizeAtTrack = function(index2, tracks, gap, end) {
    if (gap === void 0) {
      gap = 0;
    }
    if (end === void 0) {
      end = false;
    }
    var newIndex = end ? index2 + 1 : index2;
    var trackSum = tracks.slice(0, newIndex).reduce(function(accum, value) {
      return accum + value.numeric;
    }, 0);
    var gapSum = gap ? index2 * gap : 0;
    return trackSum + gapSum;
  };
  var getStyles = function(rule, ownRules, matchedRules) {
    return ownRules.concat(matchedRules).map(function(r3) {
      return r3.style[rule];
    }).filter(function(style) {
      return style !== void 0 && style !== "";
    });
  };
  var getGapValue = function(unit, size) {
    if (size.endsWith(unit)) {
      return Number(size.slice(0, -1 * unit.length));
    }
    return null;
  };
  var firstNonZero = function(tracks) {
    for (var i3 = 0; i3 < tracks.length; i3++) {
      if (tracks[i3].numeric > 0) {
        return i3;
      }
    }
    return null;
  };
  var NOOP = function() {
    return false;
  };
  var defaultWriteStyle = function(element, gridTemplateProp, style) {
    element.style[gridTemplateProp] = style;
  };
  var getOption = function(options, propName, def) {
    var value = options[propName];
    if (value !== void 0) {
      return value;
    }
    return def;
  };
  function getMatchedCSSRules(el) {
    var ref;
    return (ref = []).concat.apply(ref, Array.from(el.ownerDocument.styleSheets).map(function(s3) {
      var rules = [];
      try {
        rules = Array.from(s3.cssRules || []);
      } catch (e3) {
      }
      return rules;
    })).filter(function(r3) {
      var matches = false;
      try {
        matches = el.matches(r3.selectorText);
      } catch (e3) {
      }
      return matches;
    });
  }
  var gridTemplatePropColumns = "grid-template-columns";
  var gridTemplatePropRows = "grid-template-rows";
  var Gutter = function Gutter2(direction, options, parentOptions) {
    this.direction = direction;
    this.element = options.element;
    this.track = options.track;
    if (direction === "column") {
      this.gridTemplateProp = gridTemplatePropColumns;
      this.gridGapProp = "grid-column-gap";
      this.cursor = getOption(parentOptions, "columnCursor", getOption(parentOptions, "cursor", "col-resize"));
      this.snapOffset = getOption(parentOptions, "columnSnapOffset", getOption(parentOptions, "snapOffset", 30));
      this.dragInterval = getOption(parentOptions, "columnDragInterval", getOption(parentOptions, "dragInterval", 1));
      this.clientAxis = "clientX";
      this.optionStyle = getOption(parentOptions, "gridTemplateColumns");
    } else if (direction === "row") {
      this.gridTemplateProp = gridTemplatePropRows;
      this.gridGapProp = "grid-row-gap";
      this.cursor = getOption(parentOptions, "rowCursor", getOption(parentOptions, "cursor", "row-resize"));
      this.snapOffset = getOption(parentOptions, "rowSnapOffset", getOption(parentOptions, "snapOffset", 30));
      this.dragInterval = getOption(parentOptions, "rowDragInterval", getOption(parentOptions, "dragInterval", 1));
      this.clientAxis = "clientY";
      this.optionStyle = getOption(parentOptions, "gridTemplateRows");
    }
    this.onDragStart = getOption(parentOptions, "onDragStart", NOOP);
    this.onDragEnd = getOption(parentOptions, "onDragEnd", NOOP);
    this.onDrag = getOption(parentOptions, "onDrag", NOOP);
    this.writeStyle = getOption(parentOptions, "writeStyle", defaultWriteStyle);
    this.startDragging = this.startDragging.bind(this);
    this.stopDragging = this.stopDragging.bind(this);
    this.drag = this.drag.bind(this);
    this.minSizeStart = options.minSizeStart;
    this.minSizeEnd = options.minSizeEnd;
    if (options.element) {
      this.element.addEventListener("mousedown", this.startDragging);
      this.element.addEventListener("touchstart", this.startDragging);
    }
  };
  Gutter.prototype.getDimensions = function getDimensions() {
    var ref = this.grid.getBoundingClientRect();
    var width = ref.width;
    var height = ref.height;
    var top = ref.top;
    var bottom = ref.bottom;
    var left = ref.left;
    var right = ref.right;
    if (this.direction === "column") {
      this.start = top;
      this.end = bottom;
      this.size = height;
    } else if (this.direction === "row") {
      this.start = left;
      this.end = right;
      this.size = width;
    }
  };
  Gutter.prototype.getSizeAtTrack = function getSizeAtTrack$1(track, end) {
    return getSizeAtTrack(track, this.computedPixels, this.computedGapPixels, end);
  };
  Gutter.prototype.getSizeOfTrack = function getSizeOfTrack(track) {
    return this.computedPixels[track].numeric;
  };
  Gutter.prototype.getRawTracks = function getRawTracks() {
    var tracks = getStyles(this.gridTemplateProp, [this.grid], getMatchedCSSRules(this.grid));
    if (!tracks.length) {
      if (this.optionStyle) {
        return this.optionStyle;
      }
      throw Error("Unable to determine grid template tracks from styles.");
    }
    return tracks[0];
  };
  Gutter.prototype.getGap = function getGap() {
    var gap = getStyles(this.gridGapProp, [this.grid], getMatchedCSSRules(this.grid));
    if (!gap.length) {
      return null;
    }
    return gap[0];
  };
  Gutter.prototype.getRawComputedTracks = function getRawComputedTracks() {
    return window.getComputedStyle(this.grid)[this.gridTemplateProp];
  };
  Gutter.prototype.getRawComputedGap = function getRawComputedGap() {
    return window.getComputedStyle(this.grid)[this.gridGapProp];
  };
  Gutter.prototype.setTracks = function setTracks(raw) {
    this.tracks = raw.split(" ");
    this.trackValues = parse(raw);
  };
  Gutter.prototype.setComputedTracks = function setComputedTracks(raw) {
    this.computedTracks = raw.split(" ");
    this.computedPixels = parse(raw);
  };
  Gutter.prototype.setGap = function setGap(raw) {
    this.gap = raw;
  };
  Gutter.prototype.setComputedGap = function setComputedGap(raw) {
    this.computedGap = raw;
    this.computedGapPixels = getGapValue("px", this.computedGap) || 0;
  };
  Gutter.prototype.getMousePosition = function getMousePosition(e3) {
    if ("touches" in e3) {
      return e3.touches[0][this.clientAxis];
    }
    return e3[this.clientAxis];
  };
  Gutter.prototype.startDragging = function startDragging(e3) {
    if ("button" in e3 && e3.button !== 0) {
      return;
    }
    e3.preventDefault();
    if (this.element) {
      this.grid = this.element.parentNode;
    } else {
      this.grid = e3.target.parentNode;
    }
    this.getDimensions();
    this.setTracks(this.getRawTracks());
    this.setComputedTracks(this.getRawComputedTracks());
    this.setGap(this.getGap());
    this.setComputedGap(this.getRawComputedGap());
    var trackPercentage = this.trackValues.filter(function(track2) {
      return track2.type === "%";
    });
    var trackFr = this.trackValues.filter(function(track2) {
      return track2.type === "fr";
    });
    this.totalFrs = trackFr.length;
    if (this.totalFrs) {
      var track = firstNonZero(trackFr);
      if (track !== null) {
        this.frToPixels = this.computedPixels[track].numeric / trackFr[track].numeric;
      }
    }
    if (trackPercentage.length) {
      var track$1 = firstNonZero(trackPercentage);
      if (track$1 !== null) {
        this.percentageToPixels = this.computedPixels[track$1].numeric / trackPercentage[track$1].numeric;
      }
    }
    var gutterStart = this.getSizeAtTrack(this.track, false) + this.start;
    this.dragStartOffset = this.getMousePosition(e3) - gutterStart;
    this.aTrack = this.track - 1;
    if (this.track < this.tracks.length - 1) {
      this.bTrack = this.track + 1;
    } else {
      throw Error("Invalid track index: " + this.track + ". Track must be between two other tracks and only " + this.tracks.length + " tracks were found.");
    }
    this.aTrackStart = this.getSizeAtTrack(this.aTrack, false) + this.start;
    this.bTrackEnd = this.getSizeAtTrack(this.bTrack, true) + this.start;
    this.dragging = true;
    window.addEventListener("mouseup", this.stopDragging);
    window.addEventListener("touchend", this.stopDragging);
    window.addEventListener("touchcancel", this.stopDragging);
    window.addEventListener("mousemove", this.drag);
    window.addEventListener("touchmove", this.drag);
    this.grid.addEventListener("selectstart", NOOP);
    this.grid.addEventListener("dragstart", NOOP);
    this.grid.style.userSelect = "none";
    this.grid.style.webkitUserSelect = "none";
    this.grid.style.MozUserSelect = "none";
    this.grid.style.pointerEvents = "none";
    this.grid.style.cursor = this.cursor;
    window.document.body.style.cursor = this.cursor;
    this.onDragStart(this.direction, this.track);
  };
  Gutter.prototype.stopDragging = function stopDragging() {
    this.dragging = false;
    this.cleanup();
    this.onDragEnd(this.direction, this.track);
    if (this.needsDestroy) {
      if (this.element) {
        this.element.removeEventListener("mousedown", this.startDragging);
        this.element.removeEventListener("touchstart", this.startDragging);
      }
      this.destroyCb();
      this.needsDestroy = false;
      this.destroyCb = null;
    }
  };
  Gutter.prototype.drag = function drag(e3) {
    var mousePosition = this.getMousePosition(e3);
    var gutterSize = this.getSizeOfTrack(this.track);
    var minMousePosition = this.aTrackStart + this.minSizeStart + this.dragStartOffset + this.computedGapPixels;
    var maxMousePosition = this.bTrackEnd - this.minSizeEnd - this.computedGapPixels - (gutterSize - this.dragStartOffset);
    var minMousePositionOffset = minMousePosition + this.snapOffset;
    var maxMousePositionOffset = maxMousePosition - this.snapOffset;
    if (mousePosition < minMousePositionOffset) {
      mousePosition = minMousePosition;
    }
    if (mousePosition > maxMousePositionOffset) {
      mousePosition = maxMousePosition;
    }
    if (mousePosition < minMousePosition) {
      mousePosition = minMousePosition;
    } else if (mousePosition > maxMousePosition) {
      mousePosition = maxMousePosition;
    }
    var aTrackSize = mousePosition - this.aTrackStart - this.dragStartOffset - this.computedGapPixels;
    var bTrackSize = this.bTrackEnd - mousePosition + this.dragStartOffset - gutterSize - this.computedGapPixels;
    if (this.dragInterval > 1) {
      var aTrackSizeIntervaled = Math.round(aTrackSize / this.dragInterval) * this.dragInterval;
      bTrackSize -= aTrackSizeIntervaled - aTrackSize;
      aTrackSize = aTrackSizeIntervaled;
    }
    if (aTrackSize < this.minSizeStart) {
      aTrackSize = this.minSizeStart;
    }
    if (bTrackSize < this.minSizeEnd) {
      bTrackSize = this.minSizeEnd;
    }
    if (this.trackValues[this.aTrack].type === "px") {
      this.tracks[this.aTrack] = aTrackSize + "px";
    } else if (this.trackValues[this.aTrack].type === "fr") {
      if (this.totalFrs === 1) {
        this.tracks[this.aTrack] = "1fr";
      } else {
        var targetFr = aTrackSize / this.frToPixels;
        this.tracks[this.aTrack] = targetFr + "fr";
      }
    } else if (this.trackValues[this.aTrack].type === "%") {
      var targetPercentage = aTrackSize / this.percentageToPixels;
      this.tracks[this.aTrack] = targetPercentage + "%";
    }
    if (this.trackValues[this.bTrack].type === "px") {
      this.tracks[this.bTrack] = bTrackSize + "px";
    } else if (this.trackValues[this.bTrack].type === "fr") {
      if (this.totalFrs === 1) {
        this.tracks[this.bTrack] = "1fr";
      } else {
        var targetFr$1 = bTrackSize / this.frToPixels;
        this.tracks[this.bTrack] = targetFr$1 + "fr";
      }
    } else if (this.trackValues[this.bTrack].type === "%") {
      var targetPercentage$1 = bTrackSize / this.percentageToPixels;
      this.tracks[this.bTrack] = targetPercentage$1 + "%";
    }
    var style = this.tracks.join(" ");
    this.writeStyle(this.grid, this.gridTemplateProp, style);
    this.onDrag(this.direction, this.track, style);
  };
  Gutter.prototype.cleanup = function cleanup() {
    window.removeEventListener("mouseup", this.stopDragging);
    window.removeEventListener("touchend", this.stopDragging);
    window.removeEventListener("touchcancel", this.stopDragging);
    window.removeEventListener("mousemove", this.drag);
    window.removeEventListener("touchmove", this.drag);
    if (this.grid) {
      this.grid.removeEventListener("selectstart", NOOP);
      this.grid.removeEventListener("dragstart", NOOP);
      this.grid.style.userSelect = "";
      this.grid.style.webkitUserSelect = "";
      this.grid.style.MozUserSelect = "";
      this.grid.style.pointerEvents = "";
      this.grid.style.cursor = "";
    }
    window.document.body.style.cursor = "";
  };
  Gutter.prototype.destroy = function destroy(immediate, cb) {
    if (immediate === void 0)
      immediate = true;
    if (immediate || this.dragging === false) {
      this.cleanup();
      if (this.element) {
        this.element.removeEventListener("mousedown", this.startDragging);
        this.element.removeEventListener("touchstart", this.startDragging);
      }
      if (cb) {
        cb();
      }
    } else {
      this.needsDestroy = true;
      if (cb) {
        this.destroyCb = cb;
      }
    }
  };
  var getTrackOption = function(options, track, defaultValue) {
    if (track in options) {
      return options[track];
    }
    return defaultValue;
  };
  var createGutter = function(direction, options) {
    return function(gutterOptions) {
      if (gutterOptions.track < 1) {
        throw Error("Invalid track index: " + gutterOptions.track + ". Track must be between two other tracks.");
      }
      var trackMinSizes = direction === "column" ? options.columnMinSizes || {} : options.rowMinSizes || {};
      var trackMinSize = direction === "column" ? "columnMinSize" : "rowMinSize";
      return new Gutter(direction, Object.assign({}, {
        minSizeStart: getTrackOption(trackMinSizes, gutterOptions.track - 1, getOption(options, trackMinSize, getOption(options, "minSize", 0))),
        minSizeEnd: getTrackOption(trackMinSizes, gutterOptions.track + 1, getOption(options, trackMinSize, getOption(options, "minSize", 0)))
      }, gutterOptions), options);
    };
  };
  var Grid = function Grid2(options) {
    var this$1 = this;
    this.columnGutters = {};
    this.rowGutters = {};
    this.options = Object.assign({}, {
      columnGutters: options.columnGutters || [],
      rowGutters: options.rowGutters || [],
      columnMinSizes: options.columnMinSizes || {},
      rowMinSizes: options.rowMinSizes || {}
    }, options);
    this.options.columnGutters.forEach(function(gutterOptions) {
      this$1.columnGutters[gutterOptions.track] = createGutter("column", this$1.options)(gutterOptions);
    });
    this.options.rowGutters.forEach(function(gutterOptions) {
      this$1.rowGutters[gutterOptions.track] = createGutter("row", this$1.options)(gutterOptions);
    });
  };
  Grid.prototype.addColumnGutter = function addColumnGutter(element, track) {
    if (this.columnGutters[track]) {
      this.columnGutters[track].destroy();
    }
    this.columnGutters[track] = createGutter("column", this.options)({
      element,
      track
    });
  };
  Grid.prototype.addRowGutter = function addRowGutter(element, track) {
    if (this.rowGutters[track]) {
      this.rowGutters[track].destroy();
    }
    this.rowGutters[track] = createGutter("row", this.options)({
      element,
      track
    });
  };
  Grid.prototype.removeColumnGutter = function removeColumnGutter(track, immediate) {
    var this$1 = this;
    if (immediate === void 0)
      immediate = true;
    if (this.columnGutters[track]) {
      this.columnGutters[track].destroy(immediate, function() {
        delete this$1.columnGutters[track];
      });
    }
  };
  Grid.prototype.removeRowGutter = function removeRowGutter(track, immediate) {
    var this$1 = this;
    if (immediate === void 0)
      immediate = true;
    if (this.rowGutters[track]) {
      this.rowGutters[track].destroy(immediate, function() {
        delete this$1.rowGutters[track];
      });
    }
  };
  Grid.prototype.handleDragStart = function handleDragStart(e3, direction, track) {
    if (direction === "column") {
      if (this.columnGutters[track]) {
        this.columnGutters[track].destroy();
      }
      this.columnGutters[track] = createGutter("column", this.options)({
        track
      });
      this.columnGutters[track].startDragging(e3);
    } else if (direction === "row") {
      if (this.rowGutters[track]) {
        this.rowGutters[track].destroy();
      }
      this.rowGutters[track] = createGutter("row", this.options)({
        track
      });
      this.rowGutters[track].startDragging(e3);
    }
  };
  Grid.prototype.destroy = function destroy2(immediate) {
    var this$1 = this;
    if (immediate === void 0)
      immediate = true;
    Object.keys(this.columnGutters).forEach(function(track) {
      return this$1.columnGutters[track].destroy(immediate, function() {
        delete this$1.columnGutters[track];
      });
    });
    Object.keys(this.rowGutters).forEach(function(track) {
      return this$1.rowGutters[track].destroy(immediate, function() {
        delete this$1.rowGutters[track];
      });
    });
  };
  function index(options) {
    return new Grid(options);
  }
  var split_grid_default = index;

  // wrasse/wrasse.js
  var initialized = false;
  var WrasseTerminal = new import_xterm.Terminal({
    convertEol: true,
    scrollback: 0,
    cursorBlink: false,
    cursorStyle: "bar",
    cursorWidth: 1,
    disableStdin: true,
    tabStopWidth: 2
  });
  var fitAddon = new import_xterm_addon_fit.FitAddon();
  WrasseTerminal.loadAddon(fitAddon);
  var html = {
    terminal: document.getElementById("terminal-container"),
    buttons: {},
    hover: {
      shell: document.getElementById("wrasse-hover"),
      content: document.getElementById("wrasse-hover-content")
    },
    block: document.getElementById("wrasse-block")
  };
  var scrollToTop = () => {
    wrasse.window.line = 0;
    wrasse.window.scroll = 0;
    wrasse.window.requestDraw();
  };
  var fitTerminal = () => {
    const dims = fitAddon.proposeDimensions();
    if (wrasse.terminal.rows != dims.rows || wrasse.terminal.cols != dims.cols) {
      fitAddon.fit();
    }
    wrasse.window.expand(true);
    perm.windows?.[0]?.resize(wrasse.window.width / 2 - 1, wrasse.window.height, false, true);
    wrasse.window.resize(wrasse.window.width / 2, wrasse.window.height, false, true);
    perm.windows?.[0]?.move(wrasse.window.width + 2, 0, false, true);
  };
  var wrasse_setup = () => {
    split_grid_default({
      minSize: 100,
      snapOffset: 10,
      rowGutters: [{
        track: 1,
        element: document.querySelector(".gutter-row-1")
      }]
    });
    console.log("wrasse init");
    console.log(wrasse.editor);
    wrasse.terminal.open(html.terminal);
    wrasse.window = new terminalWindows_default.Window(WrasseTerminal, 2, 2, 10, 10);
    initialized = true;
    wrasse.terminal.modes.mouseTrackingMode = "any";
    wrasse.terminal.modes.wraparoundMode = true;
    fitTerminal();
    new ResizeObserver(debounce(() => fitTerminal(), 100)).observe(html.terminal);
    const onMouseMove = (e3) => {
      html.hover.shell.style.left = e3.pageX + "px";
      html.hover.shell.style.top = e3.pageY + "px";
      let off = 0;
      if (html.block.classList.contains("hidden")) {
        off = 100;
      }
      html.block.style.left = e3.pageX - off + "px";
      html.block.style.top = e3.pageY - off + "px";
    };
    document.addEventListener("mousemove", onMouseMove);
    (async () => {
      let response = await fetch("/messages", {
        method: "POST",
        body: "messages"
      });
      let data = response.json();
      console.log(data);
      wrasse.messages = await data;
    })();
  };
  var hook = async ({ code, response, editor }) => {
    let data = await response;
    wrasse.editor = editor;
    console.log("back-end call");
    if (!initialized) {
      wrasse.setup();
    }
    let ghc_data = await handle_ghc(code);
    console.log(ghc_data);
    wrasse.tree = parse_tree(ghc_data.full);
    wrasse.data_0 = ghc_data;
    wrasse.data_0.ghc.code = code.split("\n");
    wrasse.data_1 = data;
    wrasse.data_2 = { ghc: ghc_data, chameleon: data };
    console.log(wrasse.tree);
    wrasse.tree.symbols = parse_symbols(wrasse.tree);
    interactive_terminal(wrasse.tree);
  };
  var parse_symbols = (tree) => {
    const symbols = tree?.children.find((x2) => x2.content === "Defer GHC")?.children.find((x2) => x2.content === "symbols")?.children ?? [];
    return symbols.map((x2) => JSON.parse(x2.content));
  };
  var parse_tree = (tree) => {
    return {
      content: tree[0][0],
      active: tree[0][1],
      line: tree[0][2],
      children: tree[1].map(parse_tree),
      link: void 0
    };
  };
  var switch_terminal = (data) => {
    perm.disposables.forEach((x2) => x2.dispose());
    perm.disposables = [];
    perm.keywords.forEach((x2) => x2.dispose());
    perm.keywords = [];
    perm.windows = [];
    wrasse.terminal.reset();
    wrasse.window.reset();
    wrasse.terminal.options.disableStdin = true;
    if (data) {
      wrasse.window.writeln(JSON.stringify(data, null, 2), scrollToTop);
    }
    fitTerminal();
    let starGen = function* () {
      while (true) {
        for (const item of ["|", "/", "-", "\\"]) {
          yield item;
        }
      }
    }();
    let numGen = function* () {
      let i3 = 0;
      while (true) {
        yield ++i3;
      }
    }();
    let recurse = async () => {
      sleep(100);
      wrasse.window.write(ansiEscapes_default.cursorSavePosition + ansiEscapes_default.cursorTo(numGen.next().value % 2 + 30, 1) + starGen.next().value + ansiEscapes_default.cursorRestorePosition, recurse);
    };
  };
  var set_hover_content = (text) => {
    if (typeof text === "undefined" || text === "") {
    } else {
      perm.windows[0].reset().writeln(text || "");
    }
  };
  var block_mouse = (bool) => {
    if (!bool) {
      html.block.classList.add("hidden");
    } else {
      html.block.classList.remove("hidden");
    }
  };
  var interactive_terminal = (tree) => {
    switch_terminal();
    let hoverWin = new terminalWindows_default.Window(wrasse.terminal, wrasse.terminal.cols / 2, 0, wrasse.terminal.cols / 2 - 2, wrasse.terminal.rows, { movable: true, softwrap: true });
    perm.windows.push(hoverWin);
    fitTerminal();
    let curr_line = 0;
    const setHead = (x2, head2) => {
      if (x2.content !== "Root" || x2 === head2) {
        x2.head = head2;
        x2.children.forEach((el) => setHead(el, head2));
      }
    };
    const write_text = (node, level, write = false) => {
      let line = curr_line;
      let prefix2 = "  ".repeat(level);
      let node_string = node.content;
      if (write) {
        if (node.children.length == 0) {
          wrasse.window.writeln(prefix2 + "- " + node_string);
        } else {
          if (node.active) {
            wrasse.window.writeln(prefix2 + "\u25BC " + node_string);
          } else {
            wrasse.window.writeln(prefix2 + "\u25BA " + node_string);
          }
        }
      }
      node.line = line;
      curr_line++;
      if (node.active) {
        node.children.forEach((x2) => write_text(x2, level + 1, write));
      }
    };
    const clean_lines = (node, level, mode) => {
      if (mode === void 0) {
        mode = node.active;
      } else if (node.active == false)
        return;
      if (mode) {
        node.children.slice().reverse().forEach((x2) => clean_lines(x2, level + 1, mode));
        wrasse.window.write(ansiEscapes_default.cursorSavePosition + ansiEscapes_default.cursorTo(0, node.line + 1) + ansiEscapes_default.deleteLine(node.children.length) + ansiEscapes_default.cursorTo(2 * level, node.line) + "\u25BA" + ansiEscapes_default.cursorRestorePosition);
      } else {
        wrasse.window.write(ansiEscapes_default.cursorSavePosition + ansiEscapes_default.cursorTo(0, node.line) + ansiEscapes_default.insertLine(node.children.length));
        let curr_line2 = node.line + 1;
        node.children.forEach((x2) => {
          let prefix2 = "  ".repeat(level + 1);
          if (x2.children.length == 0) {
            wrasse.window.write(ansiEscapes_default.cursorTo(0, curr_line2) + prefix2 + "- " + x2.content);
          } else {
            wrasse.window.write(ansiEscapes_default.cursorTo(0, curr_line2) + prefix2 + "\u25BA " + x2.content);
          }
          curr_line2++;
        });
        wrasse.window.write(ansiEscapes_default.cursorTo(2 * level, node.line) + "\u25BC" + ansiEscapes_default.cursorRestorePosition);
        node.children.forEach((x2) => clean_lines(x2, level + 1, mode));
      }
    };
    const register_links = (node, level, ignoreLine) => {
      node.link = {
        text: node.content,
        range: {
          start: { x: level * 2 + 1, y: node.line },
          end: { x: level * 2 + 2 + node.content.length, y: node.line }
        }
      };
      if (node.children.length > 0 && node.line != ignoreLine) {
        let hovered = false;
        wrasse.window.addLink(node.link.range, {
          click(link) {
            link.window.links.forEach((x2) => {
              x2.highlight.fg.seq = "";
              x2.highlight.bg.seq = "";
              x2.highlight.resetFG.seq = "";
              x2.highlight.resetBG.seq = "";
            });
            link.window.content.forEach((line) => line.esc = line.esc.filter((esc) => esc.seq !== ""));
            link.window.links = [];
            clean_lines(node, level);
            node.active = !node.active;
            curr_line = 0;
            write_text(tree, 0, false);
            register_links(tree, 0);
            register_keywords(tree);
            wrasse.window.write(ansiEscapes_default.cursorTo(0, node.line));
          },
          enter(link) {
            wrasse.set_hover_content(node.active ? "click to collapse" : "click to expand");
          },
          leave(link) {
            hovered = false;
            wrasse.set_hover_content();
          }
        }, ansiEscapes_default.Colour.Blue).treelink = true;
      }
      if (node.active) {
        node.children.forEach((x2) => register_links(x2, level + 1));
      }
    };
    const register_keywords = (node) => {
      if (node?.link) {
        const { text, range } = node.link;
        for (const match of text.matchAll(wrasseGHC_default.regex.ambiguous)) {
          const { namespace, symbol } = match.groups;
          wrasse.window.addLink({
            start: { x: range.start.x + match.index + 1, y: node.line },
            end: { x: range.start.x + match.index + match[0].length, y: node.line }
          }, {
            click(link) {
              if (node.active) {
                node.children = node.children.pop();
                return;
              }
              let starGen = start_pattern_gen();
              let finished = false;
              let recurse = () => {
                sleep(10).then(() => {
                  if (finished)
                    return;
                  wrasse.window.write(ansiEscapes_default.cursorSavePosition + ansiEscapes_default.cursorTo(range.start.x - 1, node.line) + starGen.next().value + ansiEscapes_default.cursorRestorePosition, recurse);
                });
              };
              recurse();
              (async () => {
                console.log(wrasse);
                let code = wrasse.data_0?.ghc.code.map((x2) => {
                  let arr = x2.split("=");
                  if (arr.length <= 1) {
                    return x2;
                  }
                  let new_x = arr.slice(1).join("=");
                  return arr[0] + "=" + new_x.replace(symbol, `${namespace}${symbol}`);
                }).reduce((acc, curr) => {
                  return acc + "\n" + curr;
                });
                console.log(code);
                let response = await fetch("/ghc", {
                  method: "POST",
                  body: code
                });
                let data = await response.json();
                console.log(data);
                const add = parse_tree(data.full);
                add.symbols = parse_symbols(add);
                setHead(add, add);
                const cd = add?.children.find((x2) => x2.content === "GHC")?.children.find((x2) => x2.content === "code") ?? {};
                cd.content = "code [[commit]]";
                cd.code = code;
                node.children.push(add);
                finished = true;
                const [l3, s3] = [wrasse.window.line, wrasse.window.scroll];
                wrasse.interactive_terminal(wrasse.tree);
                wrasse.window.line = l3;
                wrasse.window.scroll = s3;
              })();
            },
            enter(link) {
              wrasse.set_hover_content(`See what happens if you use '${namespace + symbol}'`);
            },
            leave(link) {
              wrasse.set_hover_content();
            }
          }, ansiEscapes_default.Colour.Green);
        }
        for (const match of text.matchAll(wrasseGHC_default.regex.keyword)) {
          wrasse.window.addLink({
            start: { x: range.start.x + match.index + 2, y: node.line },
            end: { x: range.start.x + match.index + match[0].length + 1, y: node.line }
          }, {
            click(link) {
            },
            enter(link) {
              wrasse.set_hover_content(wrasseGHC_default.map[match[0]]);
            },
            leave(link) {
              wrasse.set_hover_content();
            }
          }, ansiEscapes_default.Colour.Grey);
        }
        for (const match of text.matchAll(wrasseGHC_default.regex.codeCommit)) {
          wrasse.window.addLink({
            start: { x: range.start.x + match.index + 2, y: node.line },
            end: { x: range.start.x + match.index + match[0].length + 1, y: node.line }
          }, {
            click(link) {
              wrasse.editor(node?.code);
            },
            enter(link) {
              wrasse.set_hover_content("Commit code to main window");
            },
            leave(link) {
              wrasse.set_hover_content();
            }
          }, ansiEscapes_default.Colour.Grey);
        }
        for (const match of text.matchAll(wrasseGHC_default.regex.symbol)) {
          const { symbol } = match.groups;
          const sym = node.head.symbols.find((x2) => x2.symbolName === symbol);
          if (sym) {
            wrasse.window.addLink({
              start: { x: range.start.x + match.index + 2, y: node.line },
              end: { x: range.start.x + match.index + match[0].length, y: node.line }
            }, {
              click(link) {
              },
              enter(link) {
                let codeline = "";
                const match2 = sym?.symbolDefinedAt?.[1]?.matchAll(wrasseGHC_default.regex.location)?.next()?.value;
                if (match2?.groups) {
                  const { line, colStart, colEnd } = match2.groups;
                  if (wrasse?.data_0?.ghc?.code) {
                    codeline = wrasse?.data_0?.ghc?.code[line - 1];
                  }
                }
                wrasse.set_hover_content(`${symbol}
    type: ${sym?.symbolType || "constant"}
    signature: ${sym?.definition || symbol}
    defined ${sym?.symbolDefinedAt?.[0] === "in" ? "in package" : "at"}: ${sym?.symbolDefinedAt?.[1] || "unknown"}
` + (codeline ? `     \u255A\u2550\u25BA ${codeline}
` : "") + `    etc.:` + `
${sym?.symbolEtc}
`.split("\n").join("\n      "));
              },
              leave(link) {
                wrasse.set_hover_content();
              }
            }, ansiEscapes_default.Colour.LightGrey);
          }
        }
        for (const match of text.matchAll(wrasseGHC_default.regex.location)) {
          wrasse.window.addLink({
            start: { x: range.start.x + match.index + 1, y: node.line },
            end: { x: range.start.x + match.index + match[0].length + 1, y: node.line }
          }, {
            click(link) {
            },
            enter(link) {
              const { line, colStart, colEnd } = match.groups;
              let x2 = "";
              if (wrasse?.data_0?.ghc?.code) {
                x2 = wrasse?.data_0?.ghc?.code[line - 1];
              }
              wrasse.set_hover_content(`line ${line}, column ${colStart} to ${colEnd}
   ${x2}`);
            },
            leave(link) {
              wrasse.set_hover_content();
            }
          });
        }
        for (const match of text.matchAll(wrasseGHC_default.regex.error)) {
          wrasse.window.addLink({
            start: { x: range.start.x + match.index + 2, y: node.line },
            end: { x: range.start.x + match.index + match[0].length, y: node.line }
          }, {
            click(link) {
            },
            enter(link) {
              const { code } = match.groups;
              let msg = wrasse.messages.find((x2) => x2.errCode == code);
              if (msg) {
                const { summary, removed, bodyText, introduced, errCode, severity, extension, flag, title, examples: examples2 } = msg;
                const nest = (x2) => x2.split("\n").join("\n|   ");
                const ex = examples2.map(({ beforeCode, explanation, errorMsg, exTitle, afterCode }) => `${ansiEscapes_default.colouredText(ansiEscapes_default.Colour.Yellow, {}, exTitle)}
` + nest(`before:
${beforeCode}`) + `

` + nest(`after:
${afterCode}`));
                const flags = [severity, extension, flag, introduced, removed];
                const subtitle = [
                  `severity: ${ansiEscapes_default.colouredText({ error: ansiEscapes_default.Colour.Red, warning: ansiEscapes_default.Colour.Yellow }[severity] ?? ansiEscapes_default.Colour.Green, {}, severity)}`,
                  `originates from: ${extension}`,
                  `requires compiler flag: ${flag}`,
                  `introduced in ${introduced}`,
                  `removed in ${removed}`
                ].filter((x2, i3) => flags[i3] != "").join("; ");
                wrasse.set_hover_content(`[${errCode}] -> ${title}
${subtitle}

${summary}

${bodyText}

examples:${["", ...ex].join("\n" + "-".repeat(10) + "\n")}
`);
              } else {
                wrasse.set_hover_content(`No file found for error code ${code}`);
              }
            },
            leave(link) {
              wrasse.set_hover_content();
            }
          });
        }
      }
      if (node.active) {
        node?.children.forEach(register_keywords);
      }
    };
    setHead(tree, tree);
    write_text(tree, 0, true);
    register_links(tree, 0);
    register_keywords(tree);
  };
  var handle_ghc = async (code) => {
    return ghc_hook(code);
  };
  var ghc_hook = async (code) => {
    let response = await fetch("/ghc", {
      method: "POST",
      body: code
    });
    return response.json();
  };
  var perm = {
    "disposables": [],
    "keywords": [],
    "windows": []
  };
  var wrasse = {
    "html": html,
    "perm": perm,
    "hook": hook,
    "setup": wrasse_setup,
    "terminal": WrasseTerminal,
    "window": void 0,
    "tree": {},
    "data_0": {},
    "data_1": {},
    "data_2": {},
    "switch_terminal": switch_terminal,
    "interactive_terminal": interactive_terminal,
    "set_hover_content": set_hover_content,
    "block_mouse": block_mouse,
    "messages": [],
    "editor": null_func
  };
  var wrasse_default = wrasse;

  // debuggerSlice.js
  var debuggerOrders = [
    flatten_default(repeat_default(["level1", "level2", "level3"], 3)),
    flatten_default(repeat_default(["level1", "level3", "level2"], 3)),
    flatten_default(repeat_default(["level2", "level1", "level3"], 3)),
    flatten_default(repeat_default(["level2", "level3", "level1"], 3)),
    flatten_default(repeat_default(["level3", "level1", "level2"], 3)),
    flatten_default(repeat_default(["level3", "level2", "level1"], 3))
  ];
  var debuggerOrder = debuggerOrders[getRandomInt(6)];
  var setLevelTo = (x2) => {
    if (x2 === "level1")
      return debuggingLevel1;
    if (x2 === "level2")
      return debuggingLevel2;
    if (x2 === "level3")
      return debuggingLevel3;
  };
  var editorModes = {
    edit: 0,
    normal: 1
  };
  var typeCheckThunk = createAsyncThunk("typeCheck", async (_3, { dispatch, getState }) => {
    dispatch(resetHighlights());
    let state = getState();
    let text = state.debugger.text;
    let currentTaskNum = state.debugger.currentTaskNum;
    dispatch(incrementAttemps(currentTaskNum));
    let response = await fetch("/typecheck", {
      method: "POST",
      body: text
    });
    let data = response.json();
    const editor = (newCode) => {
      const ret = dispatch(setEditorContent(newCode));
      dispatch(typeCheckThunk(newCode));
      return ret;
    };
    wrasse_default.hook({ code: text, response: data, editor });
    return data;
  });
  var toggleMultileExpThunk = createAsyncThunk("multipleExpThunk", async (_3, { dispatch, getState }) => {
    let state = getState();
    let newStep = Math.floor(state.debugger.steps.length / 2);
    if (state.debugger.multipleExps) {
      dispatch(setStep(newStep));
    }
    dispatch(toggleMultipleExps());
    return null;
  });
  var switchTaskThunk = createAsyncThunk("switchTask", async (n3, { dispatch }) => {
    let setLevelAction = setLevelTo(debuggerOrder[n3]);
    dispatch(setTask(n3));
    dispatch(typeCheckThunk(null));
    dispatch(setLevelAction());
  });
  var initialState = {
    currentStepNum: null,
    text: "",
    longestLine: 0,
    currentTraverseId: null,
    currentContextItem: null,
    pinnedStep: 0,
    highlightFilter: ["markerDefination"],
    steps: [],
    context: [],
    numOfSteps: 0,
    numOfContextRows: 0,
    prevLocs: [],
    nextLocs: [],
    currentTaskNum: null,
    wellTyped: false,
    loadError: null,
    parseError: null,
    mode: editorModes.normal,
    widgets: [],
    highlights: [],
    debuggingSteps: false,
    multipleExps: false,
    attempts: [0, 0, 0, 0, 0, 0, 0, 0, 0]
  };
  var { actions, reducer } = createSlice({
    name: "editor",
    initialState,
    reducers: {
      setEditorContent(state, action) {
        if (action.payload < 0 || action.payload > code_default.length)
          return state;
        state.text = action.payload;
        state.longestLine = pipe(split_default("\n"), map_default(split_default("")), map_default(length_default), sort_default(subtract_default), reverse_default, head_default)(action.payload);
      },
      toEditMode: assoc_default("mode", editorModes.edit),
      toNormalMode: assoc_default("mode", editorModes.normal),
      toggleDebuggerStpes: modify_default("debuggingSteps", not_default),
      toggleMultipleExps: modify_default("multipleExps", not_default),
      incrementAttemps(state, action) {
        state.attempts = state.attempts.map((v2, i3) => i3 === action.payload ? v2 + 1 : v2);
      },
      debuggingLevel1(state) {
        state.debuggingSteps = false;
        state.multipleExps = false;
      },
      debuggingLevel2(state) {
        state.debuggingSteps = false;
        state.multipleExps = true;
      },
      debuggingLevel3(state) {
        state.debuggingSteps = true;
        state.multipleExps = true;
      },
      setText(state, action) {
        state.text = action.payload;
      },
      showOnlyMark1(state) {
        state.highlightFilter = ["marker1", "markerDefination"];
      },
      showOnlyMark2(state) {
        state.highlightFilter = ["marker2", "markerDefination"];
      },
      showBoth(state) {
        state.highlightFilter = ["markerDefination"];
      },
      showDefination(state) {
        state.highlightFilter = ["marker1", "marker2"];
      },
      setTask(state, action) {
        if (action.payload < 0 || action.payload > code_default.length)
          return state;
        state.currentTaskNum = action.payload;
        state.text = code_default[action.payload];
        state.longestLine = pipe(split_default("\n"), map_default(split_default("")), map_default(length_default), sort_default(subtract_default), reverse_default, head_default)(code_default[action.payload]);
      },
      setStep(state, action) {
        if (state.currentStepNum === null)
          return state;
        if (action.payload > state.numOfSteps - 1 || action.payload < 0)
          return state;
        let currentStepNum = action.payload;
        let { highlights, widgets } = convertStep(state.steps[currentStepNum], currentStepNum, state.longestLine);
        let currentTraverseId = state.steps[currentStepNum].stepId;
        let currentContextItem = getCurrentActiveContext(state.context, currentTraverseId);
        state.currentStepNum = currentStepNum;
        state.highlights = [
          ...highlights,
          ...getPrevLocs(state.steps, currentStepNum),
          ...getNextLocs(state.steps, currentStepNum),
          getDefinitionHighlight(currentContextItem)
        ];
        state.widgets = widgets;
        state.currentContextItem = currentContextItem;
        state.currentTraverseId = currentTraverseId;
      },
      lockStep(state, action) {
        if (state.currentStepNum === null)
          return state;
        if (action.payload > state.numOfSteps - 1 || action.payload < 0)
          return state;
        let currentStepNum = action.payload;
        let { highlights, widgets } = convertStep(state.steps[currentStepNum], currentStepNum, state.longestLine);
        let currentTraverseId = state.steps[currentStepNum].stepId;
        let currentContextItem = getCurrentActiveContext(state.context, currentTraverseId);
        state.currentStepNum = currentStepNum;
        state.highlights = [
          ...highlights,
          ...getPrevLocs(state.steps, currentStepNum),
          ...getNextLocs(state.steps, currentStepNum),
          getDefinitionHighlight(currentContextItem)
        ];
        state.widgets = widgets;
        state.currentContextItem = currentContextItem;
        state.currentTraverseId = currentTraverseId;
        state.pinnedStep = action.payload;
      },
      resetHighlights(state) {
        state.highlights = [];
        state.widgets = [];
      },
      prevStep(state) {
        if (state.currentStepNum === null)
          return state;
        if (state.currentStepNum <= 0)
          return state;
        let currentStepNum = state.currentStepNum - 1;
        let { highlights, widgets } = convertStep(state.steps[currentStepNum], currentStepNum, state.longestLine);
        let currentTraverseId = state.steps[currentStepNum].stepId;
        let currentContextItem = getCurrentActiveContext(state.context, currentTraverseId);
        state.pinnedStep = currentStepNum;
        state.currentStepNum = currentStepNum;
        state.highlights = [
          ...highlights,
          ...getPrevLocs(state.steps, currentStepNum),
          ...getNextLocs(state.steps, currentStepNum),
          getDefinitionHighlight(currentContextItem)
        ];
        state.widgets = widgets;
        state.currentContextItem = currentContextItem;
        state.currentTraverseId = currentTraverseId;
      },
      nextStep(state) {
        if (state.currentStepNum === null)
          return state;
        if (state.currentStepNum >= state.numOfSteps - 1)
          return state;
        let currentStepNum = state.currentStepNum + 1;
        let { highlights, widgets } = convertStep(state.steps[currentStepNum], currentStepNum, state.longestLine);
        state.pinnedStep = currentStepNum;
        let currentTraverseId = state.steps[currentStepNum].stepId;
        let currentContextItem = getCurrentActiveContext(state.context, currentTraverseId);
        state.currentStepNum = currentStepNum;
        state.highlights = [
          ...highlights,
          ...getPrevLocs(state.steps, currentStepNum),
          ...getNextLocs(state.steps, currentStepNum),
          getDefinitionHighlight(currentContextItem)
        ];
        state.widgets = widgets;
        state.currentContextItem = currentContextItem;
        state.currentTraverseId = currentTraverseId;
      }
    },
    extraReducers: (builder) => {
      builder.addCase(typeCheckThunk.fulfilled, (state, action) => {
        if (action.payload.tag === "ChTypeError") {
          let steps = action.payload.steps;
          let context = action.payload.contextTable;
          let currentStepNum = Math.floor(steps.length / 2);
          let longestLine = pipe(split_default("\n"), map_default(split_default("")), map_default(length_default), sort_default(subtract_default), reverse_default, head_default)(state.text);
          let { highlights, widgets } = convertStep(steps[currentStepNum], currentStepNum, longestLine);
          let currentTraverseId = steps[currentStepNum].stepId;
          state.context = context;
          state.steps = steps;
          state.currentContextItem = getCurrentActiveContext(context, currentTraverseId);
          state.highlights = [
            ...highlights,
            ...getPrevLocs(steps, currentStepNum),
            ...getNextLocs(steps, currentStepNum),
            getDefinitionHighlight(state.currentContextItem)
          ];
          state.widgets = widgets;
          state.numOfSteps = steps.length;
          state.numOfContextRows = context.length;
          state.currentStepNum = currentStepNum;
          state.pinnedStep = currentStepNum;
          state.currentTraverseId = currentTraverseId;
          state.parseError = null;
          state.loadError = null;
          state.wellTyped = false;
          state.longestLine = longestLine;
        } else if (action.payload.tag === "ChSuccess") {
          return Object.assign({}, {
            ...state,
            wellTyped: true,
            parseError: null,
            loadError: null
          });
        } else if (action.payload.tag === "ChLoadError") {
          let loadError = action.payload.missing;
          return Object.assign({}, {
            ...state,
            loadError,
            parseError: null
          });
        } else if (action.payload.tag === "ChParseError") {
          let parseError = {
            message: action.payload.message,
            loc: action.payload.loc
          };
          return Object.assign({}, {
            ...state,
            parseError,
            loadError: null
          });
        }
      });
    }
  });
  var {
    setEditorContent,
    setStep,
    prevStep,
    nextStep,
    lockStep,
    setTask,
    setText,
    toEditMode,
    toNormalMode,
    resetHighlights,
    toggleDebuggerStpes,
    toggleMultipleExps,
    showOnlyMark1,
    showOnlyMark2,
    showBoth,
    showDefination,
    debuggingLevel1,
    debuggingLevel2,
    debuggingLevel3,
    incrementAttemps
  } = actions;
  var debuggerSlice_default = reducer;
  function getCurrentActiveContext(contexts, currentTraverseId) {
    let item = contexts.find((c3) => {
      return nth_default(2)(c3.contextSteps.find((x2) => equals_default(nth_default(0, x2), currentTraverseId)));
    });
    return item === void 0 ? null : item;
  }
  function getDefinitionHighlight(ctxItm) {
    let definitionBlock = convertLocation(ctxItm.contextDefinedIn);
    return makeHighlight(definitionBlock, "markerDefination");
  }
  function getPrevLocs(steps, currentNum) {
    if (steps.length === 0)
      return [];
    let { rangeA, rangeB } = convertStep(steps[currentNum], currentNum, 0);
    return steps.filter((_3, i3) => i3 < currentNum).map((step) => convertStep(step, 0, 0)).flatMap((step) => [step.rangeA, step.rangeB]).filter((l3) => !(doesRangeSurround(l3, rangeA) || doesRangeSurround(l3, rangeB))).flatMap((l3) => makeHighlight(l3, "marker1"));
  }
  function getNextLocs(steps, currentNum) {
    if (steps.length === 0)
      return [];
    let { rangeA, rangeB } = convertStep(steps[currentNum], currentNum, 0);
    return steps.filter((_3, i3) => i3 > currentNum).map((step) => convertStep(step, 0, 0)).flatMap((step) => [step.rangeA, step.rangeB]).filter((l3) => !(doesRangeSurround(l3, rangeA) || doesRangeSurround(l3, rangeB))).flatMap((l3) => makeHighlight(l3, "marker2"));
  }
  function convertStep(step, stepNum, offset) {
    let reason = step["explanation"];
    let direction = step["order"];
    let rangeA = convertLocation(step["stepA"]);
    let rangeB = convertLocation(step["stepB"]);
    let highlights;
    if (doesRangeSurround(rangeA, rangeB)) {
      highlights = [
        makeParentHighlightB(rangeA, "marker1"),
        makeHighlightB(rangeB, "marker2")
      ];
    } else if (doesRangeSurround(rangeB, rangeA)) {
      highlights = [
        makeParentHighlightB(rangeB, "marker2"),
        makeHighlightB(rangeA, "marker1")
      ];
    } else {
      highlights = [
        makeHighlightB(rangeB, "marker2"),
        makeHighlightB(rangeA, "marker1")
      ];
    }
    let widgets = drawAnnotations(rangeA, rangeB, reason, stepNum, direction, offset);
    return { highlights, widgets, rangeA, rangeB };
  }

  // store.js
  var store = configureStore({
    reducer: {
      "debugger": debuggerSlice_default
    },
    devTools: true
  });
  var store_default = store;

  // node_modules/@devbookhq/splitter/lib/mjs/index.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var import_react8 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is2());
  function c2(e3, t3) {
    const n3 = getComputedStyle(t3);
    if (!n3)
      return;
    let i3 = e3 === p2.Horizontal ? t3.clientWidth : t3.clientHeight;
    return i3 !== 0 ? (e3 === p2.Horizontal ? i3 -= parseFloat(n3.paddingLeft) + parseFloat(n3.paddingRight) : i3 -= parseFloat(n3.paddingTop) + parseFloat(n3.paddingBottom), i3) : void 0;
  }
  function l2(e3, t3, n3 = []) {
    (0, import_react8.useEffect)(() => (window.addEventListener(e3, t3), () => window.removeEventListener(e3, t3)), [e3, t3, ...n3]);
  }
  !function(e3, t3) {
    t3 === void 0 && (t3 = {});
    var n3 = t3.insertAt;
    if (e3 && typeof document != "undefined") {
      var i3 = document.head || document.getElementsByTagName("head")[0], r3 = document.createElement("style");
      r3.type = "text/css", n3 === "top" && i3.firstChild ? i3.insertBefore(r3, i3.firstChild) : i3.appendChild(r3), r3.styleSheet ? r3.styleSheet.cssText = e3 : r3.appendChild(document.createTextNode(e3));
    }
  }("/* === Main Container === */\n.__dbk__container {\n  height: 100%;\n  width: 100%;\n\n  display: flex;\n  overflow: hidden;\n}\n\n.__dbk__container.Horizontal {\n  flex-direction: row;\n}\n\n.__dbk__container.Vertical {\n  flex-direction: column;\n}\n/* ====== */\n\n/* === Wrapper for each child element === */\n.__dbk__child-wrapper {\n  height: 100%;\n  width: 100%;\n}\n/* ====== */\n\n/* === Gutter === */\n.__dbk__gutter {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n/* .__dbk__gutter > div {\n  background: red;\n} */\n.__dbk__gutter.Horizontal {\n  height: 100%;\n  padding: 0 2px;\n  flex-direction: column;\n}\n.__dbk__gutter.Horizontal:hover {\n  cursor: col-resize;\n}\n\n.__dbk__gutter.Vertical {\n  width: 100%;\n  padding: 2px 0;\n  flex-direction: row;\n}\n.__dbk__gutter.Vertical:hover {\n  cursor: row-resize;\n}\n\n.__dbk__gutter.Light {\n  background: #EDF0EF;\n}\n.__dbk__gutter.Light:hover > .__dbk__dragger {\n  background: #76747B;\n}\n\n.__dbk__gutter.Dark {\n  background: #020203;\n}\n.__dbk__gutter.Dark:hover > .__dbk__dragger {\n  background: #9995A3;\n}\n/* ====== */\n\n/* === Gutter's Dragger === */\n.__dbk__dragger {\n  border-radius: 2px;\n}\n\n.__dbk__dragger.Horizontal {\n  width: 4px;\n  height: 24px;  \n}\n\n.__dbk__dragger.Vertical {\n  width: 24px;\n  height: 4px;  \n}\n\n.__dbk__dragger.Light {\n  background: #A6ACB5;\n}\n\n.__dbk__dragger.Dark {\n  background: #434252;\n}\n/* ====== */");
  var u2 = import_react8.default.forwardRef(({ className: t3, theme: n3, draggerClassName: i3, direction: r3 = p2.Vertical, onMouseDown: a3 }, o3) => {
    const g3 = `__dbk__gutter ${r3} ${t3 || n3}`, d3 = `__dbk__dragger ${r3} ${i3 || n3}`;
    return (0, import_jsx_runtime.jsx)("div", Object.assign({ className: g3, ref: o3, dir: r3, onMouseDown: a3 }, { children: (0, import_jsx_runtime.jsx)("div", { className: d3 }, void 0) }), void 0);
  });
  var h2;
  var p2;
  var f2;
  function _2(e3, t3, n3) {
    let i3, r3;
    return t3 ? (i3 = e3 / 2, r3 = e3) : n3 ? (i3 = e3, r3 = e3 / 2) : (i3 = e3, r3 = e3), { aGutterSize: i3, bGutterSize: r3 };
  }
  function z2(e3, t3) {
    switch (t3.type) {
      case h2.SetIsReadyToCompute:
        return Object.assign(Object.assign({}, e3), { isReady: t3.payload.isReady });
      case h2.CreatePairs: {
        const { direction: n3, children: i3, gutters: r3 } = t3.payload, a3 = i3[0].parentNode;
        if (!a3)
          throw new Error("Cannot create pairs - parent is undefined.");
        const o3 = c2(n3, a3);
        if (o3 === void 0)
          throw new Error(`Cannot create pairs - parent has undefined or zero size: ${o3}.`);
        const g3 = [];
        return i3.forEach((e4, t4) => {
          if (t4 > 0) {
            const e5 = i3[t4 - 1], o4 = i3[t4], d3 = r3[t4 - 1], s3 = n3 === p2.Horizontal ? e5.getBoundingClientRect().left : e5.getBoundingClientRect().top, c3 = n3 === p2.Horizontal ? o4.getBoundingClientRect().right : o4.getBoundingClientRect().bottom, l3 = n3 === p2.Horizontal ? e5.getBoundingClientRect().width + d3.getBoundingClientRect().width + o4.getBoundingClientRect().width : e5.getBoundingClientRect().height + d3.getBoundingClientRect().height + o4.getBoundingClientRect().height, u3 = n3 === p2.Horizontal ? d3.getBoundingClientRect().width : d3.getBoundingClientRect().height, h3 = { idx: t4 - 1, a: e5, b: o4, gutter: d3, parent: a3, start: s3, end: c3, size: l3, gutterSize: u3, aSizePct: 100 / i3.length, bSizePct: 100 / i3.length };
            g3.push(h3);
          }
        }), Object.assign(Object.assign({}, e3), { pairs: g3 });
      }
      case h2.StartDragging: {
        const { gutterIdx: n3 } = t3.payload;
        return Object.assign(Object.assign({}, e3), { isDragging: true, draggingIdx: n3 });
      }
      case h2.StopDragging:
        return Object.assign(Object.assign({}, e3), { isDragging: false });
      case h2.CalculateSizes: {
        const { direction: n3, gutterIdx: i3 } = t3.payload, r3 = e3.pairs[i3], a3 = c2(n3, r3.parent);
        if (!a3)
          throw new Error("Cannot calculate sizes - 'pair.parent' has undefined or zero size.");
        const o3 = r3.gutter[n3 === p2.Horizontal ? "clientWidth" : "clientHeight"], g3 = i3 === 0, d3 = i3 === e3.pairs.length - 1, { aGutterSize: s3, bGutterSize: l3 } = _2(o3, g3, d3);
        let u3, h3, f3, z3, b3;
        return n3 === p2.Horizontal ? (u3 = r3.a.getBoundingClientRect().left, h3 = r3.b.getBoundingClientRect().right, z3 = (r3.a.getBoundingClientRect().width + s3) / a3 * 100, b3 = (r3.b.getBoundingClientRect().width + l3) / a3 * 100, f3 = r3.a.getBoundingClientRect().width + s3 + l3 + r3.b.getBoundingClientRect().width) : (u3 = r3.a.getBoundingClientRect().top, h3 = r3.b.getBoundingClientRect().bottom, z3 = (r3.a.getBoundingClientRect().height + s3) / a3 * 100, b3 = (r3.b.getBoundingClientRect().height + l3) / a3 * 100, f3 = r3.a.getBoundingClientRect().height + s3 + l3 + r3.b.getBoundingClientRect().height), e3.pairs[i3] = Object.assign(Object.assign({}, r3), { start: u3, end: h3, size: f3, aSizePct: z3, bSizePct: b3, gutterSize: o3 }), Object.assign({}, e3);
      }
      default:
        return e3;
    }
  }
  function b2(e3, t3 = 0, n3 = []) {
    return import_react8.Children.toArray(e3).reduce((e4, i3, r3) => ((0, import_react_is2.isFragment)(i3) ? e4.push.apply(e4, b2(i3.props.children, t3 + 1, n3.concat(i3.key || r3))) : (0, import_react8.isValidElement)(i3) ? e4.push((0, import_react8.cloneElement)(i3, { key: n3.concat(String(i3.key)).join(".") })) : typeof i3 != "string" && typeof i3 != "number" || e4.push(i3), e4), []);
  }
  !function(e3) {
    e3[e3.SetIsReadyToCompute = 0] = "SetIsReadyToCompute", e3[e3.CreatePairs = 1] = "CreatePairs", e3[e3.CalculateSizes = 2] = "CalculateSizes", e3[e3.StartDragging = 3] = "StartDragging", e3[e3.StopDragging = 4] = "StopDragging";
  }(h2 || (h2 = {})), function(e3) {
    e3.Horizontal = "Horizontal", e3.Vertical = "Vertical";
  }(p2 || (p2 = {})), function(e3) {
    e3.Light = "Light", e3.Dark = "Dark";
  }(f2 || (f2 = {}));
  function C(e3) {
    return e3 === p2.Horizontal ? "col-resize" : "row-resize";
  }
  var w2 = { isReady: false, isDragging: false, pairs: [] };
  function y2({ direction: r3 = p2.Horizontal, minWidths: a3 = [], minHeights: o3 = [], initialSizes: s3, gutterTheme: y3 = f2.Dark, gutterClassName: S2, draggerClassName: m2, children: k2, onResizeStarted: x2, onResizeFinished: R2, classes: v2 = [] }) {
    const B2 = b2(k2), [I2, D2] = (0, import_react8.useReducer)(z2, w2), H2 = (0, import_react8.useRef)(null), E2 = (0, import_react8.useRef)([]), j2 = (0, import_react8.useRef)([]);
    E2.current = [], j2.current = [];
    const O2 = import_react8.default.useCallback((e3) => {
      D2({ type: h2.SetIsReadyToCompute, payload: { isReady: e3 } });
    }, []), N2 = import_react8.default.useCallback((e3, t3) => {
      D2({ type: h2.StartDragging, payload: { gutterIdx: t3 } });
      const n3 = I2.pairs[t3];
      x2 == null || x2(n3.idx), n3.a.style.userSelect = "none", n3.b.style.userSelect = "none", n3.gutter.style.cursor = C(e3), n3.parent.style.cursor = C(e3), document.body.style.cursor = C(e3);
    }, [I2.pairs]), $ = import_react8.default.useCallback(() => {
      D2({ type: h2.StopDragging });
      const e3 = [];
      for (let t4 = 0; t4 < I2.pairs.length; t4++) {
        const n3 = I2.pairs[t4], i3 = c2(r3, n3.parent);
        if (i3 === void 0)
          throw new Error("Cannot call the 'onResizeFinished' callback - parentSize is undefined");
        if (n3.gutterSize === void 0)
          throw new Error("Cannot call 'onResizeFinished' callback - gutterSize is undefined");
        const a4 = t4 === 0, o4 = t4 === I2.pairs.length - 1, g3 = n3.a.getBoundingClientRect()[r3 === p2.Horizontal ? "width" : "height"], { aGutterSize: d3, bGutterSize: s4 } = _2(n3.gutterSize, a4, o4), l3 = (g3 + d3) / i3 * 100;
        if (e3.push(l3), o4) {
          const t5 = (n3.b.getBoundingClientRect()[r3 === p2.Horizontal ? "width" : "height"] + s4) / i3 * 100;
          e3.push(t5);
        }
      }
      if (I2.draggingIdx === void 0)
        throw new Error("Could not reset cursor and user-select because 'state.draggingIdx' is undefined");
      const t3 = I2.pairs[I2.draggingIdx];
      R2 == null || R2(t3.idx, e3), t3.a.style.userSelect = "", t3.b.style.userSelect = "", t3.gutter.style.cursor = "", t3.parent.style.cursor = "", document.body.style.cursor = "";
    }, [I2.draggingIdx, I2.pairs, r3]), F2 = import_react8.default.useCallback((e3, t3) => {
      D2({ type: h2.CalculateSizes, payload: { direction: e3, gutterIdx: t3 } });
    }, []), G2 = import_react8.default.useCallback((e3, t3, n3) => {
      D2({ type: h2.CreatePairs, payload: { direction: e3, children: t3, gutters: n3 } });
    }, []), P2 = import_react8.default.useCallback((e3, t3, n3, i3) => {
      const r4 = t3[0].parentNode;
      if (!r4)
        throw new Error("Cannot set initial sizes - parent is undefined");
      if (c2(e3, r4) === void 0)
        throw new Error("Cannot set initial sizes - parent has undefined size");
      t3.forEach((r5, a4) => {
        const o4 = a4 === t3.length - 1;
        let g3;
        if (t3.length > 1) {
          n3[o4 ? a4 - 1 : a4].getBoundingClientRect()[e3 === p2.Horizontal ? "width" : "height"];
        }
        g3 = i3 && a4 < i3.length ? `calc(${i3[a4]}% - 0px)` : `calc(${100 / t3.length}% - 0px)`, e3 === p2.Horizontal ? (r5.style.width = g3, r5.style.height = "100%") : (r5.style.height = g3, r5.style.width = "100%");
      });
    }, []), T = import_react8.default.useCallback((e3, t3) => {
      if (I2.draggingIdx === void 0)
        throw new Error("Cannot adjust size - 'draggingIdx' is undefined");
      const n3 = I2.pairs[I2.draggingIdx];
      if (n3.size === void 0)
        throw new Error("Cannot adjust size - 'pair.size' is undefined");
      if (n3.gutterSize === void 0)
        throw new Error("Cannot adjust size - 'pair.gutterSize' is undefined");
      const i3 = n3.aSizePct + n3.bSizePct, r4 = t3 / n3.size * i3, a4 = i3 - t3 / n3.size * i3, o4 = I2.draggingIdx === 0, g3 = I2.draggingIdx === I2.pairs.length - 1, { aGutterSize: d3, bGutterSize: s4 } = _2(n3.gutterSize, o4, g3), c3 = `calc(${r4}% - ${d3}px)`, l3 = `calc(${a4}% - ${s4}px)`;
      e3 === p2.Horizontal ? (n3.a.style.width = c3, n3.b.style.width = l3) : (n3.a.style.height = c3, n3.b.style.height = l3);
    }, [I2.draggingIdx, I2.pairs, r3]), L2 = import_react8.default.useCallback((e3, t3, n3) => {
      if (!I2.isDragging)
        return;
      if (I2.draggingIdx === void 0)
        throw new Error("Cannot drag - 'draggingIdx' is undefined");
      const i3 = I2.pairs[I2.draggingIdx];
      if (i3.start === void 0)
        throw new Error("Cannot drag - 'pair.start' is undefined");
      if (i3.size === void 0)
        throw new Error("Cannot drag - 'pair.size' is undefined");
      if (i3.gutterSize === void 0)
        throw new Error("Cannot drag - 'pair.gutterSize' is undefined");
      let r4 = function(e4, t4) {
        return e4 === p2.Horizontal ? t4.clientX : t4.clientY;
      }(t3, e3) - i3.start, a4 = 16, o4 = 16;
      n3.length > I2.draggingIdx && (a4 = n3[I2.draggingIdx]), n3.length >= I2.draggingIdx + 1 && (o4 = n3[I2.draggingIdx + 1]), r4 < i3.gutterSize + a4 && (r4 = i3.gutterSize + a4), r4 >= i3.size - (i3.gutterSize + o4) && (r4 = i3.size - (i3.gutterSize + o4)), T(t3, r4);
    }, [I2.isDragging, I2.draggingIdx, I2.pairs, T]);
    function V(e3, t3) {
      if (!e3.current)
        throw new Error("Can't add element to ref object - ref isn't initialized");
      t3 && !e3.current.includes(t3) && e3.current.push(t3);
    }
    return l2("mouseup", () => {
      if (I2.isDragging) {
        if (I2.draggingIdx === void 0)
          throw new Error("Cannot calculate sizes after dragging = 'state.draggingIdx' is undefined");
        F2(r3, I2.draggingIdx), $();
      }
    }, [I2.isDragging, $]), l2("mousemove", (e3) => {
      I2.isDragging && L2(e3, r3, r3 === p2.Horizontal ? a3 : o3);
    }, [r3, I2.isDragging, L2, a3, o3]), (0, import_react8.useEffect)(function() {
      if (!H2.current)
        return;
      const e3 = H2.current.parentElement;
      if (!e3)
        return;
      const t3 = new ResizeObserver(() => {
        const t4 = getComputedStyle(e3), n3 = r3 === p2.Horizontal ? e3.clientWidth : e3.clientHeight;
        O2(!!t4 && !!n3);
      });
      return t3.observe(e3), () => {
        t3.disconnect();
      };
    }, [H2.current, r3]), (0, import_react8.useEffect)(function() {
      if (I2.isReady) {
        if (!E2.current || !j2.current)
          throw new Error("Cannot create pairs - either variable 'childRefs' or 'gutterRefs' is undefined");
        B2.length <= 1 ? P2(r3, E2.current, j2.current, s3) : (P2(r3, E2.current, j2.current, s3), G2(r3, E2.current, j2.current));
      }
    }, [k2, I2.isReady, r3, P2, G2, s3]), (0, import_jsx_runtime.jsx)("div", Object.assign({ className: `__dbk__container ${r3}`, ref: H2 }, { children: I2.isReady && B2.map((i3, a4) => (0, import_jsx_runtime.jsxs)(import_react8.default.Fragment, { children: [(0, import_jsx_runtime.jsx)("div", Object.assign({ ref: (e3) => V(E2, e3), className: "__dbk__child-wrapper " + (a4 < v2.length ? v2[a4] : "") }, { children: i3 }), void 0), a4 < B2.length - 1 && (0, import_jsx_runtime.jsx)(u2, { ref: (e3) => V(j2, e3), className: S2, theme: y3, draggerClassName: m2, direction: r3, onMouseDown: (e3) => function(e4, t3) {
      t3.preventDefault(), F2(r3, e4), N2(r3, e4);
    }(a4, e3) }, void 0)] }, a4)) }), void 0);
  }

  // Editor.jsx
  var import_react9 = __toESM(require_react());
  var App = () => {
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "flex flex-col p-3 overflow-auto",
      style: { height: "calc(100vh - 2.5rem)" }
    }, /* @__PURE__ */ import_react9.default.createElement(Editor, null));
  };
  var Editor = () => {
    const mode = useSelector(path_default(["debugger", "mode"]));
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "code tracking-wider flex-grow p-2 h-full"
    }, (() => {
      if (mode === editorModes.edit) {
        return /* @__PURE__ */ import_react9.default.createElement(EditorEditMode, null);
      } else if (mode === editorModes.normal) {
        return /* @__PURE__ */ import_react9.default.createElement(EditorNormerMode, null);
      }
    })());
  };
  var EditorEditMode = () => {
    const text = useSelector(path_default(["debugger", "text"]));
    const dispatch = useDispatch();
    const inputEl = (0, import_react9.useRef)(null);
    (0, import_react9.useEffect)(() => {
      inputEl.current.focus();
    }, []);
    return /* @__PURE__ */ import_react9.default.createElement("textarea", {
      ref: inputEl,
      spellCheck: false,
      className: "w-full h-full outline-none my-0.5",
      style: { resize: "none", lineHeight: "1.62rem", fontVariantLigatures: "none" },
      onChange: (e3) => dispatch(setText(e3.target.value)),
      value: text
    });
  };
  var EditorNormerMode = () => {
    const text = useSelector(path_default(["debugger", "text"]));
    const dispatch = useDispatch();
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "",
      onClick: (_3) => dispatch(toEditMode())
    }, text.split("\n").map((t3, line) => /* @__PURE__ */ import_react9.default.createElement(Line, {
      text: t3,
      line,
      key: line
    })));
  };
  var Line = ({ text, line }) => {
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "h-6 my-0.5"
    }, text.split("").map((t3, ch) => /* @__PURE__ */ import_react9.default.createElement(Cell, {
      text: t3,
      line,
      ch,
      key: ch
    })));
  };
  var Cell = ({ text, line, ch }) => {
    const point = { line, ch };
    const highlights = useSelector(path_default(["debugger", "highlights"]));
    const widgets = useSelector(path_default(["debugger", "widgets"]));
    const deductionStpe = useSelector(path_default(["debugger", "debuggingSteps"]));
    const highlighters = highlights.filter(curry_default(within)(point)).map((hl, k2) => /* @__PURE__ */ import_react9.default.createElement(Highlighter, {
      highlight: hl,
      line,
      ch,
      key: "hl" + k2
    }));
    const appliedWidgets = pipe(filter_default(pipe(prop_default("relativeTo"), equals_default(point))), map_default((wgt) => /* @__PURE__ */ import_react9.default.createElement(Widget, {
      styles: wgt.styles,
      classes: wgt.classes,
      content: wgt.content,
      key: wgt.key
    })))(widgets);
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "inline-block h-6 relative",
      style: { width: "0.6rem" }
    }, highlighters, deductionStpe ? appliedWidgets : null, /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "absolute w-full h-full z-50"
    }, text));
  };
  var Widget = ({ styles, classes, content }) => {
    const highlightFilter = useSelector(path_default(["debugger", "highlightFilter"]));
    const numOfSteps = useSelector(path_default(["debugger", "numOfSteps"]));
    const pinnedStep = useSelector(path_default(["debugger", "pinnedStep"]));
    const stepLabelFace = pinnedStep === content.step ? "bg-green-400 text-black border-green-400 border bg-green-400" : "bg-gray-200 border border-dashed border-black";
    if (highlightFilter.includes("marker1") && !highlightFilter.includes("marker2"))
      return null;
    if (highlightFilter.includes("marker2") && !highlightFilter.includes("marker1"))
      return null;
    if (highlightFilter.includes("marker2") && highlightFilter.includes("marker1") && !highlightFilter.includes("markerDefinition"))
      return null;
    if (content.type === "annotation") {
      if (content.direction === "LR") {
        return /* @__PURE__ */ import_react9.default.createElement("div", {
          className: "flex items-center justify-center text-gray-400 " + classes.join(" "),
          style: styles
        }, /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "marker1 border border-black inline-block w-2 h-2 rounded-sm mr-1"
        }), content.reason, /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "marker2 border border-black inline-block w-2 h-2 rounded-sm ml-1"
        }), /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "ml-1 text-gray-500"
        }, "(step"), /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "text-black inline-block w-4 h-4 text-xs rounded-full " + stepLabelFace
        }, numOfSteps - content.step), /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "text-gray-500"
        }, ")"));
      } else {
        return /* @__PURE__ */ import_react9.default.createElement("div", {
          className: "flex items-center justify-center  text-gray-400 " + classes.join(" "),
          style: styles
        }, /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "marker2 border border-black inline-block w-2 h-2 rounded-sm mr-1"
        }), content.reason, /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "marker1 border border-black inline-block w-2 h-2 rounded-sm ml-1"
        }), /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "ml-1 text-gray-500"
        }, "(step"), /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "text-black inline-block w-4 h-4 text-xs rounded-full " + stepLabelFace
        }, numOfSteps - content.step), /* @__PURE__ */ import_react9.default.createElement("span", {
          className: "text-gray-500"
        }, ")"));
      }
    } else {
      return /* @__PURE__ */ import_react9.default.createElement("div", {
        className: classes.join(" "),
        style: styles
      });
    }
  };
  var Highlighter = ({ highlight, line, ch }) => {
    const deductionSteps = useSelector(path_default(["debugger", "debuggingSteps"]));
    const highlightFilter = useSelector(path_default(["debugger", "highlightFilter"]));
    const borderResetter = deductionSteps && equals_default(highlightFilter, ["markerDefination"]) ? {} : { borderWidth: 0 };
    let classes = highlight.marker.shared;
    if (equals_default(highlight.from, { line, ch })) {
      classes = [...classes, ...highlight.marker.start];
    }
    if (equals_default(highlight.to, { line, ch: ch + 1 })) {
      classes = [...classes, ...highlight.marker.end];
    }
    classes = any_default((f3) => includes_default(f3, classes))(highlightFilter) ? [] : classes;
    return /* @__PURE__ */ import_react9.default.createElement("div", {
      className: "absolute " + classes.join(" "),
      style: borderResetter
    });
  };
  var Editor_default = App;

  // Debugger.jsx
  var import_react12 = __toESM(require_react());

  // node_modules/@heroicons/react/solid/esm/BookOpenIcon.js
  var React5 = __toESM(require_react(), 1);
  function BookOpenIcon(props, svgRef) {
    return /* @__PURE__ */ React5.createElement("svg", Object.assign({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      "aria-hidden": "true",
      ref: svgRef
    }, props), /* @__PURE__ */ React5.createElement("path", {
      d: "M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c1.255 0 2.443.29 3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z"
    }));
  }
  var ForwardRef = React5.forwardRef(BookOpenIcon);
  var BookOpenIcon_default = ForwardRef;

  // node_modules/@heroicons/react/solid/esm/ChevronDoubleLeftIcon.js
  var React6 = __toESM(require_react(), 1);
  function ChevronDoubleLeftIcon(props, svgRef) {
    return /* @__PURE__ */ React6.createElement("svg", Object.assign({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      "aria-hidden": "true",
      ref: svgRef
    }, props), /* @__PURE__ */ React6.createElement("path", {
      fillRule: "evenodd",
      d: "M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414zm-6 0a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 011.414 1.414L5.414 10l4.293 4.293a1 1 0 010 1.414z",
      clipRule: "evenodd"
    }));
  }
  var ForwardRef2 = React6.forwardRef(ChevronDoubleLeftIcon);
  var ChevronDoubleLeftIcon_default = ForwardRef2;

  // node_modules/@heroicons/react/solid/esm/ChevronDoubleRightIcon.js
  var React7 = __toESM(require_react(), 1);
  function ChevronDoubleRightIcon(props, svgRef) {
    return /* @__PURE__ */ React7.createElement("svg", Object.assign({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      "aria-hidden": "true",
      ref: svgRef
    }, props), /* @__PURE__ */ React7.createElement("path", {
      fillRule: "evenodd",
      d: "M10.293 15.707a1 1 0 010-1.414L14.586 10l-4.293-4.293a1 1 0 111.414-1.414l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0z",
      clipRule: "evenodd"
    }), /* @__PURE__ */ React7.createElement("path", {
      fillRule: "evenodd",
      d: "M4.293 15.707a1 1 0 010-1.414L8.586 10 4.293 5.707a1 1 0 011.414-1.414l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0z",
      clipRule: "evenodd"
    }));
  }
  var ForwardRef3 = React7.forwardRef(ChevronDoubleRightIcon);
  var ChevronDoubleRightIcon_default = ForwardRef3;

  // node_modules/@heroicons/react/solid/esm/EyeIcon.js
  var React8 = __toESM(require_react(), 1);
  function EyeIcon(props, svgRef) {
    return /* @__PURE__ */ React8.createElement("svg", Object.assign({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      "aria-hidden": "true",
      ref: svgRef
    }, props), /* @__PURE__ */ React8.createElement("path", {
      d: "M10 12a2 2 0 100-4 2 2 0 000 4z"
    }), /* @__PURE__ */ React8.createElement("path", {
      fillRule: "evenodd",
      d: "M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z",
      clipRule: "evenodd"
    }));
  }
  var ForwardRef4 = React8.forwardRef(EyeIcon);
  var EyeIcon_default = ForwardRef4;

  // node_modules/@heroicons/react/solid/esm/PencilAltIcon.js
  var React9 = __toESM(require_react(), 1);
  function PencilAltIcon(props, svgRef) {
    return /* @__PURE__ */ React9.createElement("svg", Object.assign({
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      fill: "currentColor",
      "aria-hidden": "true",
      ref: svgRef
    }, props), /* @__PURE__ */ React9.createElement("path", {
      d: "M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z"
    }), /* @__PURE__ */ React9.createElement("path", {
      fillRule: "evenodd",
      d: "M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z",
      clipRule: "evenodd"
    }));
  }
  var ForwardRef5 = React9.forwardRef(PencilAltIcon);
  var PencilAltIcon_default = ForwardRef5;

  // TabReport.jsx
  var import_react11 = __toESM(require_react());

  // TypeSig.jsx
  var import_react10 = __toESM(require_react());
  var StringTypeSig2 = ({ simple, full }) => {
    let unlaliasedFull = unAlias(full);
    if (unlaliasedFull.length > 50) {
      return /* @__PURE__ */ import_react10.default.createElement("span", null, unAlias(simple));
    } else {
      return /* @__PURE__ */ import_react10.default.createElement("span", null, unlaliasedFull);
    }
  };
  var TypeSig_default = StringTypeSig2;

  // node_modules/@heroicons/react/outline/esm/ChevronRightIcon.js
  var React11 = __toESM(require_react(), 1);
  function ChevronRightIcon(props, svgRef) {
    return /* @__PURE__ */ React11.createElement("svg", Object.assign({
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      viewBox: "0 0 24 24",
      strokeWidth: 2,
      stroke: "currentColor",
      "aria-hidden": "true",
      ref: svgRef
    }, props), /* @__PURE__ */ React11.createElement("path", {
      strokeLinecap: "round",
      strokeLinejoin: "round",
      d: "M9 5l7 7-7 7"
    }));
  }
  var ForwardRef6 = React11.forwardRef(ChevronRightIcon);
  var ChevronRightIcon_default = ForwardRef6;

  // TabReport.jsx
  var TabReport = () => {
    return /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "p-4 bg-gray-200 h-full"
    }, /* @__PURE__ */ import_react11.default.createElement(Summary, null), /* @__PURE__ */ import_react11.default.createElement(Message, null), /* @__PURE__ */ import_react11.default.createElement(ReleventTerms, null));
  };
  var TabList = () => {
    const dispatch = useDispatch();
    let context = useSelector(path_default(["debugger", "context"]));
    let steps = useSelector(path_default(["debugger", "steps"]));
    let pinnedStep = useSelector(path_default(["debugger", "pinnedStep"]));
    let pinnedTraverseId = steps[pinnedStep].stepId;
    const multipleExps = useSelector(path_default(["debugger", "multipleExps"]));
    const [scrollProgress, setScrollProgress] = (0, import_react11.useState)(0);
    return /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "h-20  shadow-sm bg-gray-100 flex items-center   " + (multipleExps ? "rounded-b-lg" : ""),
      style: { paddingLeft: 40 }
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "flex items-center cursor-pointer flex-row-reverse justify-end ",
      onWheel: (e3) => {
        let progress = clamp_default(-1.5, 1.5, Math.sign(e3.deltaY) * Math.log2(Math.abs(e3.deltaY)));
        setScrollProgress(scrollProgress + progress);
        console.log(progress);
        if (scrollProgress > 30) {
          dispatch(nextStep());
          setScrollProgress(0);
        } else if (scrollProgress < -30) {
          dispatch(prevStep());
          setScrollProgress(0);
        }
      }
    }, multipleExps ? context.map((c3, i3) => /* @__PURE__ */ import_react11.default.createElement(Tab, {
      key: i3,
      steps: c3.contextSteps,
      exp: c3.contextExp,
      active: c3.contextSteps.find(pipe(nth_default(0), equals_default(pinnedTraverseId)))[2]
    })) : null));
  };
  var Tab = ({ active = false, steps, exp }) => {
    let dispatch = useDispatch();
    const deductionSteps = useSelector(path_default(["debugger", "debuggingSteps"]));
    let pinnedStep = useSelector(path_default(["debugger", "pinnedStep"]));
    let traverseId = useSelector(path_default(["debugger", "currentTraverseId"]));
    let tabReleventSteps = steps.map((step, i3) => [...step, i3]).filter(nth_default(2));
    let tabDefaultStep = tabReleventSteps[Math.round(tabReleventSteps.length / 2) - 1][3];
    let hovering = steps.find(pipe(nth_default(0), equals_default(traverseId)))[2];
    let face;
    if (active) {
      face = "bg-gray-900 border-gray-900 border active:bg-gray-600";
    } else if (deductionSteps && !active && hovering) {
      face = "bg-white active:bg-gray-200 border-dashed border border-black";
    } else if (deductionSteps && !active && !hovering) {
      face = "bg-white active:bg-gray-200 border ";
    } else if (!deductionSteps && !active && hovering) {
      face = "bg-white active:bg-gray-200 border-dashed border border-black";
    } else if (!deductionSteps && !active && !hovering) {
      face = "bg-white active:bg-gray-200 border ";
    }
    let maxSize = deductionSteps ? { height: "4.5rem" } : { height: "3rem", transitionDelay: "75ms" };
    return /* @__PURE__ */ import_react11.default.createElement("div", {
      className: face + " flex flex-col w-max m-1 px-2 py-1 rounded-lg duration-75",
      style: { minWidth: 80, transitionProperty: "height", ...maxSize },
      onClick: (_3) => dispatch(lockStep(tabDefaultStep)),
      onMouseEnter: (_3) => active ? null : dispatch(setStep(tabDefaultStep)),
      onMouseLeave: (_3) => dispatch(setStep(pinnedStep))
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: " rounded-t-2xl inline-block w-full h-10 leading-10 text-xl code select-none " + (active ? "text-white" : "text-gray-800")
    }, exp), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: " " + (deductionSteps ? "h-6 w-full" : "h-0 w-0")
    }, /* @__PURE__ */ import_react11.default.createElement(TabSteps, {
      steps: tabReleventSteps,
      active
    })));
  };
  var TabSteps = ({ active = false, steps }) => {
    return /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "flex flex-row-reverse justify-end "
    }, steps.map((step) => /* @__PURE__ */ import_react11.default.createElement(TabStep, {
      active,
      key: step[3],
      traverseId: step[0],
      step: step[3]
    })));
  };
  var TabStep = ({ active = false, step, traverseId }) => {
    let dispatch = useDispatch();
    let numOfSteps = useSelector(path_default(["debugger", "numOfSteps"]));
    let currentTraverseId = useSelector(path_default(["debugger", "currentTraverseId"]));
    let deductionSteps = useSelector(path_default(["debugger", "debuggingSteps"]));
    let pinnedStep = useSelector(path_default(["debugger", "pinnedStep"]));
    let stepping = equals_default(currentTraverseId, traverseId);
    let pinned = pinnedStep === step;
    let face;
    if (active && pinned) {
      face = "bg-green-400 text-black";
    } else if (stepping && active) {
      face = "bg-gray-600 border-dashed border border-white text-white";
    } else if (stepping && !active) {
      face = "border-dashed bg-gray-200 text-black border-black border";
    } else if (active) {
      face = "bg-gray-400 text-black";
    } else if (!active) {
      face = "bg-gray-700 text-white";
    }
    return /* @__PURE__ */ import_react11.default.createElement("button", {
      onClick: (e3) => {
        e3.stopPropagation();
        dispatch(lockStep(step));
      },
      onMouseEnter: (_3) => {
        dispatch(setStep(step));
      }
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "w-5 h-5 leading-5 flex justify-center  cursor-pointer rounded-full text-md mx-0.5 transition-transform " + face + (deductionSteps ? " scale-100 delay-75" : " scale-0")
    }, numOfSteps - step));
  };
  var Summary = () => {
    let contextItem = useSelector((state) => state.debugger.currentContextItem);
    const multipleExps = useSelector(path_default(["debugger", "multipleExps"]));
    const debuggingSteps = useSelector(path_default(["debugger", "debuggingSteps"]));
    const steps = useSelector(path_default(["debugger", "steps"]));
    const pinnedStep = useSelector(path_default(["debugger", "pinnedStep"]));
    const pinned = steps.length === 0 ? true : contextItem.contextSteps.find(pipe(nth_default(0), equals_default(steps[pinnedStep].stepId)))[2];
    const dispatch = useDispatch();
    return contextItem === null ? null : /* @__PURE__ */ import_react11.default.createElement(import_react11.default.Fragment, null, /* @__PURE__ */ import_react11.default.createElement(Expandable, {
      hint: debuggingSteps ? "Hide other uncertain expressions (Tab key)" : "Expand to see a list of uncertain expressions (Tab key)",
      opened: multipleExps,
      onOpen: (_3) => {
        if (!multipleExps) {
          dispatch(toggleMultipleExps());
        }
      },
      onClose: (_3) => {
        if (multipleExps) {
          dispatch(toggleMultipleExps());
        }
        if (debuggingSteps)
          dispatch(toggleDebuggerStpes());
      }
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "bg-white p-3 pl-8 shadow-sm rounded-t-lg " + (multipleExps ? "" : "rounded-b-lg")
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "text-md"
    }, "The following expression can have two conflicting types", /* @__PURE__ */ import_react11.default.createElement("span", {
      onMouseEnter: (_3) => dispatch(showDefination()),
      onMouseLeave: (_3) => dispatch(showBoth()),
      className: "code ml-2 px-1 rounded-md  inline-block not-italic cursor-pointer " + (pinned ? "border border-gray-700 bg-gray-700 text-white hover:bg-gray-600" : "border border-black border-dashed hover:bg-gray-100")
    }, contextItem["contextExp"])))), multipleExps ? /* @__PURE__ */ import_react11.default.createElement(Expandable, {
      opened: debuggingSteps,
      left: 5,
      hint: debuggingSteps ? "Hide debugging steps (Tab key)" : "Expand to see debugging steps (Tab key)",
      onOpen: (_3) => {
        if (!debuggingSteps)
          dispatch(toggleDebuggerStpes());
      },
      onClose: (_3) => {
        if (debuggingSteps)
          dispatch(toggleDebuggerStpes());
      }
    }, /* @__PURE__ */ import_react11.default.createElement(TabList, null)) : null);
  };
  var Expandable = ({ opened, children, onOpen, onClose, hint, left = 5 }) => {
    let size = 25;
    return /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "relative"
    }, children, /* @__PURE__ */ import_react11.default.createElement("div", {
      onClick: (_3) => opened ? onClose() : onOpen(),
      className: "cursor-pointer rounded-full z-10 absolute border border-gray-300 hint--bottom",
      "aria-label": hint,
      style: {
        width: size,
        height: size,
        top: `calc(50% - ${size / 2}px)`,
        left
      }
    }, /* @__PURE__ */ import_react11.default.createElement(ChevronRightIcon_default, {
      className: (opened ? "rotate-90" : "") + " transition-transform",
      style: {}
    })));
  };
  var Message = () => {
    let contextItem = useSelector((state) => state.debugger.currentContextItem);
    let dispatch = useDispatch();
    return contextItem === null ? null : /* @__PURE__ */ import_react11.default.createElement(import_react11.default.Fragment, null, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "font-medium mt-5"
    }, "Conflicting types"), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "mb-5 mt-2 shadow-sm"
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "cursor-pointer hover:bg-gray-100 rounded-t-md bg-white p-2 w-full hint--bottom ",
      "aria-label": "Keyboard shortcut: Hold 1",
      onMouseEnter: (_3) => dispatch(showOnlyMark1()),
      onMouseLeave: (_3) => dispatch(showBoth())
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "mb-2 text-sm font-medium"
    }, "Possible type 1"), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "inline-block mr-1 code"
    }, contextItem.contextExp, "::"), /* @__PURE__ */ import_react11.default.createElement("span", {
      className: "code groupMarkerB rounded-sm px-0.5 cursor-pointer"
    }, /* @__PURE__ */ import_react11.default.createElement(TypeSig_default, {
      simple: contextItem.contextType1SimpleString,
      full: contextItem.contextType1String
    })), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "text-xs italic"
    }, "Inferred from the orange highlights on the left side")), /* @__PURE__ */ import_react11.default.createElement("hr", {
      className: ""
    }), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "cursor-pointer hover:bg-gray-100 rounded-b-md bg-white p-2 w-full hint--bottom ",
      "aria-label": "Keyboard shortcut: Hold 2",
      onMouseEnter: (_3) => dispatch(showOnlyMark2()),
      onMouseLeave: (_3) => dispatch(showBoth())
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "mb-2 text-sm font-medium"
    }, "Possible type 2"), /* @__PURE__ */ import_react11.default.createElement("span", {
      className: "inline-block mr-1 code"
    }, contextItem.contextExp, "::"), /* @__PURE__ */ import_react11.default.createElement("span", {
      className: "code groupMarkerA rounded-sm px-0.5 cursor-pointer"
    }, /* @__PURE__ */ import_react11.default.createElement(TypeSig_default, {
      simple: contextItem.contextType2SimpleString,
      full: contextItem.contextType2String
    })), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "text-xs italic"
    }, "Inferred from the blue highlights on the left side"))));
  };
  var ReleventTerms = () => {
    let context = useSelector(path_default(["debugger", "context"]));
    let currentContextItem = useSelector(path_default(["debugger", "currentContextItem"]));
    let releventContext = context.filter((c3) => c3.contextExp !== currentContextItem.contextExp);
    return /* @__PURE__ */ import_react11.default.createElement("div", {
      className: ""
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "font-medium"
    }, "Relevant type information"), releventContext.reverse().map((c3, i3) => /* @__PURE__ */ import_react11.default.createElement(ReleventItem, {
      item: c3,
      key: i3
    })), defaultTo_default([])(prop_default("contextGlobals", currentContextItem)).map(([exp, type3], i3) => /* @__PURE__ */ import_react11.default.createElement(GlobalTypeHints, {
      exp,
      type: type3,
      key: i3
    })));
  };
  var GlobalTypeHints = ({ exp, type: type3 }) => {
    return /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "flex flex-col my-1.5 p-1 bg-gray-100 rounded-md h-16 justify-center shadow-sm"
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "flex items-center"
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "code"
    }, exp), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "code mx-0.5"
    }, "::"), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "code px-0.5 rounded-sm"
    }, type3)), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "ml-1 text-sm italic"
    }, " Imported from Prelude"));
  };
  var ReleventItem = ({ item }) => {
    let currentTraverseId = useSelector(path_default(["debugger", "currentTraverseId"]));
    const multipleExps = useSelector(path_default(["debugger", "multipleExps"]));
    let dispatch = useDispatch();
    let affinity = pipe(find_default(pipe(nth_default(0), equals_default(currentTraverseId))), nth_default(1))(item.contextSteps);
    let type3 = affinity === "L" ? item.contextType1String : item.contextType2String;
    let origin = affinity === "L" ? "orange highlights" : "blue highlights";
    let tabReleventSteps = item.contextSteps.map((step, i3) => [...step, i3]).filter(nth_default(2));
    let tabDefaultStep = tabReleventSteps[Math.round(tabReleventSteps.length / 2) - 1][3];
    return /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "flex flex-col my-1.5 bg-white p-2 rounded-md cursor-pointer shadow-sm hover:bg-gray-100",
      onMouseEnter: (_3) => affinity === "L" ? dispatch(showOnlyMark1()) : dispatch(showOnlyMark2()),
      onMouseLeave: (_3) => dispatch(showBoth())
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "flex justify-between"
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "flex items-center"
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "code"
    }, item.contextExp), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "code mx-0.5"
    }, "::"), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "code px-0.5 rounded-sm " + (affinity === "L" ? "marker2" : "marker1")
    }, type3)), multipleExps ? /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "flex items-center"
    }, /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "text-sm text-gray-500"
    }, "Looks wrong? "), /* @__PURE__ */ import_react11.default.createElement("button", {
      onClick: (_3) => dispatch(lockStep(tabDefaultStep)),
      className: "border border-gray-300 rounded-sm px-2 py-1 mr-1 ml-2 bg-white active:bg-gray-200 hover:bg-gray-100 shadow-sm"
    }, "Inspect")) : null), /* @__PURE__ */ import_react11.default.createElement("div", {
      className: "text-xs italic"
    }, " Inferred from ", origin, " "));
  };
  var TabReport_default = TabReport;

  // Debugger.jsx
  var Debugger = () => {
    let wellTyped = useSelector((state) => state.debugger.wellTyped);
    let loadError = useSelector((state) => state.debugger.loadError);
    let parseError = useSelector((state) => state.debugger.parseError);
    return /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "h-full bg-gray-200"
    }, (() => {
      if (wellTyped) {
        return /* @__PURE__ */ import_react12.default.createElement("div", {
          className: "p-4 flex items-center"
        }, /* @__PURE__ */ import_react12.default.createElement("ion-icon", {
          size: "large",
          style: { color: "rgb(74, 222, 128)" },
          name: "checkmark-circle"
        }), /* @__PURE__ */ import_react12.default.createElement("span", {
          className: "p-2"
        }, "Congratulations! Your code is well typed."));
      } else if (parseError !== null) {
        return /* @__PURE__ */ import_react12.default.createElement(ParseErrorReport, null);
      } else if (loadError !== null) {
        return /* @__PURE__ */ import_react12.default.createElement(LoadErrorReport, null);
      } else if (!wellTyped) {
        return /* @__PURE__ */ import_react12.default.createElement(TabReport_default, null);
      }
    })());
  };
  var ParseErrorReport = () => {
    let parseError = useSelector((state) => state.debugger.parseError);
    return /* @__PURE__ */ import_react12.default.createElement("div", {
      class: "p-4"
    }, /* @__PURE__ */ import_react12.default.createElement("p", {
      className: "py-2 px-4"
    }, "A syntax error was found in the code"), /* @__PURE__ */ import_react12.default.createElement("div", {
      className: "bg-gray-100 py-2 px-4 rounded-md"
    }, /* @__PURE__ */ import_react12.default.createElement("p", null, " ", parseError.message, " "), /* @__PURE__ */ import_react12.default.createElement("p", null, "Location: ", parseError.loc.srcLine, ":", parseError.loc.srcColumn)));
  };
  var LoadErrorReport = () => {
    let loadError = useSelector((state) => state.debugger.loadError);
    return /* @__PURE__ */ import_react12.default.createElement("div", {
      class: "p-4"
    }, /* @__PURE__ */ import_react12.default.createElement("p", {
      className: "py-2 px-4"
    }, "A variable is used without being declared."), loadError.map(([v2, loc]) => {
      return /* @__PURE__ */ import_react12.default.createElement("div", {
        className: "bg-gray-100 py-2 px-4 rounded-md"
      }, /* @__PURE__ */ import_react12.default.createElement("p", null, "Variable: ", v2, " "), /* @__PURE__ */ import_react12.default.createElement("p", null, "Location: ", " " + loc.srcSpanStartLine, ":", loc.srcSpanStartColumn, " -", " " + loc.srcSpanEndLine, ":", loc.srcSpanEndColumn));
    }));
  };
  var Debugger_default = Debugger;

  // MenuBar.jsx
  var import_react13 = __toESM(require_react());
  var MenuBar = () => {
    const dispatch = useDispatch();
    const mode = useSelector(path_default(["debugger", "mode"]));
    const deductionSteps = useSelector(path_default(["debugger", "debuggingSteps"]));
    const multipleExps = useSelector(path_default(["debugger", "multipleExps"]));
    const currentTaskNum = useSelector(path_default(["debugger", "currentTaskNum"]));
    const attempts = useSelector(path_default(["debugger", "attempts"]));
    const currentTaskAttemps = attempts[currentTaskNum];
    (0, import_react13.useEffect)(() => {
    }, []);
    return /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "w-full bg-gray-100 h-10 flex justify-between"
    }, /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "flex items-center"
    }, /* @__PURE__ */ import_react13.default.createElement("a", {
      href: "/",
      className: "cursor-pointer mr-4 px-4",
      style: {}
    }, /* @__PURE__ */ import_react13.default.createElement("svg", {
      className: "w-10",
      viewBox: "0 0 100 100"
    }, /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M9.061,50.971c-0,3.037 3.464,5.499 7.737,5.499l-0,-5.499l-7.737,0Z",
      style: { fill: "#3eac3a" }
    }), /* @__PURE__ */ import_react13.default.createElement("rect", {
      x: "16.793",
      y: "50.98",
      width: "43.762",
      height: "5.49",
      style: { fill: "#3eac3a" }
    }), /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M50,10.032c-22.61,0 -40.939,18.329 -40.939,40.939l40.939,0l0,-40.939Z",
      style: { fill: "#3c9339" }
    }), /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M46.807,69.476c0,7.182 6.164,13.005 13.769,13.005l-0,-13.005l-13.769,-0Z",
      style: { fill: "#3c9339" }
    }), /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M56.139,60.144c-5.154,-0 -9.332,4.178 -9.332,9.332l9.332,-0l0,-9.332Z",
      style: { fill: "#087604" }
    }), /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M60.555,82.481c12.507,0 22.645,-11.512 22.645,-25.712c0,-14.2 -10.138,-25.712 -22.645,-25.712l0,51.424Z",
      style: { fill: "#21781e" }
    }), /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M56.139,60.144c2.439,-0 4.416,2.089 4.416,4.666c0,2.577 -1.977,4.666 -4.416,4.666l0,-9.332Z",
      style: { fill: "#0d9509" }
    }), /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M56.139,56.472l0,-0.002l4.416,0l0,4.572l0,-0l0,-0.026c0,-2.466 -1.967,-4.475 -4.416,-4.544Z",
      style: { fill: "#3eac3a" }
    }), /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M50,50.985l-0,-0.005l10.555,0l0,10.926l-0,0l0,-0.062c0,-5.892 -4.702,-10.696 -10.555,-10.859Z",
      style: { fill: "#1c7e18" }
    }), /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M53.205,31.056l-0,0.001l-3.205,0l0,-3.317l0,-0l0,0.019c0,1.789 1.428,3.247 3.205,3.297Z",
      style: { fill: "#21781e" }
    }), /* @__PURE__ */ import_react13.default.createElement("rect", {
      x: "50",
      y: "31.057",
      width: "10.555",
      height: "19.923",
      style: { fill: "#21781e" }
    }), /* @__PURE__ */ import_react13.default.createElement("path", {
      d: "M34.015,56.47c0,4.563 3.908,8.262 8.729,8.262c4.821,-0 8.729,-3.699 8.729,-8.262l-17.458,0Z",
      style: { fill: "#486c47" }
    }))), /* @__PURE__ */ import_react13.default.createElement("button", {
      className: "bg-gray-300 px-4 py-1 rounded-md mx-2 flex h-8 justify-center items-center",
      onClick: (_3) => {
        dispatch(switchTaskThunk(currentTaskNum));
        dispatch(toNormalMode());
      }
    }, "Reset problem"), currentTaskAttemps > 5 ? /* @__PURE__ */ import_react13.default.createElement("button", {
      "aria-label": "Skip this task if you are stuck on a problem for too long",
      className: "bg-gray-300 px-4 py-1 rounded-md mx-2 flex h-8 justify-center items-center hint--bottom",
      onClick: (_3) => {
        dispatch(switchTaskThunk(currentTaskNum + 1));
        dispatch(toNormalMode());
      }
    }, "Give up") : null, mode === editorModes.normal ? /* @__PURE__ */ import_react13.default.createElement("button", {
      className: "bg-gray-300 px-4 py-1 rounded-md mx-2 flex h-8 justify-center items-center",
      onClick: (_3) => dispatch(toEditMode())
    }, /* @__PURE__ */ import_react13.default.createElement(PencilAltIcon_default, {
      className: "h-4 w-4 mr-1"
    }), "Edit code") : /* @__PURE__ */ import_react13.default.createElement("button", {
      className: "bg-gray-300 px-4 py-1 rounded-md mx-2 flex h-8 justify-center items-center",
      onClick: (_3) => {
        dispatch(toNormalMode());
        dispatch(typeCheckThunk());
      }
    }, /* @__PURE__ */ import_react13.default.createElement(EyeIcon_default, {
      className: "h-4 w-4 mr-1"
    }), "Type check"), /* @__PURE__ */ import_react13.default.createElement("a", {
      href: "/tutorial",
      target: "_blank",
      className: "bg-gray-300 px-4 py-1 rounded-md mx-2 flex h-8 justify-center items-center"
    }, /* @__PURE__ */ import_react13.default.createElement(BookOpenIcon_default, {
      className: "h-4 w-4 mr-1"
    }), "Tutorial"), deductionSteps ? /* @__PURE__ */ import_react13.default.createElement(import_react13.default.Fragment, null, /* @__PURE__ */ import_react13.default.createElement("button", {
      "aria-label": "Previous step (Left arrow key / k )",
      className: "bg-gray-700 hover:bg-gray-800 active:bg-gray-900 px-2 py-1 mx-0.5 h-8 rounded-md flex justify-center items-center hint--bottom",
      onClick: (_3) => dispatch(nextStep())
    }, /* @__PURE__ */ import_react13.default.createElement(ChevronDoubleLeftIcon_default, {
      className: "h-4 w-4 text-white"
    })), /* @__PURE__ */ import_react13.default.createElement("button", {
      "aria-label": "Next step (Right arrow key / j)",
      className: "bg-gray-700 hover:bg-gray-800 active:bg-gray-900 px-2 py-1 mx-0.5 h-8 rounded-md flex justify-center items-center hint--bottom",
      onClick: (_3) => dispatch(prevStep())
    }, /* @__PURE__ */ import_react13.default.createElement(ChevronDoubleRightIcon_default, {
      className: "h-4 w-4 text-white"
    }))) : null), /* @__PURE__ */ import_react13.default.createElement("div", {
      className: "flex items-center px-2"
    }, /* @__PURE__ */ import_react13.default.createElement("div", null, (() => {
      if (!multipleExps && !deductionSteps)
        return "Basic Mode";
      if (multipleExps && !deductionSteps)
        return "Balanced Mode";
      if (multipleExps && deductionSteps)
        return "Advanced Mode";
    })())));
  };
  var MenuBar_default = MenuBar;

  // index.jsx
  var import_react_modal = __toESM(require_lib());
  import_react_modal.default.setAppElement("#react-root");
  store_default.dispatch(switchTaskThunk(0));
  window.addEventListener("keyup", (event) => {
    const keyName = event.key;
    let state = store_default.getState();
    if (state.debugger.mode === editorModes.normal && (keyName === "1" || keyName === "2")) {
      store_default.dispatch(showBoth());
    }
  });
  window.addEventListener("keydown", (event) => {
    let state = store_default.getState();
    const keyName = event.key;
    if (keyName === "Tab") {
      event.preventDefault();
      if (!state.debugger.multipleExps) {
        store_default.dispatch(toggleMultipleExps());
      } else if (state.debugger.multipleExps && !state.debugger.debuggingSteps) {
        store_default.dispatch(toggleDebuggerStpes());
      } else if (state.debugger.multipleExps && state.debugger.debuggingSteps) {
        store_default.dispatch(toggleMultipleExps());
        store_default.dispatch(toggleDebuggerStpes());
      }
    }
    if (state.debugger.mode === editorModes.normal) {
      if (keyName === "1") {
        store_default.dispatch(showOnlyMark1());
      }
      if (keyName === "2") {
        store_default.dispatch(showOnlyMark2());
      }
      if (state.debugger.debuggingSteps) {
        if (keyName === "ArrowDown" || keyName === "ArrowRight" || keyName === "j") {
          store_default.dispatch(prevStep());
        }
        if (keyName === "ArrowUp" || keyName === "ArrowLeft" || keyName === "k") {
          store_default.dispatch(nextStep());
        }
      }
    }
  });
  var App2 = () => {
    let wellTyped = useSelector((state) => state.debugger.wellTyped);
    return /* @__PURE__ */ import_react14.default.createElement(import_react14.default.Fragment, null, /* @__PURE__ */ import_react14.default.createElement(import_react_modal.default, {
      isOpen: wellTyped,
      className: "max-w-2xl bg-gray-100 h-80 min-w-max left-1/2 top-1/2 -translate-y-1/2 -translate-x-1/2 absolute p-6 rounded-md"
    }, /* @__PURE__ */ import_react14.default.createElement(ModelContent, null)), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "w-full h-full flex flex-col"
    }, /* @__PURE__ */ import_react14.default.createElement(MenuBar_default, null), /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex-grow"
    }, /* @__PURE__ */ import_react14.default.createElement(y2, {
      initialSizes: [60, 40]
    }, /* @__PURE__ */ import_react14.default.createElement(Editor_default, null), /* @__PURE__ */ import_react14.default.createElement(Debugger_default, null)))));
  };
  var ModelContent = () => {
    let dispatch = useDispatch();
    let currentTaskNum = useSelector((state) => state.debugger.currentTaskNum);
    return /* @__PURE__ */ import_react14.default.createElement("div", {
      className: "flex flex-col justify-around items-center h-full"
    }, /* @__PURE__ */ import_react14.default.createElement("div", null, /* @__PURE__ */ import_react14.default.createElement("p", {
      className: "text-center"
    }, "Congratulations. You fixed the type error!"), currentTaskNum === 8 ? /* @__PURE__ */ import_react14.default.createElement("p", {
      className: "text-center"
    }, "Click next to leave us some feedback.") : /* @__PURE__ */ import_react14.default.createElement("p", {
      className: "text-center"
    }, "Click next to head over to the next challenge.")), /* @__PURE__ */ import_react14.default.createElement("button", {
      className: "px-5 py-1 bg-green-400 rounded-md",
      onClick: () => {
        if (currentTaskNum === 8) {
          window.location = "https://forms.gle/nts9EQsrbNFAPEdv8";
          return;
        } else {
          dispatch(switchTaskThunk(currentTaskNum + 1));
          dispatch(toNormalMode());
        }
      }
    }, "Next"));
  };
  import_react_dom2.default.render(/* @__PURE__ */ import_react14.default.createElement(import_react14.default.StrictMode, null, /* @__PURE__ */ import_react14.default.createElement(Provider_default, {
    store: store_default
  }, /* @__PURE__ */ import_react14.default.createElement(App2, null))), document.getElementById("react-root"));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
  Copyright (c) 2015 Jed Watson.
  Based on code that is Copyright 2013-2015, Facebook, Inc.
  All rights reserved.
*/
/*!
 * Adapted from jQuery UI core
 *
 * http://jqueryui.com
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * http://api.jqueryui.com/category/ui-core/
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=out.js.map
